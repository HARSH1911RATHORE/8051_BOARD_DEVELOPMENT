                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___sdcc_heap_size
                                     12 	.globl _main
                                     13 	.globl _free
                                     14 	.globl _malloc
                                     15 	.globl _atoi
                                     16 	.globl _printf_tiny
                                     17 	.globl _gets
                                     18 	.globl _printf
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _F1
                                     26 	.globl _P
                                     27 	.globl _PS
                                     28 	.globl _PT1
                                     29 	.globl _PX1
                                     30 	.globl _PT0
                                     31 	.globl _PX0
                                     32 	.globl _RD
                                     33 	.globl _WR
                                     34 	.globl _T1
                                     35 	.globl _T0
                                     36 	.globl _INT1
                                     37 	.globl _INT0
                                     38 	.globl _TXD
                                     39 	.globl _RXD
                                     40 	.globl _P3_7
                                     41 	.globl _P3_6
                                     42 	.globl _P3_5
                                     43 	.globl _P3_4
                                     44 	.globl _P3_3
                                     45 	.globl _P3_2
                                     46 	.globl _P3_1
                                     47 	.globl _P3_0
                                     48 	.globl _EA
                                     49 	.globl _ES
                                     50 	.globl _ET1
                                     51 	.globl _EX1
                                     52 	.globl _ET0
                                     53 	.globl _EX0
                                     54 	.globl _P2_7
                                     55 	.globl _P2_6
                                     56 	.globl _P2_5
                                     57 	.globl _P2_4
                                     58 	.globl _P2_3
                                     59 	.globl _P2_2
                                     60 	.globl _P2_1
                                     61 	.globl _P2_0
                                     62 	.globl _SM0
                                     63 	.globl _SM1
                                     64 	.globl _SM2
                                     65 	.globl _REN
                                     66 	.globl _TB8
                                     67 	.globl _RB8
                                     68 	.globl _TI
                                     69 	.globl _RI
                                     70 	.globl _P1_7
                                     71 	.globl _P1_6
                                     72 	.globl _P1_5
                                     73 	.globl _P1_4
                                     74 	.globl _P1_3
                                     75 	.globl _P1_2
                                     76 	.globl _P1_1
                                     77 	.globl _P1_0
                                     78 	.globl _TF1
                                     79 	.globl _TR1
                                     80 	.globl _TF0
                                     81 	.globl _TR0
                                     82 	.globl _IE1
                                     83 	.globl _IT1
                                     84 	.globl _IE0
                                     85 	.globl _IT0
                                     86 	.globl _P0_7
                                     87 	.globl _P0_6
                                     88 	.globl _P0_5
                                     89 	.globl _P0_4
                                     90 	.globl _P0_3
                                     91 	.globl _P0_2
                                     92 	.globl _P0_1
                                     93 	.globl _P0_0
                                     94 	.globl _P5_7
                                     95 	.globl _P5_6
                                     96 	.globl _P5_5
                                     97 	.globl _P5_4
                                     98 	.globl _P5_3
                                     99 	.globl _P5_2
                                    100 	.globl _P5_1
                                    101 	.globl _P5_0
                                    102 	.globl _P4_7
                                    103 	.globl _P4_6
                                    104 	.globl _P4_5
                                    105 	.globl _P4_4
                                    106 	.globl _P4_3
                                    107 	.globl _P4_2
                                    108 	.globl _P4_1
                                    109 	.globl _P4_0
                                    110 	.globl _PX0L
                                    111 	.globl _PT0L
                                    112 	.globl _PX1L
                                    113 	.globl _PT1L
                                    114 	.globl _PSL
                                    115 	.globl _PT2L
                                    116 	.globl _PPCL
                                    117 	.globl _EC
                                    118 	.globl _CCF0
                                    119 	.globl _CCF1
                                    120 	.globl _CCF2
                                    121 	.globl _CCF3
                                    122 	.globl _CCF4
                                    123 	.globl _CR
                                    124 	.globl _CF
                                    125 	.globl _TF2
                                    126 	.globl _EXF2
                                    127 	.globl _RCLK
                                    128 	.globl _TCLK
                                    129 	.globl _EXEN2
                                    130 	.globl _TR2
                                    131 	.globl _C_T2
                                    132 	.globl _CP_RL2
                                    133 	.globl _T2CON_7
                                    134 	.globl _T2CON_6
                                    135 	.globl _T2CON_5
                                    136 	.globl _T2CON_4
                                    137 	.globl _T2CON_3
                                    138 	.globl _T2CON_2
                                    139 	.globl _T2CON_1
                                    140 	.globl _T2CON_0
                                    141 	.globl _PT2
                                    142 	.globl _ET2
                                    143 	.globl _B
                                    144 	.globl _ACC
                                    145 	.globl _PSW
                                    146 	.globl _IP
                                    147 	.globl _P3
                                    148 	.globl _IE
                                    149 	.globl _P2
                                    150 	.globl _SBUF
                                    151 	.globl _SCON
                                    152 	.globl _P1
                                    153 	.globl _TH1
                                    154 	.globl _TH0
                                    155 	.globl _TL1
                                    156 	.globl _TL0
                                    157 	.globl _TMOD
                                    158 	.globl _TCON
                                    159 	.globl _PCON
                                    160 	.globl _DPH
                                    161 	.globl _DPL
                                    162 	.globl _SP
                                    163 	.globl _P0
                                    164 	.globl _EECON
                                    165 	.globl _KBF
                                    166 	.globl _KBE
                                    167 	.globl _KBLS
                                    168 	.globl _BRL
                                    169 	.globl _BDRCON
                                    170 	.globl _T2MOD
                                    171 	.globl _SPDAT
                                    172 	.globl _SPSTA
                                    173 	.globl _SPCON
                                    174 	.globl _SADEN
                                    175 	.globl _SADDR
                                    176 	.globl _WDTPRG
                                    177 	.globl _WDTRST
                                    178 	.globl _P5
                                    179 	.globl _P4
                                    180 	.globl _IPH1
                                    181 	.globl _IPL1
                                    182 	.globl _IPH0
                                    183 	.globl _IPL0
                                    184 	.globl _IEN1
                                    185 	.globl _IEN0
                                    186 	.globl _CMOD
                                    187 	.globl _CL
                                    188 	.globl _CH
                                    189 	.globl _CCON
                                    190 	.globl _CCAPM4
                                    191 	.globl _CCAPM3
                                    192 	.globl _CCAPM2
                                    193 	.globl _CCAPM1
                                    194 	.globl _CCAPM0
                                    195 	.globl _CCAP4L
                                    196 	.globl _CCAP3L
                                    197 	.globl _CCAP2L
                                    198 	.globl _CCAP1L
                                    199 	.globl _CCAP0L
                                    200 	.globl _CCAP4H
                                    201 	.globl _CCAP3H
                                    202 	.globl _CCAP2H
                                    203 	.globl _CCAP1H
                                    204 	.globl _CCAP0H
                                    205 	.globl _CKCON1
                                    206 	.globl _CKCON0
                                    207 	.globl _CKRL
                                    208 	.globl _AUXR1
                                    209 	.globl _AUXR
                                    210 	.globl _TH2
                                    211 	.globl _TL2
                                    212 	.globl _RCAP2H
                                    213 	.globl _RCAP2L
                                    214 	.globl _T2CON
                                    215 	.globl _buffer1
                                    216 	.globl _buffer0
                                    217 	.globl _no_of_characters
                                    218 	.globl _buffer_free_Space
                                    219 	.globl _buffer_space_filled
                                    220 	.globl _buffer_allocated_size
                                    221 	.globl _buffer
                                    222 	.globl _c
                                    223 	.globl _buffer_start_size
                                    224 	.globl _buffer_num
                                    225 	.globl _ascii
                                    226 	.globl _buffer_size
                                    227 	.globl _i
                                    228 	.globl ___sdcc_heap
                                    229 	.globl _function
                                    230 	.globl _getnumber
                                    231 	.globl _putchar
                                    232 	.globl _getchar
                                    233 ;--------------------------------------------------------
                                    234 ; special function registers
                                    235 ;--------------------------------------------------------
                                    236 	.area RSEG    (ABS,DATA)
      000000                        237 	.org 0x0000
                           0000C8   238 _T2CON	=	0x00c8
                           0000CA   239 _RCAP2L	=	0x00ca
                           0000CB   240 _RCAP2H	=	0x00cb
                           0000CC   241 _TL2	=	0x00cc
                           0000CD   242 _TH2	=	0x00cd
                           00008E   243 _AUXR	=	0x008e
                           0000A2   244 _AUXR1	=	0x00a2
                           000097   245 _CKRL	=	0x0097
                           00008F   246 _CKCON0	=	0x008f
                           0000AF   247 _CKCON1	=	0x00af
                           0000FA   248 _CCAP0H	=	0x00fa
                           0000FB   249 _CCAP1H	=	0x00fb
                           0000FC   250 _CCAP2H	=	0x00fc
                           0000FD   251 _CCAP3H	=	0x00fd
                           0000FE   252 _CCAP4H	=	0x00fe
                           0000EA   253 _CCAP0L	=	0x00ea
                           0000EB   254 _CCAP1L	=	0x00eb
                           0000EC   255 _CCAP2L	=	0x00ec
                           0000ED   256 _CCAP3L	=	0x00ed
                           0000EE   257 _CCAP4L	=	0x00ee
                           0000DA   258 _CCAPM0	=	0x00da
                           0000DB   259 _CCAPM1	=	0x00db
                           0000DC   260 _CCAPM2	=	0x00dc
                           0000DD   261 _CCAPM3	=	0x00dd
                           0000DE   262 _CCAPM4	=	0x00de
                           0000D8   263 _CCON	=	0x00d8
                           0000F9   264 _CH	=	0x00f9
                           0000E9   265 _CL	=	0x00e9
                           0000D9   266 _CMOD	=	0x00d9
                           0000A8   267 _IEN0	=	0x00a8
                           0000B1   268 _IEN1	=	0x00b1
                           0000B8   269 _IPL0	=	0x00b8
                           0000B7   270 _IPH0	=	0x00b7
                           0000B2   271 _IPL1	=	0x00b2
                           0000B3   272 _IPH1	=	0x00b3
                           0000C0   273 _P4	=	0x00c0
                           0000E8   274 _P5	=	0x00e8
                           0000A6   275 _WDTRST	=	0x00a6
                           0000A7   276 _WDTPRG	=	0x00a7
                           0000A9   277 _SADDR	=	0x00a9
                           0000B9   278 _SADEN	=	0x00b9
                           0000C3   279 _SPCON	=	0x00c3
                           0000C4   280 _SPSTA	=	0x00c4
                           0000C5   281 _SPDAT	=	0x00c5
                           0000C9   282 _T2MOD	=	0x00c9
                           00009B   283 _BDRCON	=	0x009b
                           00009A   284 _BRL	=	0x009a
                           00009C   285 _KBLS	=	0x009c
                           00009D   286 _KBE	=	0x009d
                           00009E   287 _KBF	=	0x009e
                           0000D2   288 _EECON	=	0x00d2
                           000080   289 _P0	=	0x0080
                           000081   290 _SP	=	0x0081
                           000082   291 _DPL	=	0x0082
                           000083   292 _DPH	=	0x0083
                           000087   293 _PCON	=	0x0087
                           000088   294 _TCON	=	0x0088
                           000089   295 _TMOD	=	0x0089
                           00008A   296 _TL0	=	0x008a
                           00008B   297 _TL1	=	0x008b
                           00008C   298 _TH0	=	0x008c
                           00008D   299 _TH1	=	0x008d
                           000090   300 _P1	=	0x0090
                           000098   301 _SCON	=	0x0098
                           000099   302 _SBUF	=	0x0099
                           0000A0   303 _P2	=	0x00a0
                           0000A8   304 _IE	=	0x00a8
                           0000B0   305 _P3	=	0x00b0
                           0000B8   306 _IP	=	0x00b8
                           0000D0   307 _PSW	=	0x00d0
                           0000E0   308 _ACC	=	0x00e0
                           0000F0   309 _B	=	0x00f0
                                    310 ;--------------------------------------------------------
                                    311 ; special function bits
                                    312 ;--------------------------------------------------------
                                    313 	.area RSEG    (ABS,DATA)
      000000                        314 	.org 0x0000
                           0000AD   315 _ET2	=	0x00ad
                           0000BD   316 _PT2	=	0x00bd
                           0000C8   317 _T2CON_0	=	0x00c8
                           0000C9   318 _T2CON_1	=	0x00c9
                           0000CA   319 _T2CON_2	=	0x00ca
                           0000CB   320 _T2CON_3	=	0x00cb
                           0000CC   321 _T2CON_4	=	0x00cc
                           0000CD   322 _T2CON_5	=	0x00cd
                           0000CE   323 _T2CON_6	=	0x00ce
                           0000CF   324 _T2CON_7	=	0x00cf
                           0000C8   325 _CP_RL2	=	0x00c8
                           0000C9   326 _C_T2	=	0x00c9
                           0000CA   327 _TR2	=	0x00ca
                           0000CB   328 _EXEN2	=	0x00cb
                           0000CC   329 _TCLK	=	0x00cc
                           0000CD   330 _RCLK	=	0x00cd
                           0000CE   331 _EXF2	=	0x00ce
                           0000CF   332 _TF2	=	0x00cf
                           0000DF   333 _CF	=	0x00df
                           0000DE   334 _CR	=	0x00de
                           0000DC   335 _CCF4	=	0x00dc
                           0000DB   336 _CCF3	=	0x00db
                           0000DA   337 _CCF2	=	0x00da
                           0000D9   338 _CCF1	=	0x00d9
                           0000D8   339 _CCF0	=	0x00d8
                           0000AE   340 _EC	=	0x00ae
                           0000BE   341 _PPCL	=	0x00be
                           0000BD   342 _PT2L	=	0x00bd
                           0000BC   343 _PSL	=	0x00bc
                           0000BB   344 _PT1L	=	0x00bb
                           0000BA   345 _PX1L	=	0x00ba
                           0000B9   346 _PT0L	=	0x00b9
                           0000B8   347 _PX0L	=	0x00b8
                           0000C0   348 _P4_0	=	0x00c0
                           0000C1   349 _P4_1	=	0x00c1
                           0000C2   350 _P4_2	=	0x00c2
                           0000C3   351 _P4_3	=	0x00c3
                           0000C4   352 _P4_4	=	0x00c4
                           0000C5   353 _P4_5	=	0x00c5
                           0000C6   354 _P4_6	=	0x00c6
                           0000C7   355 _P4_7	=	0x00c7
                           0000E8   356 _P5_0	=	0x00e8
                           0000E9   357 _P5_1	=	0x00e9
                           0000EA   358 _P5_2	=	0x00ea
                           0000EB   359 _P5_3	=	0x00eb
                           0000EC   360 _P5_4	=	0x00ec
                           0000ED   361 _P5_5	=	0x00ed
                           0000EE   362 _P5_6	=	0x00ee
                           0000EF   363 _P5_7	=	0x00ef
                           000080   364 _P0_0	=	0x0080
                           000081   365 _P0_1	=	0x0081
                           000082   366 _P0_2	=	0x0082
                           000083   367 _P0_3	=	0x0083
                           000084   368 _P0_4	=	0x0084
                           000085   369 _P0_5	=	0x0085
                           000086   370 _P0_6	=	0x0086
                           000087   371 _P0_7	=	0x0087
                           000088   372 _IT0	=	0x0088
                           000089   373 _IE0	=	0x0089
                           00008A   374 _IT1	=	0x008a
                           00008B   375 _IE1	=	0x008b
                           00008C   376 _TR0	=	0x008c
                           00008D   377 _TF0	=	0x008d
                           00008E   378 _TR1	=	0x008e
                           00008F   379 _TF1	=	0x008f
                           000090   380 _P1_0	=	0x0090
                           000091   381 _P1_1	=	0x0091
                           000092   382 _P1_2	=	0x0092
                           000093   383 _P1_3	=	0x0093
                           000094   384 _P1_4	=	0x0094
                           000095   385 _P1_5	=	0x0095
                           000096   386 _P1_6	=	0x0096
                           000097   387 _P1_7	=	0x0097
                           000098   388 _RI	=	0x0098
                           000099   389 _TI	=	0x0099
                           00009A   390 _RB8	=	0x009a
                           00009B   391 _TB8	=	0x009b
                           00009C   392 _REN	=	0x009c
                           00009D   393 _SM2	=	0x009d
                           00009E   394 _SM1	=	0x009e
                           00009F   395 _SM0	=	0x009f
                           0000A0   396 _P2_0	=	0x00a0
                           0000A1   397 _P2_1	=	0x00a1
                           0000A2   398 _P2_2	=	0x00a2
                           0000A3   399 _P2_3	=	0x00a3
                           0000A4   400 _P2_4	=	0x00a4
                           0000A5   401 _P2_5	=	0x00a5
                           0000A6   402 _P2_6	=	0x00a6
                           0000A7   403 _P2_7	=	0x00a7
                           0000A8   404 _EX0	=	0x00a8
                           0000A9   405 _ET0	=	0x00a9
                           0000AA   406 _EX1	=	0x00aa
                           0000AB   407 _ET1	=	0x00ab
                           0000AC   408 _ES	=	0x00ac
                           0000AF   409 _EA	=	0x00af
                           0000B0   410 _P3_0	=	0x00b0
                           0000B1   411 _P3_1	=	0x00b1
                           0000B2   412 _P3_2	=	0x00b2
                           0000B3   413 _P3_3	=	0x00b3
                           0000B4   414 _P3_4	=	0x00b4
                           0000B5   415 _P3_5	=	0x00b5
                           0000B6   416 _P3_6	=	0x00b6
                           0000B7   417 _P3_7	=	0x00b7
                           0000B0   418 _RXD	=	0x00b0
                           0000B1   419 _TXD	=	0x00b1
                           0000B2   420 _INT0	=	0x00b2
                           0000B3   421 _INT1	=	0x00b3
                           0000B4   422 _T0	=	0x00b4
                           0000B5   423 _T1	=	0x00b5
                           0000B6   424 _WR	=	0x00b6
                           0000B7   425 _RD	=	0x00b7
                           0000B8   426 _PX0	=	0x00b8
                           0000B9   427 _PT0	=	0x00b9
                           0000BA   428 _PX1	=	0x00ba
                           0000BB   429 _PT1	=	0x00bb
                           0000BC   430 _PS	=	0x00bc
                           0000D0   431 _P	=	0x00d0
                           0000D1   432 _F1	=	0x00d1
                           0000D2   433 _OV	=	0x00d2
                           0000D3   434 _RS0	=	0x00d3
                           0000D4   435 _RS1	=	0x00d4
                           0000D5   436 _F0	=	0x00d5
                           0000D6   437 _AC	=	0x00d6
                           0000D7   438 _CY	=	0x00d7
                                    439 ;--------------------------------------------------------
                                    440 ; overlayable register banks
                                    441 ;--------------------------------------------------------
                                    442 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        443 	.ds 8
                                    444 ;--------------------------------------------------------
                                    445 ; internal ram data
                                    446 ;--------------------------------------------------------
                                    447 	.area DSEG    (DATA)
      000000                        448 _function_sloc0_1_0:
      000000                        449 	.ds 2
      000002                        450 _function_sloc1_1_0:
      000002                        451 	.ds 2
                                    452 ;--------------------------------------------------------
                                    453 ; overlayable items in internal ram 
                                    454 ;--------------------------------------------------------
                                    455 ;--------------------------------------------------------
                                    456 ; Stack segment in internal ram 
                                    457 ;--------------------------------------------------------
                                    458 	.area	SSEG
      000000                        459 __start__stack:
      000000                        460 	.ds	1
                                    461 
                                    462 ;--------------------------------------------------------
                                    463 ; indirectly addressable internal ram data
                                    464 ;--------------------------------------------------------
                                    465 	.area ISEG    (DATA)
                                    466 ;--------------------------------------------------------
                                    467 ; absolute internal ram data
                                    468 ;--------------------------------------------------------
                                    469 	.area IABS    (ABS,DATA)
                                    470 	.area IABS    (ABS,DATA)
                                    471 ;--------------------------------------------------------
                                    472 ; bit data
                                    473 ;--------------------------------------------------------
                                    474 	.area BSEG    (BIT)
                                    475 ;--------------------------------------------------------
                                    476 ; paged external ram data
                                    477 ;--------------------------------------------------------
                                    478 	.area PSEG    (PAG,XDATA)
                                    479 ;--------------------------------------------------------
                                    480 ; external ram data
                                    481 ;--------------------------------------------------------
                                    482 	.area XSEG    (XDATA)
      000000                        483 ___sdcc_heap::
      000000                        484 	.ds 4000
      000FA0                        485 _i::
      000FA0                        486 	.ds 2
      000FA2                        487 _buffer_size::
      000FA2                        488 	.ds 300
      0010CE                        489 _ascii::
      0010CE                        490 	.ds 2
      0010D0                        491 _buffer_num::
      0010D0                        492 	.ds 2
      0010D2                        493 _buffer_start_size::
      0010D2                        494 	.ds 2
      0010D4                        495 _c::
      0010D4                        496 	.ds 1
      0010D5                        497 _buffer::
      0010D5                        498 	.ds 450
      001297                        499 _buffer_allocated_size::
      001297                        500 	.ds 2
      001299                        501 _buffer_space_filled::
      001299                        502 	.ds 2
      00129B                        503 _buffer_free_Space::
      00129B                        504 	.ds 2
      00129D                        505 _no_of_characters::
      00129D                        506 	.ds 2
      00129F                        507 _function_count1_65536_48:
      00129F                        508 	.ds 2
      0012A1                        509 _function_count2_65536_48:
      0012A1                        510 	.ds 2
      0012A3                        511 _getnumber_number_65536_80:
      0012A3                        512 	.ds 200
      00136B                        513 _putchar_c_65536_81:
      00136B                        514 	.ds 2
                                    515 ;--------------------------------------------------------
                                    516 ; absolute external ram data
                                    517 ;--------------------------------------------------------
                                    518 	.area XABS    (ABS,XDATA)
                                    519 ;--------------------------------------------------------
                                    520 ; external initialized ram data
                                    521 ;--------------------------------------------------------
                                    522 	.area XISEG   (XDATA)
      000000                        523 _buffer0::
      000000                        524 	.ds 2
      000002                        525 _buffer1::
      000002                        526 	.ds 2
                                    527 	.area HOME    (CODE)
                                    528 	.area GSINIT0 (CODE)
                                    529 	.area GSINIT1 (CODE)
                                    530 	.area GSINIT2 (CODE)
                                    531 	.area GSINIT3 (CODE)
                                    532 	.area GSINIT4 (CODE)
                                    533 	.area GSINIT5 (CODE)
                                    534 	.area GSINIT  (CODE)
                                    535 	.area GSFINAL (CODE)
                                    536 	.area CSEG    (CODE)
                                    537 ;--------------------------------------------------------
                                    538 ; interrupt vector 
                                    539 ;--------------------------------------------------------
                                    540 	.area HOME    (CODE)
      000000                        541 __interrupt_vect:
      000000 02r00r00         [24]  542 	ljmp	__sdcc_gsinit_startup
                                    543 ;--------------------------------------------------------
                                    544 ; global & static initialisations
                                    545 ;--------------------------------------------------------
                                    546 	.area HOME    (CODE)
                                    547 	.area GSINIT  (CODE)
                                    548 	.area GSFINAL (CODE)
                                    549 	.area GSINIT  (CODE)
                                    550 	.globl __sdcc_gsinit_startup
                                    551 	.globl __sdcc_program_startup
                                    552 	.globl __start__stack
                                    553 	.globl __mcs51_genXINIT
                                    554 	.globl __mcs51_genXRAMCLEAR
                                    555 	.globl __mcs51_genRAMCLEAR
                                    556 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  557 	ljmp	__sdcc_program_startup
                                    558 ;--------------------------------------------------------
                                    559 ; Home
                                    560 ;--------------------------------------------------------
                                    561 	.area HOME    (CODE)
                                    562 	.area HOME    (CODE)
      000003                        563 __sdcc_program_startup:
      000003 02r00r00         [24]  564 	ljmp	_main
                                    565 ;	return from main will return to caller
                                    566 ;--------------------------------------------------------
                                    567 ; code
                                    568 ;--------------------------------------------------------
                                    569 	.area CSEG    (CODE)
                                    570 ;------------------------------------------------------------
                                    571 ;Allocation info for local variables in function 'main'
                                    572 ;------------------------------------------------------------
                                    573 ;buffer1                   Allocated with name '_main_buffer1_65536_42'
                                    574 ;------------------------------------------------------------
                                    575 ;	main.c:27: int main()
                                    576 ;	-----------------------------------------
                                    577 ;	 function main
                                    578 ;	-----------------------------------------
      000000                        579 _main:
                           000007   580 	ar7 = 0x07
                           000006   581 	ar6 = 0x06
                           000005   582 	ar5 = 0x05
                           000004   583 	ar4 = 0x04
                           000003   584 	ar3 = 0x03
                           000002   585 	ar2 = 0x02
                           000001   586 	ar1 = 0x01
                           000000   587 	ar0 = 0x00
                                    588 ;	main.c:32: printf_tiny("Specify the buffer size\n\r");
      000000 74r02            [12]  589 	mov	a,#___str_0
      000002 C0 E0            [24]  590 	push	acc
      000004 74s00            [12]  591 	mov	a,#(___str_0 >> 8)
      000006 C0 E0            [24]  592 	push	acc
      000008 12r00r00         [24]  593 	lcall	_printf_tiny
      00000B 15 81            [12]  594 	dec	sp
      00000D 15 81            [12]  595 	dec	sp
                                    596 ;	main.c:33: buffer_start_size=getnumber();           //get the buffer size
      00000F 12r0CrE7         [24]  597 	lcall	_getnumber
      000012 E5 82            [12]  598 	mov	a,dpl
      000014 85 83 F0         [24]  599 	mov	b,dph
      000017 90r10rD2         [24]  600 	mov	dptr,#_buffer_start_size
      00001A F0               [24]  601 	movx	@dptr,a
      00001B E5 F0            [12]  602 	mov	a,b
      00001D A3               [24]  603 	inc	dptr
      00001E F0               [24]  604 	movx	@dptr,a
                                    605 ;	main.c:34: while (!((buffer_start_size <= 3200) && (buffer_start_size >= 32)&&(buffer_start_size%16==0)))  //checking for valid buffer size
      00001F                        606 00103$:
      00001F 90r10rD2         [24]  607 	mov	dptr,#_buffer_start_size
      000022 E0               [24]  608 	movx	a,@dptr
      000023 FE               [12]  609 	mov	r6,a
      000024 A3               [24]  610 	inc	dptr
      000025 E0               [24]  611 	movx	a,@dptr
      000026 FF               [12]  612 	mov	r7,a
      000027 C3               [12]  613 	clr	c
      000028 74 80            [12]  614 	mov	a,#0x80
      00002A 9E               [12]  615 	subb	a,r6
      00002B 74 0C            [12]  616 	mov	a,#0x0c
      00002D 9F               [12]  617 	subb	a,r7
      00002E 40 0D            [24]  618 	jc	00104$
      000030 EE               [12]  619 	mov	a,r6
      000031 94 20            [12]  620 	subb	a,#0x20
      000033 EF               [12]  621 	mov	a,r7
      000034 94 00            [12]  622 	subb	a,#0x00
      000036 40 05            [24]  623 	jc	00104$
      000038 EE               [12]  624 	mov	a,r6
      000039 54 0F            [12]  625 	anl	a,#0x0f
      00003B 60 30            [24]  626 	jz	00105$
      00003D                        627 00104$:
                                    628 ;	main.c:36: printf_tiny("Invalid buffer size\n\r");                           //printing the result as per buffer size entered
      00003D 74r1C            [12]  629 	mov	a,#___str_1
      00003F C0 E0            [24]  630 	push	acc
      000041 74s00            [12]  631 	mov	a,#(___str_1 >> 8)
      000043 C0 E0            [24]  632 	push	acc
      000045 12r00r00         [24]  633 	lcall	_printf_tiny
      000048 15 81            [12]  634 	dec	sp
      00004A 15 81            [12]  635 	dec	sp
                                    636 ;	main.c:37: printf_tiny("Enter a new buffer size\n\r");
      00004C 74r32            [12]  637 	mov	a,#___str_2
      00004E C0 E0            [24]  638 	push	acc
      000050 74s00            [12]  639 	mov	a,#(___str_2 >> 8)
      000052 C0 E0            [24]  640 	push	acc
      000054 12r00r00         [24]  641 	lcall	_printf_tiny
      000057 15 81            [12]  642 	dec	sp
      000059 15 81            [12]  643 	dec	sp
                                    644 ;	main.c:38: buffer_start_size=getnumber();
      00005B 12r0CrE7         [24]  645 	lcall	_getnumber
      00005E E5 82            [12]  646 	mov	a,dpl
      000060 85 83 F0         [24]  647 	mov	b,dph
      000063 90r10rD2         [24]  648 	mov	dptr,#_buffer_start_size
      000066 F0               [24]  649 	movx	@dptr,a
      000067 E5 F0            [12]  650 	mov	a,b
      000069 A3               [24]  651 	inc	dptr
      00006A F0               [24]  652 	movx	@dptr,a
      00006B 80 B2            [24]  653 	sjmp	00103$
      00006D                        654 00105$:
                                    655 ;	main.c:40: buffer[0]= malloc(buffer_start_size*sizeof(char));                //allocating space for the buffer_0 at the start
      00006D 8E 82            [24]  656 	mov	dpl,r6
      00006F 8F 83            [24]  657 	mov	dph,r7
      000071 12r00r00         [24]  658 	lcall	_malloc
      000074 AE 82            [24]  659 	mov	r6,dpl
      000076 AF 83            [24]  660 	mov	r7,dph
      000078 7D 00            [12]  661 	mov	r5,#0x00
      00007A 90r10rD5         [24]  662 	mov	dptr,#_buffer
      00007D EE               [12]  663 	mov	a,r6
      00007E F0               [24]  664 	movx	@dptr,a
      00007F EF               [12]  665 	mov	a,r7
      000080 A3               [24]  666 	inc	dptr
      000081 F0               [24]  667 	movx	@dptr,a
      000082 ED               [12]  668 	mov	a,r5
      000083 A3               [24]  669 	inc	dptr
      000084 F0               [24]  670 	movx	@dptr,a
                                    671 ;	main.c:41: printf("Address of buffer_0=%p\n\r",buffer[0]);
      000085 C0 06            [24]  672 	push	ar6
      000087 C0 07            [24]  673 	push	ar7
      000089 C0 05            [24]  674 	push	ar5
      00008B 74r4C            [12]  675 	mov	a,#___str_3
      00008D C0 E0            [24]  676 	push	acc
      00008F 74s00            [12]  677 	mov	a,#(___str_3 >> 8)
      000091 C0 E0            [24]  678 	push	acc
      000093 74 80            [12]  679 	mov	a,#0x80
      000095 C0 E0            [24]  680 	push	acc
      000097 12r00r00         [24]  681 	lcall	_printf
      00009A E5 81            [12]  682 	mov	a,sp
      00009C 24 FA            [12]  683 	add	a,#0xfa
      00009E F5 81            [12]  684 	mov	sp,a
                                    685 ;	main.c:42: buffer[1]= malloc(buffer_start_size*sizeof(char));                //allocating space for the buffer_1 at the start
      0000A0 90r10rD2         [24]  686 	mov	dptr,#_buffer_start_size
      0000A3 E0               [24]  687 	movx	a,@dptr
      0000A4 FE               [12]  688 	mov	r6,a
      0000A5 A3               [24]  689 	inc	dptr
      0000A6 E0               [24]  690 	movx	a,@dptr
      0000A7 FF               [12]  691 	mov	r7,a
      0000A8 8E 82            [24]  692 	mov	dpl,r6
      0000AA 8F 83            [24]  693 	mov	dph,r7
      0000AC 12r00r00         [24]  694 	lcall	_malloc
      0000AF AE 82            [24]  695 	mov	r6,dpl
      0000B1 AF 83            [24]  696 	mov	r7,dph
      0000B3 7D 00            [12]  697 	mov	r5,#0x00
      0000B5 90r10rD8         [24]  698 	mov	dptr,#(_buffer + 0x0003)
      0000B8 EE               [12]  699 	mov	a,r6
      0000B9 F0               [24]  700 	movx	@dptr,a
      0000BA EF               [12]  701 	mov	a,r7
      0000BB A3               [24]  702 	inc	dptr
      0000BC F0               [24]  703 	movx	@dptr,a
      0000BD ED               [12]  704 	mov	a,r5
      0000BE A3               [24]  705 	inc	dptr
      0000BF F0               [24]  706 	movx	@dptr,a
                                    707 ;	main.c:43: printf("Address of buffer_1=%p\n\r",buffer[1]);
      0000C0 C0 06            [24]  708 	push	ar6
      0000C2 C0 07            [24]  709 	push	ar7
      0000C4 C0 05            [24]  710 	push	ar5
      0000C6 74r65            [12]  711 	mov	a,#___str_4
      0000C8 C0 E0            [24]  712 	push	acc
      0000CA 74s00            [12]  713 	mov	a,#(___str_4 >> 8)
      0000CC C0 E0            [24]  714 	push	acc
      0000CE 74 80            [12]  715 	mov	a,#0x80
      0000D0 C0 E0            [24]  716 	push	acc
      0000D2 12r00r00         [24]  717 	lcall	_printf
      0000D5 E5 81            [12]  718 	mov	a,sp
      0000D7 24 FA            [12]  719 	add	a,#0xfa
      0000D9 F5 81            [12]  720 	mov	sp,a
                                    721 ;	main.c:45: if (buffer[1]==NULL)                                           //if buffer_1 is null, taking buffer size for both buffers again
      0000DB 90r10rD8         [24]  722 	mov	dptr,#(_buffer + 0x0003)
      0000DE E0               [24]  723 	movx	a,@dptr
      0000DF FD               [12]  724 	mov	r5,a
      0000E0 A3               [24]  725 	inc	dptr
      0000E1 E0               [24]  726 	movx	a,@dptr
      0000E2 FE               [12]  727 	mov	r6,a
      0000E3 A3               [24]  728 	inc	dptr
      0000E4 E0               [24]  729 	movx	a,@dptr
      0000E5 FF               [12]  730 	mov	r7,a
      0000E6 ED               [12]  731 	mov	a,r5
      0000E7 4E               [12]  732 	orl	a,r6
      0000E8 60 03            [24]  733 	jz	00151$
      0000EA 02r01rD9         [24]  734 	ljmp	00112$
      0000ED                        735 00151$:
                                    736 ;	main.c:47: printf_tiny("Error. Not enough space available for both buffers\n\r");
      0000ED 74r7E            [12]  737 	mov	a,#___str_5
      0000EF C0 E0            [24]  738 	push	acc
      0000F1 74s00            [12]  739 	mov	a,#(___str_5 >> 8)
      0000F3 C0 E0            [24]  740 	push	acc
      0000F5 12r00r00         [24]  741 	lcall	_printf_tiny
      0000F8 15 81            [12]  742 	dec	sp
      0000FA 15 81            [12]  743 	dec	sp
                                    744 ;	main.c:48: printf_tiny("Free both buffers\n\r");
      0000FC 74rB3            [12]  745 	mov	a,#___str_6
      0000FE C0 E0            [24]  746 	push	acc
      000100 74s00            [12]  747 	mov	a,#(___str_6 >> 8)
      000102 C0 E0            [24]  748 	push	acc
      000104 12r00r00         [24]  749 	lcall	_printf_tiny
      000107 15 81            [12]  750 	dec	sp
      000109 15 81            [12]  751 	dec	sp
                                    752 ;	main.c:49: free(buffer[0]);                                        //if buffer_1 is null, free buffer_0 and take input again
      00010B 90r10rD5         [24]  753 	mov	dptr,#_buffer
      00010E E0               [24]  754 	movx	a,@dptr
      00010F FD               [12]  755 	mov	r5,a
      000110 A3               [24]  756 	inc	dptr
      000111 E0               [24]  757 	movx	a,@dptr
      000112 FE               [12]  758 	mov	r6,a
      000113 A3               [24]  759 	inc	dptr
      000114 E0               [24]  760 	movx	a,@dptr
      000115 FF               [12]  761 	mov	r7,a
      000116 8D 82            [24]  762 	mov	dpl,r5
      000118 8E 83            [24]  763 	mov	dph,r6
      00011A 8F F0            [24]  764 	mov	b,r7
      00011C 12r00r00         [24]  765 	lcall	_free
                                    766 ;	main.c:50: printf_tiny("Print a smaller buffer size\n\r");
      00011F 74rC7            [12]  767 	mov	a,#___str_7
      000121 C0 E0            [24]  768 	push	acc
      000123 74s00            [12]  769 	mov	a,#(___str_7 >> 8)
      000125 C0 E0            [24]  770 	push	acc
      000127 12r00r00         [24]  771 	lcall	_printf_tiny
      00012A 15 81            [12]  772 	dec	sp
      00012C 15 81            [12]  773 	dec	sp
                                    774 ;	main.c:51: buffer_start_size=getnumber();
      00012E 12r0CrE7         [24]  775 	lcall	_getnumber
      000131 E5 82            [12]  776 	mov	a,dpl
      000133 85 83 F0         [24]  777 	mov	b,dph
      000136 90r10rD2         [24]  778 	mov	dptr,#_buffer_start_size
      000139 F0               [24]  779 	movx	@dptr,a
      00013A E5 F0            [12]  780 	mov	a,b
      00013C A3               [24]  781 	inc	dptr
      00013D F0               [24]  782 	movx	@dptr,a
                                    783 ;	main.c:52: while((buffer_start_size<2000) && (buffer_start_size>=32) && (buffer_start_size%16==0))      ////checking for valid buffer size
      00013E                        784 00108$:
      00013E 90r10rD2         [24]  785 	mov	dptr,#_buffer_start_size
      000141 E0               [24]  786 	movx	a,@dptr
      000142 FE               [12]  787 	mov	r6,a
      000143 A3               [24]  788 	inc	dptr
      000144 E0               [24]  789 	movx	a,@dptr
      000145 FF               [12]  790 	mov	r7,a
      000146 C3               [12]  791 	clr	c
      000147 EE               [12]  792 	mov	a,r6
      000148 94 D0            [12]  793 	subb	a,#0xd0
      00014A EF               [12]  794 	mov	a,r7
      00014B 94 07            [12]  795 	subb	a,#0x07
      00014D 40 03            [24]  796 	jc	00152$
      00014F 02r01rDC         [24]  797 	ljmp	00113$
      000152                        798 00152$:
      000152 C3               [12]  799 	clr	c
      000153 EE               [12]  800 	mov	a,r6
      000154 94 20            [12]  801 	subb	a,#0x20
      000156 EF               [12]  802 	mov	a,r7
      000157 94 00            [12]  803 	subb	a,#0x00
      000159 50 03            [24]  804 	jnc	00153$
      00015B 02r01rDC         [24]  805 	ljmp	00113$
      00015E                        806 00153$:
      00015E EE               [12]  807 	mov	a,r6
      00015F 54 0F            [12]  808 	anl	a,#0x0f
      000161 60 02            [24]  809 	jz	00155$
      000163 80 77            [24]  810 	sjmp	00113$
      000165                        811 00155$:
                                    812 ;	main.c:54: buffer[0]=(char*) malloc(buffer_start_size*sizeof(char));        //allocating space for the buffer_0 at the start and printing the address
      000165 8E 82            [24]  813 	mov	dpl,r6
      000167 8F 83            [24]  814 	mov	dph,r7
      000169 12r00r00         [24]  815 	lcall	_malloc
      00016C AE 82            [24]  816 	mov	r6,dpl
      00016E AF 83            [24]  817 	mov	r7,dph
      000170 7D 00            [12]  818 	mov	r5,#0x00
      000172 90r10rD5         [24]  819 	mov	dptr,#_buffer
      000175 EE               [12]  820 	mov	a,r6
      000176 F0               [24]  821 	movx	@dptr,a
      000177 EF               [12]  822 	mov	a,r7
      000178 A3               [24]  823 	inc	dptr
      000179 F0               [24]  824 	movx	@dptr,a
      00017A ED               [12]  825 	mov	a,r5
      00017B A3               [24]  826 	inc	dptr
      00017C F0               [24]  827 	movx	@dptr,a
                                    828 ;	main.c:55: printf("Address of buffer_0=%p\n\r",buffer[0]);
      00017D C0 06            [24]  829 	push	ar6
      00017F C0 07            [24]  830 	push	ar7
      000181 C0 05            [24]  831 	push	ar5
      000183 74r4C            [12]  832 	mov	a,#___str_3
      000185 C0 E0            [24]  833 	push	acc
      000187 74s00            [12]  834 	mov	a,#(___str_3 >> 8)
      000189 C0 E0            [24]  835 	push	acc
      00018B 74 80            [12]  836 	mov	a,#0x80
      00018D C0 E0            [24]  837 	push	acc
      00018F 12r00r00         [24]  838 	lcall	_printf
      000192 E5 81            [12]  839 	mov	a,sp
      000194 24 FA            [12]  840 	add	a,#0xfa
      000196 F5 81            [12]  841 	mov	sp,a
                                    842 ;	main.c:56: buffer[1]=(char*) malloc(buffer_start_size*sizeof(char));    //allocating space for the buffer_1 at the start and printing the address
      000198 90r10rD2         [24]  843 	mov	dptr,#_buffer_start_size
      00019B E0               [24]  844 	movx	a,@dptr
      00019C FE               [12]  845 	mov	r6,a
      00019D A3               [24]  846 	inc	dptr
      00019E E0               [24]  847 	movx	a,@dptr
      00019F FF               [12]  848 	mov	r7,a
      0001A0 8E 82            [24]  849 	mov	dpl,r6
      0001A2 8F 83            [24]  850 	mov	dph,r7
      0001A4 12r00r00         [24]  851 	lcall	_malloc
      0001A7 AE 82            [24]  852 	mov	r6,dpl
      0001A9 AF 83            [24]  853 	mov	r7,dph
      0001AB 7D 00            [12]  854 	mov	r5,#0x00
      0001AD 90r10rD8         [24]  855 	mov	dptr,#(_buffer + 0x0003)
      0001B0 EE               [12]  856 	mov	a,r6
      0001B1 F0               [24]  857 	movx	@dptr,a
      0001B2 EF               [12]  858 	mov	a,r7
      0001B3 A3               [24]  859 	inc	dptr
      0001B4 F0               [24]  860 	movx	@dptr,a
      0001B5 ED               [12]  861 	mov	a,r5
      0001B6 A3               [24]  862 	inc	dptr
      0001B7 F0               [24]  863 	movx	@dptr,a
                                    864 ;	main.c:57: printf("Address of buffer_1=%p\n\r",buffer[1]);
      0001B8 C0 06            [24]  865 	push	ar6
      0001BA C0 07            [24]  866 	push	ar7
      0001BC C0 05            [24]  867 	push	ar5
      0001BE 74r65            [12]  868 	mov	a,#___str_4
      0001C0 C0 E0            [24]  869 	push	acc
      0001C2 74s00            [12]  870 	mov	a,#(___str_4 >> 8)
      0001C4 C0 E0            [24]  871 	push	acc
      0001C6 74 80            [12]  872 	mov	a,#0x80
      0001C8 C0 E0            [24]  873 	push	acc
      0001CA 12r00r00         [24]  874 	lcall	_printf
      0001CD E5 81            [12]  875 	mov	a,sp
      0001CF 24 FA            [12]  876 	add	a,#0xfa
      0001D1 F5 81            [12]  877 	mov	sp,a
                                    878 ;	main.c:58: function();
      0001D3 12r01rE0         [24]  879 	lcall	_function
      0001D6 02r01r3E         [24]  880 	ljmp	00108$
      0001D9                        881 00112$:
                                    882 ;	main.c:63: function();
      0001D9 12r01rE0         [24]  883 	lcall	_function
      0001DC                        884 00113$:
                                    885 ;	main.c:65: return 0;
      0001DC 90 00 00         [24]  886 	mov	dptr,#0x0000
                                    887 ;	main.c:66: }
      0001DF 22               [24]  888 	ret
                                    889 ;------------------------------------------------------------
                                    890 ;Allocation info for local variables in function 'function'
                                    891 ;------------------------------------------------------------
                                    892 ;sloc0                     Allocated with name '_function_sloc0_1_0'
                                    893 ;sloc1                     Allocated with name '_function_sloc1_1_0'
                                    894 ;count_plus                Allocated with name '_function_count_plus_65536_48'
                                    895 ;count1                    Allocated with name '_function_count1_65536_48'
                                    896 ;count2                    Allocated with name '_function_count2_65536_48'
                                    897 ;buffer1                   Allocated with name '_function_buffer1_65536_48'
                                    898 ;buffer0                   Allocated with name '_function_buffer0_65536_48'
                                    899 ;temp                      Allocated with name '_function_temp_589824_78'
                                    900 ;------------------------------------------------------------
                                    901 ;	main.c:67: void function(void)
                                    902 ;	-----------------------------------------
                                    903 ;	 function function
                                    904 ;	-----------------------------------------
      0001E0                        905 _function:
                                    906 ;	main.c:69: uint16_t count_plus=1,count1=0,count2=0,buffer1=1,buffer0=0;
      0001E0 90r12r9F         [24]  907 	mov	dptr,#_function_count1_65536_48
      0001E3 E4               [12]  908 	clr	a
      0001E4 F0               [24]  909 	movx	@dptr,a
      0001E5 A3               [24]  910 	inc	dptr
      0001E6 F0               [24]  911 	movx	@dptr,a
      0001E7 90r12rA1         [24]  912 	mov	dptr,#_function_count2_65536_48
      0001EA F0               [24]  913 	movx	@dptr,a
      0001EB A3               [24]  914 	inc	dptr
      0001EC F0               [24]  915 	movx	@dptr,a
                                    916 ;	main.c:70: printf_tiny("\n\n\renter the characters\n\r");
      0001ED 74rE5            [12]  917 	mov	a,#___str_8
      0001EF C0 E0            [24]  918 	push	acc
      0001F1 74s00            [12]  919 	mov	a,#(___str_8 >> 8)
      0001F3 C0 E0            [24]  920 	push	acc
      0001F5 12r00r00         [24]  921 	lcall	_printf_tiny
      0001F8 15 81            [12]  922 	dec	sp
      0001FA 15 81            [12]  923 	dec	sp
                                    924 ;	main.c:71: while (1)
      0001FC 75*02 01         [24]  925 	mov	_function_sloc1_1_0,#0x01
      0001FF 75*03 00         [24]  926 	mov	(_function_sloc1_1_0 + 1),#0x00
      000202                        927 00147$:
                                    928 ;	main.c:73: c=getchar();                                            //taking the character input
      000202 12r0Dr40         [24]  929 	lcall	_getchar
      000205 AC 82            [24]  930 	mov	r4,dpl
      000207 90r10rD4         [24]  931 	mov	dptr,#_c
      00020A EC               [12]  932 	mov	a,r4
      00020B F0               [24]  933 	movx	@dptr,a
                                    934 ;	main.c:74: putchar(c);                                             //displaying it out in the terminal
      00020C 7D 00            [12]  935 	mov	r5,#0x00
      00020E 8C 82            [24]  936 	mov	dpl,r4
      000210 8D 83            [24]  937 	mov	dph,r5
      000212 12r0Dr23         [24]  938 	lcall	_putchar
                                    939 ;	main.c:75: printf_tiny("\n\r");
      000215 74rFF            [12]  940 	mov	a,#___str_9
      000217 C0 E0            [24]  941 	push	acc
      000219 74s00            [12]  942 	mov	a,#(___str_9 >> 8)
      00021B C0 E0            [24]  943 	push	acc
      00021D 12r00r00         [24]  944 	lcall	_printf_tiny
      000220 15 81            [12]  945 	dec	sp
      000222 15 81            [12]  946 	dec	sp
                                    947 ;	main.c:77: if(c!='\n' && c!='\r')                                  // ignoring enter on terminal as character
      000224 90r10rD4         [24]  948 	mov	dptr,#_c
      000227 E0               [24]  949 	movx	a,@dptr
      000228 FD               [12]  950 	mov	r5,a
      000229 BD 0A 02         [24]  951 	cjne	r5,#0x0a,00288$
      00022C 80 D4            [24]  952 	sjmp	00147$
      00022E                        953 00288$:
      00022E BD 0D 02         [24]  954 	cjne	r5,#0x0d,00289$
      000231 80 CF            [24]  955 	sjmp	00147$
      000233                        956 00289$:
                                    957 ;	main.c:79: count1++;                                           //count the number of characters
      000233 90r12r9F         [24]  958 	mov	dptr,#_function_count1_65536_48
      000236 E0               [24]  959 	movx	a,@dptr
      000237 24 01            [12]  960 	add	a,#0x01
      000239 F0               [24]  961 	movx	@dptr,a
      00023A A3               [24]  962 	inc	dptr
      00023B E0               [24]  963 	movx	a,@dptr
      00023C 34 00            [12]  964 	addc	a,#0x00
      00023E F0               [24]  965 	movx	@dptr,a
                                    966 ;	main.c:80: ascii=c;
      00023F 8D 04            [24]  967 	mov	ar4,r5
      000241 7D 00            [12]  968 	mov	r5,#0x00
      000243 90r10rCE         [24]  969 	mov	dptr,#_ascii
      000246 EC               [12]  970 	mov	a,r4
      000247 F0               [24]  971 	movx	@dptr,a
      000248 ED               [12]  972 	mov	a,r5
      000249 A3               [24]  973 	inc	dptr
      00024A F0               [24]  974 	movx	@dptr,a
                                    975 ;	main.c:81: if(ascii!=10)                                       //ignoring enter command
      00024B BC 0A 05         [24]  976 	cjne	r4,#0x0a,00290$
      00024E BD 00 02         [24]  977 	cjne	r5,#0x00,00290$
      000251 80 AF            [24]  978 	sjmp	00147$
      000253                        979 00290$:
                                    980 ;	main.c:85: if (97<=ascii && ascii<=122)                    //if the character is lower case, store it in buffer_0
      000253 C3               [12]  981 	clr	c
      000254 EC               [12]  982 	mov	a,r4
      000255 94 61            [12]  983 	subb	a,#0x61
      000257 ED               [12]  984 	mov	a,r5
      000258 94 00            [12]  985 	subb	a,#0x00
      00025A 50 03            [24]  986 	jnc	00291$
      00025C 02r02rE3         [24]  987 	ljmp	00138$
      00025F                        988 00291$:
      00025F C3               [12]  989 	clr	c
      000260 74 7A            [12]  990 	mov	a,#0x7a
      000262 9C               [12]  991 	subb	a,r4
      000263 E4               [12]  992 	clr	a
      000264 9D               [12]  993 	subb	a,r5
      000265 40 7C            [24]  994 	jc	00138$
                                    995 ;	main.c:87: printf_tiny("\n\rascii value=%d\n\r",ascii);
      000267 C0 04            [24]  996 	push	ar4
      000269 C0 05            [24]  997 	push	ar5
      00026B 74r02            [12]  998 	mov	a,#___str_10
      00026D C0 E0            [24]  999 	push	acc
      00026F 74s01            [12] 1000 	mov	a,#(___str_10 >> 8)
      000271 C0 E0            [24] 1001 	push	acc
      000273 12r00r00         [24] 1002 	lcall	_printf_tiny
      000276 E5 81            [12] 1003 	mov	a,sp
      000278 24 FC            [12] 1004 	add	a,#0xfc
      00027A F5 81            [12] 1005 	mov	sp,a
                                   1006 ;	main.c:88: count2++;                                   //count to indicate number of lower case digits entered
      00027C 90r12rA1         [24] 1007 	mov	dptr,#_function_count2_65536_48
      00027F E0               [24] 1008 	movx	a,@dptr
      000280 24 01            [12] 1009 	add	a,#0x01
      000282 F0               [24] 1010 	movx	@dptr,a
      000283 A3               [24] 1011 	inc	dptr
      000284 E0               [24] 1012 	movx	a,@dptr
      000285 34 00            [12] 1013 	addc	a,#0x00
      000287 F0               [24] 1014 	movx	@dptr,a
                                   1015 ;	main.c:89: if (count2>buffer_start_size)
      000288 90r12rA1         [24] 1016 	mov	dptr,#_function_count2_65536_48
      00028B E0               [24] 1017 	movx	a,@dptr
      00028C FC               [12] 1018 	mov	r4,a
      00028D A3               [24] 1019 	inc	dptr
      00028E E0               [24] 1020 	movx	a,@dptr
      00028F FD               [12] 1021 	mov	r5,a
      000290 90r10rD2         [24] 1022 	mov	dptr,#_buffer_start_size
      000293 E0               [24] 1023 	movx	a,@dptr
      000294 FA               [12] 1024 	mov	r2,a
      000295 A3               [24] 1025 	inc	dptr
      000296 E0               [24] 1026 	movx	a,@dptr
      000297 FB               [12] 1027 	mov	r3,a
      000298 C3               [12] 1028 	clr	c
      000299 EA               [12] 1029 	mov	a,r2
      00029A 9C               [12] 1030 	subb	a,r4
      00029B EB               [12] 1031 	mov	a,r3
      00029C 9D               [12] 1032 	subb	a,r5
      00029D 50 1D            [24] 1033 	jnc	00102$
                                   1034 ;	main.c:90: printf("Buffer is full\n\r");
      00029F C0 05            [24] 1035 	push	ar5
      0002A1 C0 04            [24] 1036 	push	ar4
      0002A3 74r15            [12] 1037 	mov	a,#___str_11
      0002A5 C0 E0            [24] 1038 	push	acc
      0002A7 74s01            [12] 1039 	mov	a,#(___str_11 >> 8)
      0002A9 C0 E0            [24] 1040 	push	acc
      0002AB 74 80            [12] 1041 	mov	a,#0x80
      0002AD C0 E0            [24] 1042 	push	acc
      0002AF 12r00r00         [24] 1043 	lcall	_printf
      0002B2 15 81            [12] 1044 	dec	sp
      0002B4 15 81            [12] 1045 	dec	sp
      0002B6 15 81            [12] 1046 	dec	sp
      0002B8 D0 04            [24] 1047 	pop	ar4
      0002BA D0 05            [24] 1048 	pop	ar5
      0002BC                       1049 00102$:
                                   1050 ;	main.c:91: buffer[0][count2-1]=c;                      //store the lower case characters in buffer_0
      0002BC 90r10rD5         [24] 1051 	mov	dptr,#_buffer
      0002BF E0               [24] 1052 	movx	a,@dptr
      0002C0 F9               [12] 1053 	mov	r1,a
      0002C1 A3               [24] 1054 	inc	dptr
      0002C2 E0               [24] 1055 	movx	a,@dptr
      0002C3 FA               [12] 1056 	mov	r2,a
      0002C4 A3               [24] 1057 	inc	dptr
      0002C5 E0               [24] 1058 	movx	a,@dptr
      0002C6 FB               [12] 1059 	mov	r3,a
      0002C7 1C               [12] 1060 	dec	r4
      0002C8 BC FF 01         [24] 1061 	cjne	r4,#0xff,00294$
      0002CB 1D               [12] 1062 	dec	r5
      0002CC                       1063 00294$:
      0002CC EC               [12] 1064 	mov	a,r4
      0002CD 29               [12] 1065 	add	a,r1
      0002CE F9               [12] 1066 	mov	r1,a
      0002CF ED               [12] 1067 	mov	a,r5
      0002D0 3A               [12] 1068 	addc	a,r2
      0002D1 FA               [12] 1069 	mov	r2,a
      0002D2 90r10rD4         [24] 1070 	mov	dptr,#_c
      0002D5 E0               [24] 1071 	movx	a,@dptr
      0002D6 FD               [12] 1072 	mov	r5,a
      0002D7 89 82            [24] 1073 	mov	dpl,r1
      0002D9 8A 83            [24] 1074 	mov	dph,r2
      0002DB 8B F0            [24] 1075 	mov	b,r3
      0002DD 12r00r00         [24] 1076 	lcall	__gptrput
      0002E0 02r02r02         [24] 1077 	ljmp	00147$
      0002E3                       1078 00138$:
                                   1079 ;	main.c:97: switch(c)
      0002E3 90r10rD4         [24] 1080 	mov	dptr,#_c
      0002E6 E0               [24] 1081 	movx	a,@dptr
      0002E7 FD               [12] 1082 	mov	r5,a
      0002E8 BD 2B 02         [24] 1083 	cjne	r5,#0x2b,00295$
      0002EB 80 1B            [24] 1084 	sjmp	00103$
      0002ED                       1085 00295$:
      0002ED BD 2D 03         [24] 1086 	cjne	r5,#0x2d,00296$
      0002F0 02r04r7F         [24] 1087 	ljmp	00110$
      0002F3                       1088 00296$:
      0002F3 BD 3D 03         [24] 1089 	cjne	r5,#0x3d,00297$
      0002F6 02r05r4A         [24] 1090 	ljmp	00117$
      0002F9                       1091 00297$:
      0002F9 BD 3F 03         [24] 1092 	cjne	r5,#0x3f,00298$
      0002FC 02r07r2E         [24] 1093 	ljmp	00123$
      0002FF                       1094 00298$:
      0002FF BD 40 03         [24] 1095 	cjne	r5,#0x40,00299$
      000302 02r06r26         [24] 1096 	ljmp	00121$
      000305                       1097 00299$:
      000305 02r0CrD5         [24] 1098 	ljmp	00135$
                                   1099 ;	main.c:99: case('+'):                          //if new buffer requested, increase the count
      000308                       1100 00103$:
                                   1101 ;	main.c:101: count_plus++;
      000308 05*02            [12] 1102 	inc	_function_sloc1_1_0
      00030A E4               [12] 1103 	clr	a
      00030B B5*02 02         [24] 1104 	cjne	a,_function_sloc1_1_0,00300$
      00030E 05*03            [12] 1105 	inc	(_function_sloc1_1_0 + 1)
      000310                       1106 00300$:
                                   1107 ;	main.c:102: printf_tiny("add buffer_%d",count_plus);
      000310 C0*02            [24] 1108 	push	_function_sloc1_1_0
      000312 C0*03            [24] 1109 	push	(_function_sloc1_1_0 + 1)
      000314 74r26            [12] 1110 	mov	a,#___str_12
      000316 C0 E0            [24] 1111 	push	acc
      000318 74s01            [12] 1112 	mov	a,#(___str_12 >> 8)
      00031A C0 E0            [24] 1113 	push	acc
      00031C 12r00r00         [24] 1114 	lcall	_printf_tiny
      00031F E5 81            [12] 1115 	mov	a,sp
      000321 24 FC            [12] 1116 	add	a,#0xfc
      000323 F5 81            [12] 1117 	mov	sp,a
                                   1118 ;	main.c:103: printf_tiny("\n\rbuffer_size=");
      000325 74r34            [12] 1119 	mov	a,#___str_13
      000327 C0 E0            [24] 1120 	push	acc
      000329 74s01            [12] 1121 	mov	a,#(___str_13 >> 8)
      00032B C0 E0            [24] 1122 	push	acc
      00032D 12r00r00         [24] 1123 	lcall	_printf_tiny
      000330 15 81            [12] 1124 	dec	sp
      000332 15 81            [12] 1125 	dec	sp
                                   1126 ;	main.c:104: buffer_size[count_plus]=getnumber();   //take the valid buffer size of the new buffer
      000334 E5*02            [12] 1127 	mov	a,_function_sloc1_1_0
      000336 25*02            [12] 1128 	add	a,_function_sloc1_1_0
      000338 FC               [12] 1129 	mov	r4,a
      000339 E5*03            [12] 1130 	mov	a,(_function_sloc1_1_0 + 1)
      00033B 33               [12] 1131 	rlc	a
      00033C FD               [12] 1132 	mov	r5,a
      00033D EC               [12] 1133 	mov	a,r4
      00033E 24rA2            [12] 1134 	add	a,#_buffer_size
      000340 FA               [12] 1135 	mov	r2,a
      000341 ED               [12] 1136 	mov	a,r5
      000342 34s0F            [12] 1137 	addc	a,#(_buffer_size >> 8)
      000344 FB               [12] 1138 	mov	r3,a
      000345 C0 05            [24] 1139 	push	ar5
      000347 C0 04            [24] 1140 	push	ar4
      000349 C0 03            [24] 1141 	push	ar3
      00034B C0 02            [24] 1142 	push	ar2
      00034D 12r0CrE7         [24] 1143 	lcall	_getnumber
      000350 A8 82            [24] 1144 	mov	r0,dpl
      000352 A9 83            [24] 1145 	mov	r1,dph
      000354 D0 02            [24] 1146 	pop	ar2
      000356 D0 03            [24] 1147 	pop	ar3
      000358 D0 04            [24] 1148 	pop	ar4
      00035A D0 05            [24] 1149 	pop	ar5
      00035C 8A 82            [24] 1150 	mov	dpl,r2
      00035E 8B 83            [24] 1151 	mov	dph,r3
      000360 E8               [12] 1152 	mov	a,r0
      000361 F0               [24] 1153 	movx	@dptr,a
      000362 E9               [12] 1154 	mov	a,r1
      000363 A3               [24] 1155 	inc	dptr
      000364 F0               [24] 1156 	movx	@dptr,a
                                   1157 ;	main.c:105: while (!((buffer_size[count_plus] <= 300) && (buffer_size[count_plus] >= 30)))
      000365 A8*02            [24] 1158 	mov	r0,_function_sloc1_1_0
      000367 A9*03            [24] 1159 	mov	r1,(_function_sloc1_1_0 + 1)
      000369                       1160 00105$:
      000369 8A 82            [24] 1161 	mov	dpl,r2
      00036B 8B 83            [24] 1162 	mov	dph,r3
      00036D E0               [24] 1163 	movx	a,@dptr
      00036E F5*00            [12] 1164 	mov	_function_sloc0_1_0,a
      000370 A3               [24] 1165 	inc	dptr
      000371 E0               [24] 1166 	movx	a,@dptr
      000372 F5*01            [12] 1167 	mov	(_function_sloc0_1_0 + 1),a
      000374 C3               [12] 1168 	clr	c
      000375 74 2C            [12] 1169 	mov	a,#0x2c
      000377 95*00            [12] 1170 	subb	a,_function_sloc0_1_0
      000379 74 01            [12] 1171 	mov	a,#0x01
      00037B 95*01            [12] 1172 	subb	a,(_function_sloc0_1_0 + 1)
      00037D 40 0A            [24] 1173 	jc	00106$
      00037F E5*00            [12] 1174 	mov	a,_function_sloc0_1_0
      000381 94 1E            [12] 1175 	subb	a,#0x1e
      000383 E5*01            [12] 1176 	mov	a,(_function_sloc0_1_0 + 1)
      000385 94 00            [12] 1177 	subb	a,#0x00
      000387 50 71            [24] 1178 	jnc	00107$
      000389                       1179 00106$:
                                   1180 ;	main.c:107: printf_tiny("\n\rinvalid size");
      000389 C0 00            [24] 1181 	push	ar0
      00038B C0 01            [24] 1182 	push	ar1
      00038D C0 05            [24] 1183 	push	ar5
      00038F C0 04            [24] 1184 	push	ar4
      000391 C0 03            [24] 1185 	push	ar3
      000393 C0 02            [24] 1186 	push	ar2
      000395 C0 01            [24] 1187 	push	ar1
      000397 C0 00            [24] 1188 	push	ar0
      000399 74r43            [12] 1189 	mov	a,#___str_14
      00039B C0 E0            [24] 1190 	push	acc
      00039D 74s01            [12] 1191 	mov	a,#(___str_14 >> 8)
      00039F C0 E0            [24] 1192 	push	acc
      0003A1 12r00r00         [24] 1193 	lcall	_printf_tiny
      0003A4 15 81            [12] 1194 	dec	sp
      0003A6 15 81            [12] 1195 	dec	sp
                                   1196 ;	main.c:108: printf_tiny("\n\rvalid buffer_size=");
      0003A8 74r52            [12] 1197 	mov	a,#___str_15
      0003AA C0 E0            [24] 1198 	push	acc
      0003AC 74s01            [12] 1199 	mov	a,#(___str_15 >> 8)
      0003AE C0 E0            [24] 1200 	push	acc
      0003B0 12r00r00         [24] 1201 	lcall	_printf_tiny
      0003B3 15 81            [12] 1202 	dec	sp
      0003B5 15 81            [12] 1203 	dec	sp
      0003B7 D0 00            [24] 1204 	pop	ar0
      0003B9 D0 01            [24] 1205 	pop	ar1
      0003BB D0 02            [24] 1206 	pop	ar2
      0003BD D0 03            [24] 1207 	pop	ar3
      0003BF D0 04            [24] 1208 	pop	ar4
      0003C1 D0 05            [24] 1209 	pop	ar5
                                   1210 ;	main.c:109: buffer_size[count_plus]=getnumber();    //if buffer size is invalid, take input again
      0003C3 EC               [12] 1211 	mov	a,r4
      0003C4 24rA2            [12] 1212 	add	a,#_buffer_size
      0003C6 F8               [12] 1213 	mov	r0,a
      0003C7 ED               [12] 1214 	mov	a,r5
      0003C8 34s0F            [12] 1215 	addc	a,#(_buffer_size >> 8)
      0003CA F9               [12] 1216 	mov	r1,a
      0003CB C0 05            [24] 1217 	push	ar5
      0003CD C0 04            [24] 1218 	push	ar4
      0003CF C0 03            [24] 1219 	push	ar3
      0003D1 C0 02            [24] 1220 	push	ar2
      0003D3 C0 01            [24] 1221 	push	ar1
      0003D5 C0 00            [24] 1222 	push	ar0
      0003D7 12r0CrE7         [24] 1223 	lcall	_getnumber
      0003DA AE 82            [24] 1224 	mov	r6,dpl
      0003DC AF 83            [24] 1225 	mov	r7,dph
      0003DE D0 00            [24] 1226 	pop	ar0
      0003E0 D0 01            [24] 1227 	pop	ar1
      0003E2 D0 02            [24] 1228 	pop	ar2
      0003E4 D0 03            [24] 1229 	pop	ar3
      0003E6 D0 04            [24] 1230 	pop	ar4
      0003E8 D0 05            [24] 1231 	pop	ar5
      0003EA 88 82            [24] 1232 	mov	dpl,r0
      0003EC 89 83            [24] 1233 	mov	dph,r1
      0003EE EE               [12] 1234 	mov	a,r6
      0003EF F0               [24] 1235 	movx	@dptr,a
      0003F0 EF               [12] 1236 	mov	a,r7
      0003F1 A3               [24] 1237 	inc	dptr
      0003F2 F0               [24] 1238 	movx	@dptr,a
      0003F3 D0 01            [24] 1239 	pop	ar1
      0003F5 D0 00            [24] 1240 	pop	ar0
      0003F7 02r03r69         [24] 1241 	ljmp	00105$
      0003FA                       1242 00107$:
                                   1243 ;	main.c:112: buffer[count_plus]=(char*) malloc(buffer_size[count_plus]*sizeof(char));  //assign a malloc to the new buffer
      0003FA 90r00r00         [24] 1244 	mov	dptr,#__mulint_PARM_2
      0003FD E8               [12] 1245 	mov	a,r0
      0003FE F0               [24] 1246 	movx	@dptr,a
      0003FF E9               [12] 1247 	mov	a,r1
      000400 A3               [24] 1248 	inc	dptr
      000401 F0               [24] 1249 	movx	@dptr,a
      000402 90 00 03         [24] 1250 	mov	dptr,#0x0003
      000405 12r00r00         [24] 1251 	lcall	__mulint
      000408 AE 82            [24] 1252 	mov	r6,dpl
      00040A AF 83            [24] 1253 	mov	r7,dph
      00040C EE               [12] 1254 	mov	a,r6
      00040D 24rD5            [12] 1255 	add	a,#_buffer
      00040F FE               [12] 1256 	mov	r6,a
      000410 EF               [12] 1257 	mov	a,r7
      000411 34s10            [12] 1258 	addc	a,#(_buffer >> 8)
      000413 FF               [12] 1259 	mov	r7,a
      000414 85*00 82         [24] 1260 	mov	dpl,_function_sloc0_1_0
      000417 85*01 83         [24] 1261 	mov	dph,(_function_sloc0_1_0 + 1)
      00041A C0 07            [24] 1262 	push	ar7
      00041C C0 06            [24] 1263 	push	ar6
      00041E 12r00r00         [24] 1264 	lcall	_malloc
      000421 AC 82            [24] 1265 	mov	r4,dpl
      000423 AD 83            [24] 1266 	mov	r5,dph
      000425 D0 06            [24] 1267 	pop	ar6
      000427 D0 07            [24] 1268 	pop	ar7
      000429 7B 00            [12] 1269 	mov	r3,#0x00
      00042B 8E 82            [24] 1270 	mov	dpl,r6
      00042D 8F 83            [24] 1271 	mov	dph,r7
      00042F EC               [12] 1272 	mov	a,r4
      000430 F0               [24] 1273 	movx	@dptr,a
      000431 ED               [12] 1274 	mov	a,r5
      000432 A3               [24] 1275 	inc	dptr
      000433 F0               [24] 1276 	movx	@dptr,a
      000434 EB               [12] 1277 	mov	a,r3
      000435 A3               [24] 1278 	inc	dptr
      000436 F0               [24] 1279 	movx	@dptr,a
                                   1280 ;	main.c:113: printf("\n\raddress of new buffer is=%p\n\r",buffer[count_plus]);
      000437 C0 07            [24] 1281 	push	ar7
      000439 C0 06            [24] 1282 	push	ar6
      00043B C0 04            [24] 1283 	push	ar4
      00043D C0 05            [24] 1284 	push	ar5
      00043F C0 03            [24] 1285 	push	ar3
      000441 74r67            [12] 1286 	mov	a,#___str_16
      000443 C0 E0            [24] 1287 	push	acc
      000445 74s01            [12] 1288 	mov	a,#(___str_16 >> 8)
      000447 C0 E0            [24] 1289 	push	acc
      000449 74 80            [12] 1290 	mov	a,#0x80
      00044B C0 E0            [24] 1291 	push	acc
      00044D 12r00r00         [24] 1292 	lcall	_printf
      000450 E5 81            [12] 1293 	mov	a,sp
      000452 24 FA            [12] 1294 	add	a,#0xfa
      000454 F5 81            [12] 1295 	mov	sp,a
      000456 D0 06            [24] 1296 	pop	ar6
      000458 D0 07            [24] 1297 	pop	ar7
                                   1298 ;	main.c:114: if (buffer[count_plus]==NULL)                                             //if heap size is full, print no space
      00045A 8E 82            [24] 1299 	mov	dpl,r6
      00045C 8F 83            [24] 1300 	mov	dph,r7
      00045E E0               [24] 1301 	movx	a,@dptr
      00045F FE               [12] 1302 	mov	r6,a
      000460 A3               [24] 1303 	inc	dptr
      000461 E0               [24] 1304 	movx	a,@dptr
      000462 FF               [12] 1305 	mov	r7,a
      000463 A3               [24] 1306 	inc	dptr
      000464 E0               [24] 1307 	movx	a,@dptr
      000465 FD               [12] 1308 	mov	r5,a
      000466 EE               [12] 1309 	mov	a,r6
      000467 4F               [12] 1310 	orl	a,r7
      000468 60 03            [24] 1311 	jz	00303$
      00046A 02r02r02         [24] 1312 	ljmp	00147$
      00046D                       1313 00303$:
                                   1314 ;	main.c:115: printf_tiny("\n\rNo space for addition of more buffers to the heap\n\r");
      00046D 74r87            [12] 1315 	mov	a,#___str_17
      00046F C0 E0            [24] 1316 	push	acc
      000471 74s01            [12] 1317 	mov	a,#(___str_17 >> 8)
      000473 C0 E0            [24] 1318 	push	acc
      000475 12r00r00         [24] 1319 	lcall	_printf_tiny
      000478 15 81            [12] 1320 	dec	sp
      00047A 15 81            [12] 1321 	dec	sp
                                   1322 ;	main.c:117: break;
      00047C 02r02r02         [24] 1323 	ljmp	00147$
                                   1324 ;	main.c:119: case('-'):
      00047F                       1325 00110$:
                                   1326 ;	main.c:121: printf_tiny("\n\rselect a valid buffer= ");
      00047F 74rBD            [12] 1327 	mov	a,#___str_18
      000481 C0 E0            [24] 1328 	push	acc
      000483 74s01            [12] 1329 	mov	a,#(___str_18 >> 8)
      000485 C0 E0            [24] 1330 	push	acc
      000487 12r00r00         [24] 1331 	lcall	_printf_tiny
      00048A 15 81            [12] 1332 	dec	sp
      00048C 15 81            [12] 1333 	dec	sp
                                   1334 ;	main.c:122: buffer_num=getnumber();                         //input for the buffer number to be deleted
      00048E 12r0CrE7         [24] 1335 	lcall	_getnumber
      000491 AE 82            [24] 1336 	mov	r6,dpl
      000493 AF 83            [24] 1337 	mov	r7,dph
      000495 90r10rD0         [24] 1338 	mov	dptr,#_buffer_num
      000498 EE               [12] 1339 	mov	a,r6
      000499 F0               [24] 1340 	movx	@dptr,a
      00049A EF               [12] 1341 	mov	a,r7
      00049B A3               [24] 1342 	inc	dptr
      00049C F0               [24] 1343 	movx	@dptr,a
                                   1344 ;	main.c:123: if (buffer_num!=0)                              //buffer_0 is not to be deleted so ignore that
      00049D EE               [12] 1345 	mov	a,r6
      00049E 4F               [12] 1346 	orl	a,r7
      00049F 70 03            [24] 1347 	jnz	00304$
      0004A1 02r05r38         [24] 1348 	ljmp	00115$
      0004A4                       1349 00304$:
                                   1350 ;	main.c:125: if (buffer_num>count_plus)                  //invalid buffer number which does not exist
      0004A4 8E 04            [24] 1351 	mov	ar4,r6
      0004A6 8F 05            [24] 1352 	mov	ar5,r7
      0004A8 C3               [12] 1353 	clr	c
      0004A9 E5*02            [12] 1354 	mov	a,_function_sloc1_1_0
      0004AB 9C               [12] 1355 	subb	a,r4
      0004AC E5*03            [12] 1356 	mov	a,(_function_sloc1_1_0 + 1)
      0004AE 9D               [12] 1357 	subb	a,r5
      0004AF 50 12            [24] 1358 	jnc	00112$
                                   1359 ;	main.c:127: printf_tiny("\n\rBuffer does not exist\n\r");
      0004B1 74rD7            [12] 1360 	mov	a,#___str_19
      0004B3 C0 E0            [24] 1361 	push	acc
      0004B5 74s01            [12] 1362 	mov	a,#(___str_19 >> 8)
      0004B7 C0 E0            [24] 1363 	push	acc
      0004B9 12r00r00         [24] 1364 	lcall	_printf_tiny
      0004BC 15 81            [12] 1365 	dec	sp
      0004BE 15 81            [12] 1366 	dec	sp
      0004C0 02r02r02         [24] 1367 	ljmp	00147$
      0004C3                       1368 00112$:
                                   1369 ;	main.c:131: free(buffer[buffer_num]);         //free buffer which was selected
      0004C3 90r00r00         [24] 1370 	mov	dptr,#__mulint_PARM_2
      0004C6 EE               [12] 1371 	mov	a,r6
      0004C7 F0               [24] 1372 	movx	@dptr,a
      0004C8 EF               [12] 1373 	mov	a,r7
      0004C9 A3               [24] 1374 	inc	dptr
      0004CA F0               [24] 1375 	movx	@dptr,a
      0004CB 90 00 03         [24] 1376 	mov	dptr,#0x0003
      0004CE 12r00r00         [24] 1377 	lcall	__mulint
      0004D1 AE 82            [24] 1378 	mov	r6,dpl
      0004D3 AF 83            [24] 1379 	mov	r7,dph
      0004D5 EE               [12] 1380 	mov	a,r6
      0004D6 24rD5            [12] 1381 	add	a,#_buffer
      0004D8 F5 82            [12] 1382 	mov	dpl,a
      0004DA EF               [12] 1383 	mov	a,r7
      0004DB 34s10            [12] 1384 	addc	a,#(_buffer >> 8)
      0004DD F5 83            [12] 1385 	mov	dph,a
      0004DF E0               [24] 1386 	movx	a,@dptr
      0004E0 FD               [12] 1387 	mov	r5,a
      0004E1 A3               [24] 1388 	inc	dptr
      0004E2 E0               [24] 1389 	movx	a,@dptr
      0004E3 FE               [12] 1390 	mov	r6,a
      0004E4 A3               [24] 1391 	inc	dptr
      0004E5 E0               [24] 1392 	movx	a,@dptr
      0004E6 FF               [12] 1393 	mov	r7,a
      0004E7 8D 82            [24] 1394 	mov	dpl,r5
      0004E9 8E 83            [24] 1395 	mov	dph,r6
      0004EB 8F F0            [24] 1396 	mov	b,r7
      0004ED 12r00r00         [24] 1397 	lcall	_free
                                   1398 ;	main.c:132: buffer[buffer_num]=NULL;
      0004F0 90r10rD0         [24] 1399 	mov	dptr,#_buffer_num
      0004F3 E0               [24] 1400 	movx	a,@dptr
      0004F4 FE               [12] 1401 	mov	r6,a
      0004F5 A3               [24] 1402 	inc	dptr
      0004F6 E0               [24] 1403 	movx	a,@dptr
      0004F7 FF               [12] 1404 	mov	r7,a
      0004F8 90r00r00         [24] 1405 	mov	dptr,#__mulint_PARM_2
      0004FB EE               [12] 1406 	mov	a,r6
      0004FC F0               [24] 1407 	movx	@dptr,a
      0004FD EF               [12] 1408 	mov	a,r7
      0004FE A3               [24] 1409 	inc	dptr
      0004FF F0               [24] 1410 	movx	@dptr,a
      000500 90 00 03         [24] 1411 	mov	dptr,#0x0003
      000503 12r00r00         [24] 1412 	lcall	__mulint
      000506 AE 82            [24] 1413 	mov	r6,dpl
      000508 AF 83            [24] 1414 	mov	r7,dph
      00050A EE               [12] 1415 	mov	a,r6
      00050B 24rD5            [12] 1416 	add	a,#_buffer
      00050D F5 82            [12] 1417 	mov	dpl,a
      00050F EF               [12] 1418 	mov	a,r7
      000510 34s10            [12] 1419 	addc	a,#(_buffer >> 8)
      000512 F5 83            [12] 1420 	mov	dph,a
      000514 E4               [12] 1421 	clr	a
      000515 F0               [24] 1422 	movx	@dptr,a
      000516 A3               [24] 1423 	inc	dptr
      000517 F0               [24] 1424 	movx	@dptr,a
      000518 A3               [24] 1425 	inc	dptr
      000519 F0               [24] 1426 	movx	@dptr,a
                                   1427 ;	main.c:133: printf_tiny("\n\rbuffer%d freed\n\r",buffer_num);
      00051A 90r10rD0         [24] 1428 	mov	dptr,#_buffer_num
      00051D E0               [24] 1429 	movx	a,@dptr
      00051E C0 E0            [24] 1430 	push	acc
      000520 A3               [24] 1431 	inc	dptr
      000521 E0               [24] 1432 	movx	a,@dptr
      000522 C0 E0            [24] 1433 	push	acc
      000524 74rF1            [12] 1434 	mov	a,#___str_20
      000526 C0 E0            [24] 1435 	push	acc
      000528 74s01            [12] 1436 	mov	a,#(___str_20 >> 8)
      00052A C0 E0            [24] 1437 	push	acc
      00052C 12r00r00         [24] 1438 	lcall	_printf_tiny
      00052F E5 81            [12] 1439 	mov	a,sp
      000531 24 FC            [12] 1440 	add	a,#0xfc
      000533 F5 81            [12] 1441 	mov	sp,a
      000535 02r02r02         [24] 1442 	ljmp	00147$
      000538                       1443 00115$:
                                   1444 ;	main.c:137: printf_tiny("Buffer_0 cannot be deleted");    // print buffer_0 cannot be deleted
      000538 74r04            [12] 1445 	mov	a,#___str_21
      00053A C0 E0            [24] 1446 	push	acc
      00053C 74s02            [12] 1447 	mov	a,#(___str_21 >> 8)
      00053E C0 E0            [24] 1448 	push	acc
      000540 12r00r00         [24] 1449 	lcall	_printf_tiny
      000543 15 81            [12] 1450 	dec	sp
      000545 15 81            [12] 1451 	dec	sp
                                   1452 ;	main.c:138: break;
      000547 02r02r02         [24] 1453 	ljmp	00147$
                                   1454 ;	main.c:140: case('='):                                        //print address of buffer_0
      00054A                       1455 00117$:
                                   1456 ;	main.c:143: for (i=0; i<=count2; i++)
      00054A 90r0FrA0         [24] 1457 	mov	dptr,#_i
      00054D E4               [12] 1458 	clr	a
      00054E F0               [24] 1459 	movx	@dptr,a
      00054F A3               [24] 1460 	inc	dptr
      000550 F0               [24] 1461 	movx	@dptr,a
      000551 90r12rA1         [24] 1462 	mov	dptr,#_function_count2_65536_48
      000554 E0               [24] 1463 	movx	a,@dptr
      000555 FE               [12] 1464 	mov	r6,a
      000556 A3               [24] 1465 	inc	dptr
      000557 E0               [24] 1466 	movx	a,@dptr
      000558 FF               [12] 1467 	mov	r7,a
      000559                       1468 00149$:
                                   1469 ;	main.c:145: if (i%16==0)                      //display contents of buffer_0 in the desired format
      000559 90r0FrA0         [24] 1470 	mov	dptr,#_i
      00055C E0               [24] 1471 	movx	a,@dptr
      00055D FC               [12] 1472 	mov	r4,a
      00055E A3               [24] 1473 	inc	dptr
      00055F E0               [24] 1474 	movx	a,@dptr
      000560 EC               [12] 1475 	mov	a,r4
      000561 54 0F            [12] 1476 	anl	a,#0x0f
      000563 70 4B            [24] 1477 	jnz	00119$
                                   1478 ;	main.c:147: printf_tiny("\n\r");
      000565 C0 07            [24] 1479 	push	ar7
      000567 C0 06            [24] 1480 	push	ar6
      000569 74rFF            [12] 1481 	mov	a,#___str_9
      00056B C0 E0            [24] 1482 	push	acc
      00056D 74s00            [12] 1483 	mov	a,#(___str_9 >> 8)
      00056F C0 E0            [24] 1484 	push	acc
      000571 12r00r00         [24] 1485 	lcall	_printf_tiny
      000574 15 81            [12] 1486 	dec	sp
      000576 15 81            [12] 1487 	dec	sp
                                   1488 ;	main.c:148: printf("%p",&buffer[0][i]);
      000578 90r10rD5         [24] 1489 	mov	dptr,#_buffer
      00057B E0               [24] 1490 	movx	a,@dptr
      00057C FB               [12] 1491 	mov	r3,a
      00057D A3               [24] 1492 	inc	dptr
      00057E E0               [24] 1493 	movx	a,@dptr
      00057F FC               [12] 1494 	mov	r4,a
      000580 A3               [24] 1495 	inc	dptr
      000581 E0               [24] 1496 	movx	a,@dptr
      000582 FD               [12] 1497 	mov	r5,a
      000583 90r0FrA0         [24] 1498 	mov	dptr,#_i
      000586 E0               [24] 1499 	movx	a,@dptr
      000587 F9               [12] 1500 	mov	r1,a
      000588 A3               [24] 1501 	inc	dptr
      000589 E0               [24] 1502 	movx	a,@dptr
      00058A FA               [12] 1503 	mov	r2,a
      00058B E9               [12] 1504 	mov	a,r1
      00058C 2B               [12] 1505 	add	a,r3
      00058D FB               [12] 1506 	mov	r3,a
      00058E EA               [12] 1507 	mov	a,r2
      00058F 3C               [12] 1508 	addc	a,r4
      000590 FC               [12] 1509 	mov	r4,a
      000591 C0 03            [24] 1510 	push	ar3
      000593 C0 04            [24] 1511 	push	ar4
      000595 C0 05            [24] 1512 	push	ar5
      000597 74r1F            [12] 1513 	mov	a,#___str_22
      000599 C0 E0            [24] 1514 	push	acc
      00059B 74s02            [12] 1515 	mov	a,#(___str_22 >> 8)
      00059D C0 E0            [24] 1516 	push	acc
      00059F 74 80            [12] 1517 	mov	a,#0x80
      0005A1 C0 E0            [24] 1518 	push	acc
      0005A3 12r00r00         [24] 1519 	lcall	_printf
      0005A6 E5 81            [12] 1520 	mov	a,sp
      0005A8 24 FA            [12] 1521 	add	a,#0xfa
      0005AA F5 81            [12] 1522 	mov	sp,a
      0005AC D0 06            [24] 1523 	pop	ar6
      0005AE D0 07            [24] 1524 	pop	ar7
      0005B0                       1525 00119$:
                                   1526 ;	main.c:150: printf(" %x",buffer[0][i]);
      0005B0 90r10rD5         [24] 1527 	mov	dptr,#_buffer
      0005B3 E0               [24] 1528 	movx	a,@dptr
      0005B4 FB               [12] 1529 	mov	r3,a
      0005B5 A3               [24] 1530 	inc	dptr
      0005B6 E0               [24] 1531 	movx	a,@dptr
      0005B7 FC               [12] 1532 	mov	r4,a
      0005B8 A3               [24] 1533 	inc	dptr
      0005B9 E0               [24] 1534 	movx	a,@dptr
      0005BA FD               [12] 1535 	mov	r5,a
      0005BB 90r0FrA0         [24] 1536 	mov	dptr,#_i
      0005BE E0               [24] 1537 	movx	a,@dptr
      0005BF F9               [12] 1538 	mov	r1,a
      0005C0 A3               [24] 1539 	inc	dptr
      0005C1 E0               [24] 1540 	movx	a,@dptr
      0005C2 FA               [12] 1541 	mov	r2,a
      0005C3 E9               [12] 1542 	mov	a,r1
      0005C4 2B               [12] 1543 	add	a,r3
      0005C5 FB               [12] 1544 	mov	r3,a
      0005C6 EA               [12] 1545 	mov	a,r2
      0005C7 3C               [12] 1546 	addc	a,r4
      0005C8 FC               [12] 1547 	mov	r4,a
      0005C9 8B 82            [24] 1548 	mov	dpl,r3
      0005CB 8C 83            [24] 1549 	mov	dph,r4
      0005CD 8D F0            [24] 1550 	mov	b,r5
      0005CF 12r00r00         [24] 1551 	lcall	__gptrget
      0005D2 FB               [12] 1552 	mov	r3,a
      0005D3 7D 00            [12] 1553 	mov	r5,#0x00
      0005D5 C0 07            [24] 1554 	push	ar7
      0005D7 C0 06            [24] 1555 	push	ar6
      0005D9 C0 03            [24] 1556 	push	ar3
      0005DB C0 05            [24] 1557 	push	ar5
      0005DD 74r22            [12] 1558 	mov	a,#___str_23
      0005DF C0 E0            [24] 1559 	push	acc
      0005E1 74s02            [12] 1560 	mov	a,#(___str_23 >> 8)
      0005E3 C0 E0            [24] 1561 	push	acc
      0005E5 74 80            [12] 1562 	mov	a,#0x80
      0005E7 C0 E0            [24] 1563 	push	acc
      0005E9 12r00r00         [24] 1564 	lcall	_printf
      0005EC E5 81            [12] 1565 	mov	a,sp
      0005EE 24 FB            [12] 1566 	add	a,#0xfb
      0005F0 F5 81            [12] 1567 	mov	sp,a
      0005F2 D0 06            [24] 1568 	pop	ar6
      0005F4 D0 07            [24] 1569 	pop	ar7
                                   1570 ;	main.c:143: for (i=0; i<=count2; i++)
      0005F6 90r0FrA0         [24] 1571 	mov	dptr,#_i
      0005F9 E0               [24] 1572 	movx	a,@dptr
      0005FA 24 01            [12] 1573 	add	a,#0x01
      0005FC F0               [24] 1574 	movx	@dptr,a
      0005FD A3               [24] 1575 	inc	dptr
      0005FE E0               [24] 1576 	movx	a,@dptr
      0005FF 34 00            [12] 1577 	addc	a,#0x00
      000601 F0               [24] 1578 	movx	@dptr,a
      000602 90r0FrA0         [24] 1579 	mov	dptr,#_i
      000605 E0               [24] 1580 	movx	a,@dptr
      000606 FC               [12] 1581 	mov	r4,a
      000607 A3               [24] 1582 	inc	dptr
      000608 E0               [24] 1583 	movx	a,@dptr
      000609 FD               [12] 1584 	mov	r5,a
      00060A C3               [12] 1585 	clr	c
      00060B EE               [12] 1586 	mov	a,r6
      00060C 9C               [12] 1587 	subb	a,r4
      00060D EF               [12] 1588 	mov	a,r7
      00060E 9D               [12] 1589 	subb	a,r5
      00060F 40 03            [24] 1590 	jc	00308$
      000611 02r05r59         [24] 1591 	ljmp	00149$
      000614                       1592 00308$:
                                   1593 ;	main.c:152: printf_tiny("\n\r");                //go to next line
      000614 74rFF            [12] 1594 	mov	a,#___str_9
      000616 C0 E0            [24] 1595 	push	acc
      000618 74s00            [12] 1596 	mov	a,#(___str_9 >> 8)
      00061A C0 E0            [24] 1597 	push	acc
      00061C 12r00r00         [24] 1598 	lcall	_printf_tiny
      00061F 15 81            [12] 1599 	dec	sp
      000621 15 81            [12] 1600 	dec	sp
                                   1601 ;	main.c:154: break;
      000623 02r02r02         [24] 1602 	ljmp	00147$
                                   1603 ;	main.c:157: case('@'):
      000626                       1604 00121$:
                                   1605 ;	main.c:160: printf_tiny("\n\rfree all buffers and allocate new buffer size ");
      000626 74r26            [12] 1606 	mov	a,#___str_24
      000628 C0 E0            [24] 1607 	push	acc
      00062A 74s02            [12] 1608 	mov	a,#(___str_24 >> 8)
      00062C C0 E0            [24] 1609 	push	acc
      00062E 12r00r00         [24] 1610 	lcall	_printf_tiny
      000631 15 81            [12] 1611 	dec	sp
      000633 15 81            [12] 1612 	dec	sp
                                   1613 ;	main.c:161: for (i=0; i<=count_plus; i++)                 //free all buffers present on heap
      000635 90r0FrA0         [24] 1614 	mov	dptr,#_i
      000638 E4               [12] 1615 	clr	a
      000639 F0               [24] 1616 	movx	@dptr,a
      00063A A3               [24] 1617 	inc	dptr
      00063B F0               [24] 1618 	movx	@dptr,a
      00063C AE*02            [24] 1619 	mov	r6,_function_sloc1_1_0
      00063E AF*03            [24] 1620 	mov	r7,(_function_sloc1_1_0 + 1)
      000640                       1621 00151$:
                                   1622 ;	main.c:163: free(buffer[i]);
      000640 90r0FrA0         [24] 1623 	mov	dptr,#_i
      000643 E0               [24] 1624 	movx	a,@dptr
      000644 FC               [12] 1625 	mov	r4,a
      000645 A3               [24] 1626 	inc	dptr
      000646 E0               [24] 1627 	movx	a,@dptr
      000647 FD               [12] 1628 	mov	r5,a
      000648 90r00r00         [24] 1629 	mov	dptr,#__mulint_PARM_2
      00064B EC               [12] 1630 	mov	a,r4
      00064C F0               [24] 1631 	movx	@dptr,a
      00064D ED               [12] 1632 	mov	a,r5
      00064E A3               [24] 1633 	inc	dptr
      00064F F0               [24] 1634 	movx	@dptr,a
      000650 90 00 03         [24] 1635 	mov	dptr,#0x0003
      000653 C0 07            [24] 1636 	push	ar7
      000655 C0 06            [24] 1637 	push	ar6
      000657 12r00r00         [24] 1638 	lcall	__mulint
      00065A AC 82            [24] 1639 	mov	r4,dpl
      00065C AD 83            [24] 1640 	mov	r5,dph
      00065E EC               [12] 1641 	mov	a,r4
      00065F 24rD5            [12] 1642 	add	a,#_buffer
      000661 F5 82            [12] 1643 	mov	dpl,a
      000663 ED               [12] 1644 	mov	a,r5
      000664 34s10            [12] 1645 	addc	a,#(_buffer >> 8)
      000666 F5 83            [12] 1646 	mov	dph,a
      000668 E0               [24] 1647 	movx	a,@dptr
      000669 FB               [12] 1648 	mov	r3,a
      00066A A3               [24] 1649 	inc	dptr
      00066B E0               [24] 1650 	movx	a,@dptr
      00066C FC               [12] 1651 	mov	r4,a
      00066D A3               [24] 1652 	inc	dptr
      00066E E0               [24] 1653 	movx	a,@dptr
      00066F FD               [12] 1654 	mov	r5,a
      000670 8B 82            [24] 1655 	mov	dpl,r3
      000672 8C 83            [24] 1656 	mov	dph,r4
      000674 8D F0            [24] 1657 	mov	b,r5
      000676 12r00r00         [24] 1658 	lcall	_free
      000679 D0 06            [24] 1659 	pop	ar6
      00067B D0 07            [24] 1660 	pop	ar7
                                   1661 ;	main.c:161: for (i=0; i<=count_plus; i++)                 //free all buffers present on heap
      00067D 90r0FrA0         [24] 1662 	mov	dptr,#_i
      000680 E0               [24] 1663 	movx	a,@dptr
      000681 24 01            [12] 1664 	add	a,#0x01
      000683 F0               [24] 1665 	movx	@dptr,a
      000684 A3               [24] 1666 	inc	dptr
      000685 E0               [24] 1667 	movx	a,@dptr
      000686 34 00            [12] 1668 	addc	a,#0x00
      000688 F0               [24] 1669 	movx	@dptr,a
      000689 90r0FrA0         [24] 1670 	mov	dptr,#_i
      00068C E0               [24] 1671 	movx	a,@dptr
      00068D FC               [12] 1672 	mov	r4,a
      00068E A3               [24] 1673 	inc	dptr
      00068F E0               [24] 1674 	movx	a,@dptr
      000690 FD               [12] 1675 	mov	r5,a
      000691 C3               [12] 1676 	clr	c
      000692 EE               [12] 1677 	mov	a,r6
      000693 9C               [12] 1678 	subb	a,r4
      000694 EF               [12] 1679 	mov	a,r7
      000695 9D               [12] 1680 	subb	a,r5
      000696 50 A8            [24] 1681 	jnc	00151$
                                   1682 ;	main.c:165: printf_tiny("\n\rtake new buffer size\n\r");        // retake the buffer size for buffer_0 and buffer_1
      000698 74r57            [12] 1683 	mov	a,#___str_25
      00069A C0 E0            [24] 1684 	push	acc
      00069C 74s02            [12] 1685 	mov	a,#(___str_25 >> 8)
      00069E C0 E0            [24] 1686 	push	acc
      0006A0 12r00r00         [24] 1687 	lcall	_printf_tiny
      0006A3 15 81            [12] 1688 	dec	sp
      0006A5 15 81            [12] 1689 	dec	sp
                                   1690 ;	main.c:166: count2=0;
      0006A7 90r12rA1         [24] 1691 	mov	dptr,#_function_count2_65536_48
      0006AA E4               [12] 1692 	clr	a
      0006AB F0               [24] 1693 	movx	@dptr,a
      0006AC A3               [24] 1694 	inc	dptr
      0006AD F0               [24] 1695 	movx	@dptr,a
                                   1696 ;	main.c:167: buffer_start_size=getnumber();
      0006AE 12r0CrE7         [24] 1697 	lcall	_getnumber
      0006B1 AE 82            [24] 1698 	mov	r6,dpl
      0006B3 AF 83            [24] 1699 	mov	r7,dph
      0006B5 90r10rD2         [24] 1700 	mov	dptr,#_buffer_start_size
      0006B8 EE               [12] 1701 	mov	a,r6
      0006B9 F0               [24] 1702 	movx	@dptr,a
      0006BA EF               [12] 1703 	mov	a,r7
      0006BB A3               [24] 1704 	inc	dptr
      0006BC F0               [24] 1705 	movx	@dptr,a
                                   1706 ;	main.c:168: buffer[0]=(char*) malloc(buffer_start_size*sizeof(char));  //allocate buffers in the xram and print their address
      0006BD 8E 82            [24] 1707 	mov	dpl,r6
      0006BF 8F 83            [24] 1708 	mov	dph,r7
      0006C1 12r00r00         [24] 1709 	lcall	_malloc
      0006C4 AE 82            [24] 1710 	mov	r6,dpl
      0006C6 AF 83            [24] 1711 	mov	r7,dph
      0006C8 7D 00            [12] 1712 	mov	r5,#0x00
      0006CA 90r10rD5         [24] 1713 	mov	dptr,#_buffer
      0006CD EE               [12] 1714 	mov	a,r6
      0006CE F0               [24] 1715 	movx	@dptr,a
      0006CF EF               [12] 1716 	mov	a,r7
      0006D0 A3               [24] 1717 	inc	dptr
      0006D1 F0               [24] 1718 	movx	@dptr,a
      0006D2 ED               [12] 1719 	mov	a,r5
      0006D3 A3               [24] 1720 	inc	dptr
      0006D4 F0               [24] 1721 	movx	@dptr,a
                                   1722 ;	main.c:169: printf("address of buffer_0=%p\n\r",buffer[0]);
      0006D5 C0 06            [24] 1723 	push	ar6
      0006D7 C0 07            [24] 1724 	push	ar7
      0006D9 C0 05            [24] 1725 	push	ar5
      0006DB 74r70            [12] 1726 	mov	a,#___str_26
      0006DD C0 E0            [24] 1727 	push	acc
      0006DF 74s02            [12] 1728 	mov	a,#(___str_26 >> 8)
      0006E1 C0 E0            [24] 1729 	push	acc
      0006E3 74 80            [12] 1730 	mov	a,#0x80
      0006E5 C0 E0            [24] 1731 	push	acc
      0006E7 12r00r00         [24] 1732 	lcall	_printf
      0006EA E5 81            [12] 1733 	mov	a,sp
      0006EC 24 FA            [12] 1734 	add	a,#0xfa
      0006EE F5 81            [12] 1735 	mov	sp,a
                                   1736 ;	main.c:170: buffer[1]=(char*) malloc(buffer_start_size*sizeof(char));
      0006F0 90r10rD2         [24] 1737 	mov	dptr,#_buffer_start_size
      0006F3 E0               [24] 1738 	movx	a,@dptr
      0006F4 FE               [12] 1739 	mov	r6,a
      0006F5 A3               [24] 1740 	inc	dptr
      0006F6 E0               [24] 1741 	movx	a,@dptr
      0006F7 FF               [12] 1742 	mov	r7,a
      0006F8 8E 82            [24] 1743 	mov	dpl,r6
      0006FA 8F 83            [24] 1744 	mov	dph,r7
      0006FC 12r00r00         [24] 1745 	lcall	_malloc
      0006FF AE 82            [24] 1746 	mov	r6,dpl
      000701 AF 83            [24] 1747 	mov	r7,dph
      000703 7D 00            [12] 1748 	mov	r5,#0x00
      000705 90r10rD8         [24] 1749 	mov	dptr,#(_buffer + 0x0003)
      000708 EE               [12] 1750 	mov	a,r6
      000709 F0               [24] 1751 	movx	@dptr,a
      00070A EF               [12] 1752 	mov	a,r7
      00070B A3               [24] 1753 	inc	dptr
      00070C F0               [24] 1754 	movx	@dptr,a
      00070D ED               [12] 1755 	mov	a,r5
      00070E A3               [24] 1756 	inc	dptr
      00070F F0               [24] 1757 	movx	@dptr,a
                                   1758 ;	main.c:171: printf("address of buffer_1=%p\n\r",buffer[1]);
      000710 C0 06            [24] 1759 	push	ar6
      000712 C0 07            [24] 1760 	push	ar7
      000714 C0 05            [24] 1761 	push	ar5
      000716 74r89            [12] 1762 	mov	a,#___str_27
      000718 C0 E0            [24] 1763 	push	acc
      00071A 74s02            [12] 1764 	mov	a,#(___str_27 >> 8)
      00071C C0 E0            [24] 1765 	push	acc
      00071E 74 80            [12] 1766 	mov	a,#0x80
      000720 C0 E0            [24] 1767 	push	acc
      000722 12r00r00         [24] 1768 	lcall	_printf
      000725 E5 81            [12] 1769 	mov	a,sp
      000727 24 FA            [12] 1770 	add	a,#0xfa
      000729 F5 81            [12] 1771 	mov	sp,a
                                   1772 ;	main.c:172: break;
      00072B 02r02r02         [24] 1773 	ljmp	00147$
                                   1774 ;	main.c:174: case('?'):
      00072E                       1775 00123$:
                                   1776 ;	main.c:178: printf_tiny("\n\rbuffer_%d",buffer0);
      00072E E4               [12] 1777 	clr	a
      00072F C0 E0            [24] 1778 	push	acc
      000731 C0 E0            [24] 1779 	push	acc
      000733 74rA2            [12] 1780 	mov	a,#___str_28
      000735 C0 E0            [24] 1781 	push	acc
      000737 74s02            [12] 1782 	mov	a,#(___str_28 >> 8)
      000739 C0 E0            [24] 1783 	push	acc
      00073B 12r00r00         [24] 1784 	lcall	_printf_tiny
      00073E E5 81            [12] 1785 	mov	a,sp
      000740 24 FC            [12] 1786 	add	a,#0xfc
      000742 F5 81            [12] 1787 	mov	sp,a
                                   1788 ;	main.c:179: buffer_allocated_size=buffer_start_size;
      000744 90r10rD2         [24] 1789 	mov	dptr,#_buffer_start_size
      000747 E0               [24] 1790 	movx	a,@dptr
      000748 FE               [12] 1791 	mov	r6,a
      000749 A3               [24] 1792 	inc	dptr
      00074A E0               [24] 1793 	movx	a,@dptr
      00074B FF               [12] 1794 	mov	r7,a
      00074C 90r12r97         [24] 1795 	mov	dptr,#_buffer_allocated_size
      00074F EE               [12] 1796 	mov	a,r6
      000750 F0               [24] 1797 	movx	@dptr,a
      000751 EF               [12] 1798 	mov	a,r7
      000752 A3               [24] 1799 	inc	dptr
      000753 F0               [24] 1800 	movx	@dptr,a
                                   1801 ;	main.c:180: buffer_space_filled=count2;
      000754 90r12rA1         [24] 1802 	mov	dptr,#_function_count2_65536_48
      000757 E0               [24] 1803 	movx	a,@dptr
      000758 FC               [12] 1804 	mov	r4,a
      000759 A3               [24] 1805 	inc	dptr
      00075A E0               [24] 1806 	movx	a,@dptr
      00075B FD               [12] 1807 	mov	r5,a
      00075C 90r12r99         [24] 1808 	mov	dptr,#_buffer_space_filled
      00075F EC               [12] 1809 	mov	a,r4
      000760 F0               [24] 1810 	movx	@dptr,a
      000761 ED               [12] 1811 	mov	a,r5
      000762 A3               [24] 1812 	inc	dptr
      000763 F0               [24] 1813 	movx	@dptr,a
                                   1814 ;	main.c:181: buffer_free_Space=buffer_allocated_size-buffer_space_filled;
      000764 90r12r9B         [24] 1815 	mov	dptr,#_buffer_free_Space
      000767 EE               [12] 1816 	mov	a,r6
      000768 C3               [12] 1817 	clr	c
      000769 9C               [12] 1818 	subb	a,r4
      00076A F0               [24] 1819 	movx	@dptr,a
      00076B EF               [12] 1820 	mov	a,r7
      00076C 9D               [12] 1821 	subb	a,r5
      00076D A3               [24] 1822 	inc	dptr
      00076E F0               [24] 1823 	movx	@dptr,a
                                   1824 ;	main.c:182: no_of_characters=count1-1;
      00076F 90r12r9F         [24] 1825 	mov	dptr,#_function_count1_65536_48
      000772 E0               [24] 1826 	movx	a,@dptr
      000773 FE               [12] 1827 	mov	r6,a
      000774 A3               [24] 1828 	inc	dptr
      000775 E0               [24] 1829 	movx	a,@dptr
      000776 FF               [12] 1830 	mov	r7,a
      000777 EE               [12] 1831 	mov	a,r6
      000778 24 FF            [12] 1832 	add	a,#0xff
      00077A FC               [12] 1833 	mov	r4,a
      00077B EF               [12] 1834 	mov	a,r7
      00077C 34 FF            [12] 1835 	addc	a,#0xff
      00077E FD               [12] 1836 	mov	r5,a
      00077F 90r12r9D         [24] 1837 	mov	dptr,#_no_of_characters
      000782 EC               [12] 1838 	mov	a,r4
      000783 F0               [24] 1839 	movx	@dptr,a
      000784 ED               [12] 1840 	mov	a,r5
      000785 A3               [24] 1841 	inc	dptr
      000786 F0               [24] 1842 	movx	@dptr,a
                                   1843 ;	main.c:183: printf_tiny("\n\rbuffer_number=%d",buffer0);                  //display contents of buffer_0 including size, start addr,
      000787 C0 07            [24] 1844 	push	ar7
      000789 C0 06            [24] 1845 	push	ar6
      00078B E4               [12] 1846 	clr	a
      00078C C0 E0            [24] 1847 	push	acc
      00078E C0 E0            [24] 1848 	push	acc
      000790 74rAE            [12] 1849 	mov	a,#___str_29
      000792 C0 E0            [24] 1850 	push	acc
      000794 74s02            [12] 1851 	mov	a,#(___str_29 >> 8)
      000796 C0 E0            [24] 1852 	push	acc
      000798 12r00r00         [24] 1853 	lcall	_printf_tiny
      00079B E5 81            [12] 1854 	mov	a,sp
      00079D 24 FC            [12] 1855 	add	a,#0xfc
      00079F F5 81            [12] 1856 	mov	sp,a
                                   1857 ;	main.c:185: printf_tiny("\n\rbuffer_allocated_size=%d",buffer_allocated_size);
      0007A1 90r12r97         [24] 1858 	mov	dptr,#_buffer_allocated_size
      0007A4 E0               [24] 1859 	movx	a,@dptr
      0007A5 C0 E0            [24] 1860 	push	acc
      0007A7 A3               [24] 1861 	inc	dptr
      0007A8 E0               [24] 1862 	movx	a,@dptr
      0007A9 C0 E0            [24] 1863 	push	acc
      0007AB 74rC1            [12] 1864 	mov	a,#___str_30
      0007AD C0 E0            [24] 1865 	push	acc
      0007AF 74s02            [12] 1866 	mov	a,#(___str_30 >> 8)
      0007B1 C0 E0            [24] 1867 	push	acc
      0007B3 12r00r00         [24] 1868 	lcall	_printf_tiny
      0007B6 E5 81            [12] 1869 	mov	a,sp
      0007B8 24 FC            [12] 1870 	add	a,#0xfc
      0007BA F5 81            [12] 1871 	mov	sp,a
                                   1872 ;	main.c:186: printf_tiny("\n\rbuffer_space_filled=%d",buffer_space_filled);
      0007BC 90r12r99         [24] 1873 	mov	dptr,#_buffer_space_filled
      0007BF E0               [24] 1874 	movx	a,@dptr
      0007C0 C0 E0            [24] 1875 	push	acc
      0007C2 A3               [24] 1876 	inc	dptr
      0007C3 E0               [24] 1877 	movx	a,@dptr
      0007C4 C0 E0            [24] 1878 	push	acc
      0007C6 74rDC            [12] 1879 	mov	a,#___str_31
      0007C8 C0 E0            [24] 1880 	push	acc
      0007CA 74s02            [12] 1881 	mov	a,#(___str_31 >> 8)
      0007CC C0 E0            [24] 1882 	push	acc
      0007CE 12r00r00         [24] 1883 	lcall	_printf_tiny
      0007D1 E5 81            [12] 1884 	mov	a,sp
      0007D3 24 FC            [12] 1885 	add	a,#0xfc
      0007D5 F5 81            [12] 1886 	mov	sp,a
                                   1887 ;	main.c:187: printf("\n\rbuffer_start_add=%p",buffer[0]);                  //display required contents of buffer_0 on heap
      0007D7 90r10rD5         [24] 1888 	mov	dptr,#_buffer
      0007DA E0               [24] 1889 	movx	a,@dptr
      0007DB FB               [12] 1890 	mov	r3,a
      0007DC A3               [24] 1891 	inc	dptr
      0007DD E0               [24] 1892 	movx	a,@dptr
      0007DE FC               [12] 1893 	mov	r4,a
      0007DF A3               [24] 1894 	inc	dptr
      0007E0 E0               [24] 1895 	movx	a,@dptr
      0007E1 FD               [12] 1896 	mov	r5,a
      0007E2 C0 03            [24] 1897 	push	ar3
      0007E4 C0 04            [24] 1898 	push	ar4
      0007E6 C0 05            [24] 1899 	push	ar5
      0007E8 74rF5            [12] 1900 	mov	a,#___str_32
      0007EA C0 E0            [24] 1901 	push	acc
      0007EC 74s02            [12] 1902 	mov	a,#(___str_32 >> 8)
      0007EE C0 E0            [24] 1903 	push	acc
      0007F0 74 80            [12] 1904 	mov	a,#0x80
      0007F2 C0 E0            [24] 1905 	push	acc
      0007F4 12r00r00         [24] 1906 	lcall	_printf
      0007F7 E5 81            [12] 1907 	mov	a,sp
      0007F9 24 FA            [12] 1908 	add	a,#0xfa
      0007FB F5 81            [12] 1909 	mov	sp,a
      0007FD D0 06            [24] 1910 	pop	ar6
      0007FF D0 07            [24] 1911 	pop	ar7
                                   1912 ;	main.c:188: printf("\n\rbuffer_end_add=%p",buffer[0]+buffer_start_size-1);
      000801 90r10rD5         [24] 1913 	mov	dptr,#_buffer
      000804 E0               [24] 1914 	movx	a,@dptr
      000805 FB               [12] 1915 	mov	r3,a
      000806 A3               [24] 1916 	inc	dptr
      000807 E0               [24] 1917 	movx	a,@dptr
      000808 FC               [12] 1918 	mov	r4,a
      000809 A3               [24] 1919 	inc	dptr
      00080A E0               [24] 1920 	movx	a,@dptr
      00080B FD               [12] 1921 	mov	r5,a
      00080C 90r10rD2         [24] 1922 	mov	dptr,#_buffer_start_size
      00080F E0               [24] 1923 	movx	a,@dptr
      000810 F9               [12] 1924 	mov	r1,a
      000811 A3               [24] 1925 	inc	dptr
      000812 E0               [24] 1926 	movx	a,@dptr
      000813 FA               [12] 1927 	mov	r2,a
      000814 E9               [12] 1928 	mov	a,r1
      000815 2B               [12] 1929 	add	a,r3
      000816 FB               [12] 1930 	mov	r3,a
      000817 EA               [12] 1931 	mov	a,r2
      000818 3C               [12] 1932 	addc	a,r4
      000819 FC               [12] 1933 	mov	r4,a
      00081A 1B               [12] 1934 	dec	r3
      00081B BB FF 01         [24] 1935 	cjne	r3,#0xff,00310$
      00081E 1C               [12] 1936 	dec	r4
      00081F                       1937 00310$:
      00081F C0 07            [24] 1938 	push	ar7
      000821 C0 06            [24] 1939 	push	ar6
      000823 C0 03            [24] 1940 	push	ar3
      000825 C0 04            [24] 1941 	push	ar4
      000827 C0 05            [24] 1942 	push	ar5
      000829 74r0B            [12] 1943 	mov	a,#___str_33
      00082B C0 E0            [24] 1944 	push	acc
      00082D 74s03            [12] 1945 	mov	a,#(___str_33 >> 8)
      00082F C0 E0            [24] 1946 	push	acc
      000831 74 80            [12] 1947 	mov	a,#0x80
      000833 C0 E0            [24] 1948 	push	acc
      000835 12r00r00         [24] 1949 	lcall	_printf
      000838 E5 81            [12] 1950 	mov	a,sp
      00083A 24 FA            [12] 1951 	add	a,#0xfa
      00083C F5 81            [12] 1952 	mov	sp,a
                                   1953 ;	main.c:189: printf_tiny("\n\rbuffer_free_Space=%d",buffer_free_Space);
      00083E 90r12r9B         [24] 1954 	mov	dptr,#_buffer_free_Space
      000841 E0               [24] 1955 	movx	a,@dptr
      000842 C0 E0            [24] 1956 	push	acc
      000844 A3               [24] 1957 	inc	dptr
      000845 E0               [24] 1958 	movx	a,@dptr
      000846 C0 E0            [24] 1959 	push	acc
      000848 74r1F            [12] 1960 	mov	a,#___str_34
      00084A C0 E0            [24] 1961 	push	acc
      00084C 74s03            [12] 1962 	mov	a,#(___str_34 >> 8)
      00084E C0 E0            [24] 1963 	push	acc
      000850 12r00r00         [24] 1964 	lcall	_printf_tiny
      000853 E5 81            [12] 1965 	mov	a,sp
      000855 24 FC            [12] 1966 	add	a,#0xfc
      000857 F5 81            [12] 1967 	mov	sp,a
                                   1968 ;	main.c:190: printf_tiny("\n\rno_of_characters=%d\n\r",no_of_characters);
      000859 90r12r9D         [24] 1969 	mov	dptr,#_no_of_characters
      00085C E0               [24] 1970 	movx	a,@dptr
      00085D C0 E0            [24] 1971 	push	acc
      00085F A3               [24] 1972 	inc	dptr
      000860 E0               [24] 1973 	movx	a,@dptr
      000861 C0 E0            [24] 1974 	push	acc
      000863 74r36            [12] 1975 	mov	a,#___str_35
      000865 C0 E0            [24] 1976 	push	acc
      000867 74s03            [12] 1977 	mov	a,#(___str_35 >> 8)
      000869 C0 E0            [24] 1978 	push	acc
      00086B 12r00r00         [24] 1979 	lcall	_printf_tiny
      00086E E5 81            [12] 1980 	mov	a,sp
      000870 24 FC            [12] 1981 	add	a,#0xfc
      000872 F5 81            [12] 1982 	mov	sp,a
      000874 D0 06            [24] 1983 	pop	ar6
      000876 D0 07            [24] 1984 	pop	ar7
                                   1985 ;	main.c:193: if(buffer[1]!=NULL)
      000878 90r10rD8         [24] 1986 	mov	dptr,#(_buffer + 0x0003)
      00087B E0               [24] 1987 	movx	a,@dptr
      00087C FB               [12] 1988 	mov	r3,a
      00087D A3               [24] 1989 	inc	dptr
      00087E E0               [24] 1990 	movx	a,@dptr
      00087F FC               [12] 1991 	mov	r4,a
      000880 A3               [24] 1992 	inc	dptr
      000881 E0               [24] 1993 	movx	a,@dptr
      000882 FD               [12] 1994 	mov	r5,a
      000883 EB               [12] 1995 	mov	a,r3
      000884 4C               [12] 1996 	orl	a,r4
      000885 70 03            [24] 1997 	jnz	00311$
      000887 02r09rBD         [24] 1998 	ljmp	00127$
      00088A                       1999 00311$:
                                   2000 ;	main.c:195: printf("\n\n\rbuffer_%d",buffer1);
      00088A C0 07            [24] 2001 	push	ar7
      00088C C0 06            [24] 2002 	push	ar6
      00088E 74 01            [12] 2003 	mov	a,#0x01
      000890 C0 E0            [24] 2004 	push	acc
      000892 E4               [12] 2005 	clr	a
      000893 C0 E0            [24] 2006 	push	acc
      000895 74r4E            [12] 2007 	mov	a,#___str_36
      000897 C0 E0            [24] 2008 	push	acc
      000899 74s03            [12] 2009 	mov	a,#(___str_36 >> 8)
      00089B C0 E0            [24] 2010 	push	acc
      00089D 74 80            [12] 2011 	mov	a,#0x80
      00089F C0 E0            [24] 2012 	push	acc
      0008A1 12r00r00         [24] 2013 	lcall	_printf
      0008A4 E5 81            [12] 2014 	mov	a,sp
      0008A6 24 FB            [12] 2015 	add	a,#0xfb
      0008A8 F5 81            [12] 2016 	mov	sp,a
      0008AA D0 06            [24] 2017 	pop	ar6
      0008AC D0 07            [24] 2018 	pop	ar7
                                   2019 ;	main.c:196: buffer_allocated_size=buffer_start_size;
      0008AE 90r10rD2         [24] 2020 	mov	dptr,#_buffer_start_size
      0008B1 E0               [24] 2021 	movx	a,@dptr
      0008B2 FC               [12] 2022 	mov	r4,a
      0008B3 A3               [24] 2023 	inc	dptr
      0008B4 E0               [24] 2024 	movx	a,@dptr
      0008B5 FD               [12] 2025 	mov	r5,a
      0008B6 90r12r97         [24] 2026 	mov	dptr,#_buffer_allocated_size
      0008B9 EC               [12] 2027 	mov	a,r4
      0008BA F0               [24] 2028 	movx	@dptr,a
      0008BB ED               [12] 2029 	mov	a,r5
      0008BC A3               [24] 2030 	inc	dptr
      0008BD F0               [24] 2031 	movx	@dptr,a
                                   2032 ;	main.c:197: buffer_space_filled=0;
      0008BE 90r12r99         [24] 2033 	mov	dptr,#_buffer_space_filled
      0008C1 E4               [12] 2034 	clr	a
      0008C2 F0               [24] 2035 	movx	@dptr,a
      0008C3 A3               [24] 2036 	inc	dptr
      0008C4 F0               [24] 2037 	movx	@dptr,a
                                   2038 ;	main.c:198: buffer_free_Space=buffer_allocated_size-buffer_space_filled;
      0008C5 90r12r9B         [24] 2039 	mov	dptr,#_buffer_free_Space
      0008C8 EC               [12] 2040 	mov	a,r4
      0008C9 F0               [24] 2041 	movx	@dptr,a
      0008CA ED               [12] 2042 	mov	a,r5
      0008CB A3               [24] 2043 	inc	dptr
      0008CC F0               [24] 2044 	movx	@dptr,a
                                   2045 ;	main.c:199: no_of_characters=count1-1;                        //display contents of buffer_1 including size, start addr,
      0008CD 1E               [12] 2046 	dec	r6
      0008CE BE FF 01         [24] 2047 	cjne	r6,#0xff,00312$
      0008D1 1F               [12] 2048 	dec	r7
      0008D2                       2049 00312$:
      0008D2 90r12r9D         [24] 2050 	mov	dptr,#_no_of_characters
      0008D5 EE               [12] 2051 	mov	a,r6
      0008D6 F0               [24] 2052 	movx	@dptr,a
      0008D7 EF               [12] 2053 	mov	a,r7
      0008D8 A3               [24] 2054 	inc	dptr
      0008D9 F0               [24] 2055 	movx	@dptr,a
                                   2056 ;	main.c:201: printf_tiny("\n\rbuffer_number=%d",buffer1);
      0008DA 74 01            [12] 2057 	mov	a,#0x01
      0008DC C0 E0            [24] 2058 	push	acc
      0008DE E4               [12] 2059 	clr	a
      0008DF C0 E0            [24] 2060 	push	acc
      0008E1 74rAE            [12] 2061 	mov	a,#___str_29
      0008E3 C0 E0            [24] 2062 	push	acc
      0008E5 74s02            [12] 2063 	mov	a,#(___str_29 >> 8)
      0008E7 C0 E0            [24] 2064 	push	acc
      0008E9 12r00r00         [24] 2065 	lcall	_printf_tiny
      0008EC E5 81            [12] 2066 	mov	a,sp
      0008EE 24 FC            [12] 2067 	add	a,#0xfc
      0008F0 F5 81            [12] 2068 	mov	sp,a
                                   2069 ;	main.c:202: printf_tiny("\n\rbuffer_allocated_size=%d",buffer_allocated_size);
      0008F2 90r12r97         [24] 2070 	mov	dptr,#_buffer_allocated_size
      0008F5 E0               [24] 2071 	movx	a,@dptr
      0008F6 C0 E0            [24] 2072 	push	acc
      0008F8 A3               [24] 2073 	inc	dptr
      0008F9 E0               [24] 2074 	movx	a,@dptr
      0008FA C0 E0            [24] 2075 	push	acc
      0008FC 74rC1            [12] 2076 	mov	a,#___str_30
      0008FE C0 E0            [24] 2077 	push	acc
      000900 74s02            [12] 2078 	mov	a,#(___str_30 >> 8)
      000902 C0 E0            [24] 2079 	push	acc
      000904 12r00r00         [24] 2080 	lcall	_printf_tiny
      000907 E5 81            [12] 2081 	mov	a,sp
      000909 24 FC            [12] 2082 	add	a,#0xfc
      00090B F5 81            [12] 2083 	mov	sp,a
                                   2084 ;	main.c:203: printf_tiny("\n\rbuffer_space_filled=%d",buffer_space_filled);
      00090D 90r12r99         [24] 2085 	mov	dptr,#_buffer_space_filled
      000910 E0               [24] 2086 	movx	a,@dptr
      000911 C0 E0            [24] 2087 	push	acc
      000913 A3               [24] 2088 	inc	dptr
      000914 E0               [24] 2089 	movx	a,@dptr
      000915 C0 E0            [24] 2090 	push	acc
      000917 74rDC            [12] 2091 	mov	a,#___str_31
      000919 C0 E0            [24] 2092 	push	acc
      00091B 74s02            [12] 2093 	mov	a,#(___str_31 >> 8)
      00091D C0 E0            [24] 2094 	push	acc
      00091F 12r00r00         [24] 2095 	lcall	_printf_tiny
      000922 E5 81            [12] 2096 	mov	a,sp
      000924 24 FC            [12] 2097 	add	a,#0xfc
      000926 F5 81            [12] 2098 	mov	sp,a
                                   2099 ;	main.c:204: printf("\n\rbuffer_start_add=%p",buffer[1]);
      000928 90r10rD8         [24] 2100 	mov	dptr,#(_buffer + 0x0003)
      00092B E0               [24] 2101 	movx	a,@dptr
      00092C FD               [12] 2102 	mov	r5,a
      00092D A3               [24] 2103 	inc	dptr
      00092E E0               [24] 2104 	movx	a,@dptr
      00092F FE               [12] 2105 	mov	r6,a
      000930 A3               [24] 2106 	inc	dptr
      000931 E0               [24] 2107 	movx	a,@dptr
      000932 FF               [12] 2108 	mov	r7,a
      000933 C0 05            [24] 2109 	push	ar5
      000935 C0 06            [24] 2110 	push	ar6
      000937 C0 07            [24] 2111 	push	ar7
      000939 74rF5            [12] 2112 	mov	a,#___str_32
      00093B C0 E0            [24] 2113 	push	acc
      00093D 74s02            [12] 2114 	mov	a,#(___str_32 >> 8)
      00093F C0 E0            [24] 2115 	push	acc
      000941 74 80            [12] 2116 	mov	a,#0x80
      000943 C0 E0            [24] 2117 	push	acc
      000945 12r00r00         [24] 2118 	lcall	_printf
      000948 E5 81            [12] 2119 	mov	a,sp
      00094A 24 FA            [12] 2120 	add	a,#0xfa
      00094C F5 81            [12] 2121 	mov	sp,a
                                   2122 ;	main.c:205: printf("\n\rbuffer_end_add=%p",buffer[1]+buffer_start_size-1); //display required contents of buffer_1 on heap
      00094E 90r10rD8         [24] 2123 	mov	dptr,#(_buffer + 0x0003)
      000951 E0               [24] 2124 	movx	a,@dptr
      000952 FD               [12] 2125 	mov	r5,a
      000953 A3               [24] 2126 	inc	dptr
      000954 E0               [24] 2127 	movx	a,@dptr
      000955 FE               [12] 2128 	mov	r6,a
      000956 A3               [24] 2129 	inc	dptr
      000957 E0               [24] 2130 	movx	a,@dptr
      000958 FF               [12] 2131 	mov	r7,a
      000959 90r10rD2         [24] 2132 	mov	dptr,#_buffer_start_size
      00095C E0               [24] 2133 	movx	a,@dptr
      00095D FB               [12] 2134 	mov	r3,a
      00095E A3               [24] 2135 	inc	dptr
      00095F E0               [24] 2136 	movx	a,@dptr
      000960 FC               [12] 2137 	mov	r4,a
      000961 EB               [12] 2138 	mov	a,r3
      000962 2D               [12] 2139 	add	a,r5
      000963 FD               [12] 2140 	mov	r5,a
      000964 EC               [12] 2141 	mov	a,r4
      000965 3E               [12] 2142 	addc	a,r6
      000966 FE               [12] 2143 	mov	r6,a
      000967 1D               [12] 2144 	dec	r5
      000968 BD FF 01         [24] 2145 	cjne	r5,#0xff,00313$
      00096B 1E               [12] 2146 	dec	r6
      00096C                       2147 00313$:
      00096C C0 05            [24] 2148 	push	ar5
      00096E C0 06            [24] 2149 	push	ar6
      000970 C0 07            [24] 2150 	push	ar7
      000972 74r0B            [12] 2151 	mov	a,#___str_33
      000974 C0 E0            [24] 2152 	push	acc
      000976 74s03            [12] 2153 	mov	a,#(___str_33 >> 8)
      000978 C0 E0            [24] 2154 	push	acc
      00097A 74 80            [12] 2155 	mov	a,#0x80
      00097C C0 E0            [24] 2156 	push	acc
      00097E 12r00r00         [24] 2157 	lcall	_printf
      000981 E5 81            [12] 2158 	mov	a,sp
      000983 24 FA            [12] 2159 	add	a,#0xfa
      000985 F5 81            [12] 2160 	mov	sp,a
                                   2161 ;	main.c:206: printf_tiny("\n\rbuffer_free_Space=%d",buffer_free_Space);
      000987 90r12r9B         [24] 2162 	mov	dptr,#_buffer_free_Space
      00098A E0               [24] 2163 	movx	a,@dptr
      00098B C0 E0            [24] 2164 	push	acc
      00098D A3               [24] 2165 	inc	dptr
      00098E E0               [24] 2166 	movx	a,@dptr
      00098F C0 E0            [24] 2167 	push	acc
      000991 74r1F            [12] 2168 	mov	a,#___str_34
      000993 C0 E0            [24] 2169 	push	acc
      000995 74s03            [12] 2170 	mov	a,#(___str_34 >> 8)
      000997 C0 E0            [24] 2171 	push	acc
      000999 12r00r00         [24] 2172 	lcall	_printf_tiny
      00099C E5 81            [12] 2173 	mov	a,sp
      00099E 24 FC            [12] 2174 	add	a,#0xfc
      0009A0 F5 81            [12] 2175 	mov	sp,a
                                   2176 ;	main.c:207: printf_tiny("\n\rno_of_characters=%d\n\r",no_of_characters);
      0009A2 90r12r9D         [24] 2177 	mov	dptr,#_no_of_characters
      0009A5 E0               [24] 2178 	movx	a,@dptr
      0009A6 C0 E0            [24] 2179 	push	acc
      0009A8 A3               [24] 2180 	inc	dptr
      0009A9 E0               [24] 2181 	movx	a,@dptr
      0009AA C0 E0            [24] 2182 	push	acc
      0009AC 74r36            [12] 2183 	mov	a,#___str_35
      0009AE C0 E0            [24] 2184 	push	acc
      0009B0 74s03            [12] 2185 	mov	a,#(___str_35 >> 8)
      0009B2 C0 E0            [24] 2186 	push	acc
      0009B4 12r00r00         [24] 2187 	lcall	_printf_tiny
      0009B7 E5 81            [12] 2188 	mov	a,sp
      0009B9 24 FC            [12] 2189 	add	a,#0xfc
      0009BB F5 81            [12] 2190 	mov	sp,a
      0009BD                       2191 00127$:
                                   2192 ;	main.c:209: printf_tiny("\n\r");
      0009BD 74rFF            [12] 2193 	mov	a,#___str_9
      0009BF C0 E0            [24] 2194 	push	acc
      0009C1 74s00            [12] 2195 	mov	a,#(___str_9 >> 8)
      0009C3 C0 E0            [24] 2196 	push	acc
      0009C5 12r00r00         [24] 2197 	lcall	_printf_tiny
      0009C8 15 81            [12] 2198 	dec	sp
      0009CA 15 81            [12] 2199 	dec	sp
                                   2200 ;	main.c:210: for(i=2; i<=count_plus; i++)
      0009CC 90r0FrA0         [24] 2201 	mov	dptr,#_i
      0009CF 74 02            [12] 2202 	mov	a,#0x02
      0009D1 F0               [24] 2203 	movx	@dptr,a
      0009D2 E4               [12] 2204 	clr	a
      0009D3 A3               [24] 2205 	inc	dptr
      0009D4 F0               [24] 2206 	movx	@dptr,a
      0009D5 90r12r9F         [24] 2207 	mov	dptr,#_function_count1_65536_48
      0009D8 E0               [24] 2208 	movx	a,@dptr
      0009D9 FE               [12] 2209 	mov	r6,a
      0009DA A3               [24] 2210 	inc	dptr
      0009DB E0               [24] 2211 	movx	a,@dptr
      0009DC FF               [12] 2212 	mov	r7,a
      0009DD EE               [12] 2213 	mov	a,r6
      0009DE 24 FF            [12] 2214 	add	a,#0xff
      0009E0 F5*00            [12] 2215 	mov	_function_sloc0_1_0,a
      0009E2 EF               [12] 2216 	mov	a,r7
      0009E3 34 FF            [12] 2217 	addc	a,#0xff
      0009E5 F5*01            [12] 2218 	mov	(_function_sloc0_1_0 + 1),a
      0009E7 AC*02            [24] 2219 	mov	r4,_function_sloc1_1_0
      0009E9 AD*03            [24] 2220 	mov	r5,(_function_sloc1_1_0 + 1)
      0009EB                       2221 00154$:
      0009EB 90r0FrA0         [24] 2222 	mov	dptr,#_i
      0009EE E0               [24] 2223 	movx	a,@dptr
      0009EF FA               [12] 2224 	mov	r2,a
      0009F0 A3               [24] 2225 	inc	dptr
      0009F1 E0               [24] 2226 	movx	a,@dptr
      0009F2 FB               [12] 2227 	mov	r3,a
      0009F3 C3               [12] 2228 	clr	c
      0009F4 EC               [12] 2229 	mov	a,r4
      0009F5 9A               [12] 2230 	subb	a,r2
      0009F6 ED               [12] 2231 	mov	a,r5
      0009F7 9B               [12] 2232 	subb	a,r3
      0009F8 50 03            [24] 2233 	jnc	00314$
      0009FA 02r0BrCB         [24] 2234 	ljmp	00130$
      0009FD                       2235 00314$:
                                   2236 ;	main.c:212: if(buffer[i]!=NULL)
      0009FD 90r00r00         [24] 2237 	mov	dptr,#__mulint_PARM_2
      000A00 EA               [12] 2238 	mov	a,r2
      000A01 F0               [24] 2239 	movx	@dptr,a
      000A02 EB               [12] 2240 	mov	a,r3
      000A03 A3               [24] 2241 	inc	dptr
      000A04 F0               [24] 2242 	movx	@dptr,a
      000A05 90 00 03         [24] 2243 	mov	dptr,#0x0003
      000A08 C0 05            [24] 2244 	push	ar5
      000A0A C0 04            [24] 2245 	push	ar4
      000A0C C0 03            [24] 2246 	push	ar3
      000A0E C0 02            [24] 2247 	push	ar2
      000A10 12r00r00         [24] 2248 	lcall	__mulint
      000A13 A8 82            [24] 2249 	mov	r0,dpl
      000A15 A9 83            [24] 2250 	mov	r1,dph
      000A17 D0 02            [24] 2251 	pop	ar2
      000A19 D0 03            [24] 2252 	pop	ar3
      000A1B D0 04            [24] 2253 	pop	ar4
      000A1D D0 05            [24] 2254 	pop	ar5
      000A1F E8               [12] 2255 	mov	a,r0
      000A20 24rD5            [12] 2256 	add	a,#_buffer
      000A22 F5 82            [12] 2257 	mov	dpl,a
      000A24 E9               [12] 2258 	mov	a,r1
      000A25 34s10            [12] 2259 	addc	a,#(_buffer >> 8)
      000A27 F5 83            [12] 2260 	mov	dph,a
      000A29 E0               [24] 2261 	movx	a,@dptr
      000A2A F8               [12] 2262 	mov	r0,a
      000A2B A3               [24] 2263 	inc	dptr
      000A2C E0               [24] 2264 	movx	a,@dptr
      000A2D F9               [12] 2265 	mov	r1,a
      000A2E A3               [24] 2266 	inc	dptr
      000A2F E0               [24] 2267 	movx	a,@dptr
      000A30 FF               [12] 2268 	mov	r7,a
      000A31 E8               [12] 2269 	mov	a,r0
      000A32 49               [12] 2270 	orl	a,r1
      000A33 70 03            [24] 2271 	jnz	00315$
      000A35 02r0BrBC         [24] 2272 	ljmp	00155$
      000A38                       2273 00315$:
                                   2274 ;	main.c:214: buffer_allocated_size=buffer_size[i];
      000A38 EA               [12] 2275 	mov	a,r2
      000A39 2A               [12] 2276 	add	a,r2
      000A3A FE               [12] 2277 	mov	r6,a
      000A3B EB               [12] 2278 	mov	a,r3
      000A3C 33               [12] 2279 	rlc	a
      000A3D FF               [12] 2280 	mov	r7,a
      000A3E EE               [12] 2281 	mov	a,r6
      000A3F 24rA2            [12] 2282 	add	a,#_buffer_size
      000A41 F5 82            [12] 2283 	mov	dpl,a
      000A43 EF               [12] 2284 	mov	a,r7
      000A44 34s0F            [12] 2285 	addc	a,#(_buffer_size >> 8)
      000A46 F5 83            [12] 2286 	mov	dph,a
      000A48 E0               [24] 2287 	movx	a,@dptr
      000A49 FE               [12] 2288 	mov	r6,a
      000A4A A3               [24] 2289 	inc	dptr
      000A4B E0               [24] 2290 	movx	a,@dptr
      000A4C FF               [12] 2291 	mov	r7,a
      000A4D 90r12r97         [24] 2292 	mov	dptr,#_buffer_allocated_size
      000A50 EE               [12] 2293 	mov	a,r6
      000A51 F0               [24] 2294 	movx	@dptr,a
      000A52 EF               [12] 2295 	mov	a,r7
      000A53 A3               [24] 2296 	inc	dptr
      000A54 F0               [24] 2297 	movx	@dptr,a
                                   2298 ;	main.c:215: buffer_free_Space=buffer_allocated_size-buffer_space_filled;
      000A55 90r12r99         [24] 2299 	mov	dptr,#_buffer_space_filled
      000A58 E0               [24] 2300 	movx	a,@dptr
      000A59 F8               [12] 2301 	mov	r0,a
      000A5A A3               [24] 2302 	inc	dptr
      000A5B E0               [24] 2303 	movx	a,@dptr
      000A5C F9               [12] 2304 	mov	r1,a
      000A5D 90r12r9B         [24] 2305 	mov	dptr,#_buffer_free_Space
      000A60 EE               [12] 2306 	mov	a,r6
      000A61 C3               [12] 2307 	clr	c
      000A62 98               [12] 2308 	subb	a,r0
      000A63 F0               [24] 2309 	movx	@dptr,a
      000A64 EF               [12] 2310 	mov	a,r7
      000A65 99               [12] 2311 	subb	a,r1
      000A66 A3               [24] 2312 	inc	dptr
      000A67 F0               [24] 2313 	movx	@dptr,a
                                   2314 ;	main.c:216: no_of_characters=count1-1;
      000A68 90r12r9D         [24] 2315 	mov	dptr,#_no_of_characters
      000A6B E5*00            [12] 2316 	mov	a,_function_sloc0_1_0
      000A6D F0               [24] 2317 	movx	@dptr,a
      000A6E E5*01            [12] 2318 	mov	a,(_function_sloc0_1_0 + 1)
      000A70 A3               [24] 2319 	inc	dptr
      000A71 F0               [24] 2320 	movx	@dptr,a
                                   2321 ;	main.c:217: printf_tiny("\n\n\rbuffer_number=%d",i);       //display contents of buffer_n including size, start addr,
      000A72 C0 05            [24] 2322 	push	ar5
      000A74 C0 04            [24] 2323 	push	ar4
      000A76 C0 02            [24] 2324 	push	ar2
      000A78 C0 03            [24] 2325 	push	ar3
      000A7A 74r5B            [12] 2326 	mov	a,#___str_37
      000A7C C0 E0            [24] 2327 	push	acc
      000A7E 74s03            [12] 2328 	mov	a,#(___str_37 >> 8)
      000A80 C0 E0            [24] 2329 	push	acc
      000A82 12r00r00         [24] 2330 	lcall	_printf_tiny
      000A85 E5 81            [12] 2331 	mov	a,sp
      000A87 24 FC            [12] 2332 	add	a,#0xfc
      000A89 F5 81            [12] 2333 	mov	sp,a
                                   2334 ;	main.c:219: printf_tiny("\n\rbuffer_allocated_size=%d",buffer_allocated_size);
      000A8B 90r12r97         [24] 2335 	mov	dptr,#_buffer_allocated_size
      000A8E E0               [24] 2336 	movx	a,@dptr
      000A8F C0 E0            [24] 2337 	push	acc
      000A91 A3               [24] 2338 	inc	dptr
      000A92 E0               [24] 2339 	movx	a,@dptr
      000A93 C0 E0            [24] 2340 	push	acc
      000A95 74rC1            [12] 2341 	mov	a,#___str_30
      000A97 C0 E0            [24] 2342 	push	acc
      000A99 74s02            [12] 2343 	mov	a,#(___str_30 >> 8)
      000A9B C0 E0            [24] 2344 	push	acc
      000A9D 12r00r00         [24] 2345 	lcall	_printf_tiny
      000AA0 E5 81            [12] 2346 	mov	a,sp
      000AA2 24 FC            [12] 2347 	add	a,#0xfc
      000AA4 F5 81            [12] 2348 	mov	sp,a
                                   2349 ;	main.c:220: printf_tiny("\n\rbuffer_space_filled=%d",0);
      000AA6 E4               [12] 2350 	clr	a
      000AA7 C0 E0            [24] 2351 	push	acc
      000AA9 C0 E0            [24] 2352 	push	acc
      000AAB 74rDC            [12] 2353 	mov	a,#___str_31
      000AAD C0 E0            [24] 2354 	push	acc
      000AAF 74s02            [12] 2355 	mov	a,#(___str_31 >> 8)
      000AB1 C0 E0            [24] 2356 	push	acc
      000AB3 12r00r00         [24] 2357 	lcall	_printf_tiny
      000AB6 E5 81            [12] 2358 	mov	a,sp
      000AB8 24 FC            [12] 2359 	add	a,#0xfc
      000ABA F5 81            [12] 2360 	mov	sp,a
                                   2361 ;	main.c:221: printf("\n\rbuffer_start_add=%p",buffer[i]);
      000ABC 90r0FrA0         [24] 2362 	mov	dptr,#_i
      000ABF E0               [24] 2363 	movx	a,@dptr
      000AC0 FE               [12] 2364 	mov	r6,a
      000AC1 A3               [24] 2365 	inc	dptr
      000AC2 E0               [24] 2366 	movx	a,@dptr
      000AC3 FF               [12] 2367 	mov	r7,a
      000AC4 90r00r00         [24] 2368 	mov	dptr,#__mulint_PARM_2
      000AC7 EE               [12] 2369 	mov	a,r6
      000AC8 F0               [24] 2370 	movx	@dptr,a
      000AC9 EF               [12] 2371 	mov	a,r7
      000ACA A3               [24] 2372 	inc	dptr
      000ACB F0               [24] 2373 	movx	@dptr,a
      000ACC 90 00 03         [24] 2374 	mov	dptr,#0x0003
      000ACF 12r00r00         [24] 2375 	lcall	__mulint
      000AD2 AE 82            [24] 2376 	mov	r6,dpl
      000AD4 AF 83            [24] 2377 	mov	r7,dph
      000AD6 EE               [12] 2378 	mov	a,r6
      000AD7 24rD5            [12] 2379 	add	a,#_buffer
      000AD9 F5 82            [12] 2380 	mov	dpl,a
      000ADB EF               [12] 2381 	mov	a,r7
      000ADC 34s10            [12] 2382 	addc	a,#(_buffer >> 8)
      000ADE F5 83            [12] 2383 	mov	dph,a
      000AE0 E0               [24] 2384 	movx	a,@dptr
      000AE1 FB               [12] 2385 	mov	r3,a
      000AE2 A3               [24] 2386 	inc	dptr
      000AE3 E0               [24] 2387 	movx	a,@dptr
      000AE4 FE               [12] 2388 	mov	r6,a
      000AE5 A3               [24] 2389 	inc	dptr
      000AE6 E0               [24] 2390 	movx	a,@dptr
      000AE7 FF               [12] 2391 	mov	r7,a
      000AE8 C0 03            [24] 2392 	push	ar3
      000AEA C0 06            [24] 2393 	push	ar6
      000AEC C0 07            [24] 2394 	push	ar7
      000AEE 74rF5            [12] 2395 	mov	a,#___str_32
      000AF0 C0 E0            [24] 2396 	push	acc
      000AF2 74s02            [12] 2397 	mov	a,#(___str_32 >> 8)
      000AF4 C0 E0            [24] 2398 	push	acc
      000AF6 74 80            [12] 2399 	mov	a,#0x80
      000AF8 C0 E0            [24] 2400 	push	acc
      000AFA 12r00r00         [24] 2401 	lcall	_printf
      000AFD E5 81            [12] 2402 	mov	a,sp
      000AFF 24 FA            [12] 2403 	add	a,#0xfa
      000B01 F5 81            [12] 2404 	mov	sp,a
      000B03 D0 04            [24] 2405 	pop	ar4
      000B05 D0 05            [24] 2406 	pop	ar5
                                   2407 ;	main.c:222: printf("\n\rbuffer_end_add=%p",buffer[i]+buffer_size[i]-1);  //display required contents of buffer_n on heap
      000B07 90r0FrA0         [24] 2408 	mov	dptr,#_i
      000B0A E0               [24] 2409 	movx	a,@dptr
      000B0B FE               [12] 2410 	mov	r6,a
      000B0C A3               [24] 2411 	inc	dptr
      000B0D E0               [24] 2412 	movx	a,@dptr
      000B0E FF               [12] 2413 	mov	r7,a
      000B0F 90r00r00         [24] 2414 	mov	dptr,#__mulint_PARM_2
      000B12 EE               [12] 2415 	mov	a,r6
      000B13 F0               [24] 2416 	movx	@dptr,a
      000B14 EF               [12] 2417 	mov	a,r7
      000B15 A3               [24] 2418 	inc	dptr
      000B16 F0               [24] 2419 	movx	@dptr,a
      000B17 90 00 03         [24] 2420 	mov	dptr,#0x0003
      000B1A C0 07            [24] 2421 	push	ar7
      000B1C C0 06            [24] 2422 	push	ar6
      000B1E C0 05            [24] 2423 	push	ar5
      000B20 C0 04            [24] 2424 	push	ar4
      000B22 12r00r00         [24] 2425 	lcall	__mulint
      000B25 AA 82            [24] 2426 	mov	r2,dpl
      000B27 AB 83            [24] 2427 	mov	r3,dph
      000B29 D0 04            [24] 2428 	pop	ar4
      000B2B D0 05            [24] 2429 	pop	ar5
      000B2D D0 06            [24] 2430 	pop	ar6
      000B2F D0 07            [24] 2431 	pop	ar7
      000B31 EA               [12] 2432 	mov	a,r2
      000B32 24rD5            [12] 2433 	add	a,#_buffer
      000B34 F5 82            [12] 2434 	mov	dpl,a
      000B36 EB               [12] 2435 	mov	a,r3
      000B37 34s10            [12] 2436 	addc	a,#(_buffer >> 8)
      000B39 F5 83            [12] 2437 	mov	dph,a
      000B3B E0               [24] 2438 	movx	a,@dptr
      000B3C F9               [12] 2439 	mov	r1,a
      000B3D A3               [24] 2440 	inc	dptr
      000B3E E0               [24] 2441 	movx	a,@dptr
      000B3F FA               [12] 2442 	mov	r2,a
      000B40 A3               [24] 2443 	inc	dptr
      000B41 E0               [24] 2444 	movx	a,@dptr
      000B42 FB               [12] 2445 	mov	r3,a
      000B43 EE               [12] 2446 	mov	a,r6
      000B44 2E               [12] 2447 	add	a,r6
      000B45 FE               [12] 2448 	mov	r6,a
      000B46 EF               [12] 2449 	mov	a,r7
      000B47 33               [12] 2450 	rlc	a
      000B48 FF               [12] 2451 	mov	r7,a
      000B49 EE               [12] 2452 	mov	a,r6
      000B4A 24rA2            [12] 2453 	add	a,#_buffer_size
      000B4C F5 82            [12] 2454 	mov	dpl,a
      000B4E EF               [12] 2455 	mov	a,r7
      000B4F 34s0F            [12] 2456 	addc	a,#(_buffer_size >> 8)
      000B51 F5 83            [12] 2457 	mov	dph,a
      000B53 E0               [24] 2458 	movx	a,@dptr
      000B54 FE               [12] 2459 	mov	r6,a
      000B55 A3               [24] 2460 	inc	dptr
      000B56 E0               [24] 2461 	movx	a,@dptr
      000B57 FF               [12] 2462 	mov	r7,a
      000B58 EE               [12] 2463 	mov	a,r6
      000B59 29               [12] 2464 	add	a,r1
      000B5A F9               [12] 2465 	mov	r1,a
      000B5B EF               [12] 2466 	mov	a,r7
      000B5C 3A               [12] 2467 	addc	a,r2
      000B5D FA               [12] 2468 	mov	r2,a
      000B5E 19               [12] 2469 	dec	r1
      000B5F B9 FF 01         [24] 2470 	cjne	r1,#0xff,00316$
      000B62 1A               [12] 2471 	dec	r2
      000B63                       2472 00316$:
      000B63 C0 05            [24] 2473 	push	ar5
      000B65 C0 04            [24] 2474 	push	ar4
      000B67 C0 01            [24] 2475 	push	ar1
      000B69 C0 02            [24] 2476 	push	ar2
      000B6B C0 03            [24] 2477 	push	ar3
      000B6D 74r0B            [12] 2478 	mov	a,#___str_33
      000B6F C0 E0            [24] 2479 	push	acc
      000B71 74s03            [12] 2480 	mov	a,#(___str_33 >> 8)
      000B73 C0 E0            [24] 2481 	push	acc
      000B75 74 80            [12] 2482 	mov	a,#0x80
      000B77 C0 E0            [24] 2483 	push	acc
      000B79 12r00r00         [24] 2484 	lcall	_printf
      000B7C E5 81            [12] 2485 	mov	a,sp
      000B7E 24 FA            [12] 2486 	add	a,#0xfa
      000B80 F5 81            [12] 2487 	mov	sp,a
                                   2488 ;	main.c:223: printf_tiny("\n\rbuffer_free_Space=%d",buffer_free_Space);
      000B82 90r12r9B         [24] 2489 	mov	dptr,#_buffer_free_Space
      000B85 E0               [24] 2490 	movx	a,@dptr
      000B86 C0 E0            [24] 2491 	push	acc
      000B88 A3               [24] 2492 	inc	dptr
      000B89 E0               [24] 2493 	movx	a,@dptr
      000B8A C0 E0            [24] 2494 	push	acc
      000B8C 74r1F            [12] 2495 	mov	a,#___str_34
      000B8E C0 E0            [24] 2496 	push	acc
      000B90 74s03            [12] 2497 	mov	a,#(___str_34 >> 8)
      000B92 C0 E0            [24] 2498 	push	acc
      000B94 12r00r00         [24] 2499 	lcall	_printf_tiny
      000B97 E5 81            [12] 2500 	mov	a,sp
      000B99 24 FC            [12] 2501 	add	a,#0xfc
      000B9B F5 81            [12] 2502 	mov	sp,a
                                   2503 ;	main.c:224: printf_tiny("\n\rno_of_characters=%d\n\r",no_of_characters);
      000B9D 90r12r9D         [24] 2504 	mov	dptr,#_no_of_characters
      000BA0 E0               [24] 2505 	movx	a,@dptr
      000BA1 C0 E0            [24] 2506 	push	acc
      000BA3 A3               [24] 2507 	inc	dptr
      000BA4 E0               [24] 2508 	movx	a,@dptr
      000BA5 C0 E0            [24] 2509 	push	acc
      000BA7 74r36            [12] 2510 	mov	a,#___str_35
      000BA9 C0 E0            [24] 2511 	push	acc
      000BAB 74s03            [12] 2512 	mov	a,#(___str_35 >> 8)
      000BAD C0 E0            [24] 2513 	push	acc
      000BAF 12r00r00         [24] 2514 	lcall	_printf_tiny
      000BB2 E5 81            [12] 2515 	mov	a,sp
      000BB4 24 FC            [12] 2516 	add	a,#0xfc
      000BB6 F5 81            [12] 2517 	mov	sp,a
      000BB8 D0 04            [24] 2518 	pop	ar4
      000BBA D0 05            [24] 2519 	pop	ar5
      000BBC                       2520 00155$:
                                   2521 ;	main.c:210: for(i=2; i<=count_plus; i++)
      000BBC 90r0FrA0         [24] 2522 	mov	dptr,#_i
      000BBF E0               [24] 2523 	movx	a,@dptr
      000BC0 24 01            [12] 2524 	add	a,#0x01
      000BC2 F0               [24] 2525 	movx	@dptr,a
      000BC3 A3               [24] 2526 	inc	dptr
      000BC4 E0               [24] 2527 	movx	a,@dptr
      000BC5 34 00            [12] 2528 	addc	a,#0x00
      000BC7 F0               [24] 2529 	movx	@dptr,a
      000BC8 02r09rEB         [24] 2530 	ljmp	00154$
      000BCB                       2531 00130$:
                                   2532 ;	main.c:227: printf_tiny("\n\r");
      000BCB 74rFF            [12] 2533 	mov	a,#___str_9
      000BCD C0 E0            [24] 2534 	push	acc
      000BCF 74s00            [12] 2535 	mov	a,#(___str_9 >> 8)
      000BD1 C0 E0            [24] 2536 	push	acc
      000BD3 12r00r00         [24] 2537 	lcall	_printf_tiny
      000BD6 15 81            [12] 2538 	dec	sp
      000BD8 15 81            [12] 2539 	dec	sp
                                   2540 ;	main.c:228: for (i=0; i<count2; i++)     //display all characters when ? is entered present in buffer_0
      000BDA 90r0FrA0         [24] 2541 	mov	dptr,#_i
      000BDD E4               [12] 2542 	clr	a
      000BDE F0               [24] 2543 	movx	@dptr,a
      000BDF A3               [24] 2544 	inc	dptr
      000BE0 F0               [24] 2545 	movx	@dptr,a
      000BE1 90r12rA1         [24] 2546 	mov	dptr,#_function_count2_65536_48
      000BE4 E0               [24] 2547 	movx	a,@dptr
      000BE5 FE               [12] 2548 	mov	r6,a
      000BE6 A3               [24] 2549 	inc	dptr
      000BE7 E0               [24] 2550 	movx	a,@dptr
      000BE8 FF               [12] 2551 	mov	r7,a
      000BE9                       2552 00157$:
      000BE9 90r0FrA0         [24] 2553 	mov	dptr,#_i
      000BEC E0               [24] 2554 	movx	a,@dptr
      000BED FC               [12] 2555 	mov	r4,a
      000BEE A3               [24] 2556 	inc	dptr
      000BEF E0               [24] 2557 	movx	a,@dptr
      000BF0 FD               [12] 2558 	mov	r5,a
      000BF1 C3               [12] 2559 	clr	c
      000BF2 EC               [12] 2560 	mov	a,r4
      000BF3 9E               [12] 2561 	subb	a,r6
      000BF4 ED               [12] 2562 	mov	a,r5
      000BF5 9F               [12] 2563 	subb	a,r7
      000BF6 50 71            [24] 2564 	jnc	00133$
                                   2565 ;	main.c:230: if (i%16==0)
      000BF8 EC               [12] 2566 	mov	a,r4
      000BF9 54 0F            [12] 2567 	anl	a,#0x0f
      000BFB 70 17            [24] 2568 	jnz	00132$
                                   2569 ;	main.c:232: printf_tiny("\n\r");
      000BFD C0 07            [24] 2570 	push	ar7
      000BFF C0 06            [24] 2571 	push	ar6
      000C01 74rFF            [12] 2572 	mov	a,#___str_9
      000C03 C0 E0            [24] 2573 	push	acc
      000C05 74s00            [12] 2574 	mov	a,#(___str_9 >> 8)
      000C07 C0 E0            [24] 2575 	push	acc
      000C09 12r00r00         [24] 2576 	lcall	_printf_tiny
      000C0C 15 81            [12] 2577 	dec	sp
      000C0E 15 81            [12] 2578 	dec	sp
      000C10 D0 06            [24] 2579 	pop	ar6
      000C12 D0 07            [24] 2580 	pop	ar7
      000C14                       2581 00132$:
                                   2582 ;	main.c:234: printf("%c  ",buffer[0][i]);
      000C14 90r10rD5         [24] 2583 	mov	dptr,#_buffer
      000C17 E0               [24] 2584 	movx	a,@dptr
      000C18 FB               [12] 2585 	mov	r3,a
      000C19 A3               [24] 2586 	inc	dptr
      000C1A E0               [24] 2587 	movx	a,@dptr
      000C1B FC               [12] 2588 	mov	r4,a
      000C1C A3               [24] 2589 	inc	dptr
      000C1D E0               [24] 2590 	movx	a,@dptr
      000C1E FD               [12] 2591 	mov	r5,a
      000C1F 90r0FrA0         [24] 2592 	mov	dptr,#_i
      000C22 E0               [24] 2593 	movx	a,@dptr
      000C23 F9               [12] 2594 	mov	r1,a
      000C24 A3               [24] 2595 	inc	dptr
      000C25 E0               [24] 2596 	movx	a,@dptr
      000C26 FA               [12] 2597 	mov	r2,a
      000C27 E9               [12] 2598 	mov	a,r1
      000C28 2B               [12] 2599 	add	a,r3
      000C29 FB               [12] 2600 	mov	r3,a
      000C2A EA               [12] 2601 	mov	a,r2
      000C2B 3C               [12] 2602 	addc	a,r4
      000C2C FC               [12] 2603 	mov	r4,a
      000C2D 8B 82            [24] 2604 	mov	dpl,r3
      000C2F 8C 83            [24] 2605 	mov	dph,r4
      000C31 8D F0            [24] 2606 	mov	b,r5
      000C33 12r00r00         [24] 2607 	lcall	__gptrget
      000C36 FB               [12] 2608 	mov	r3,a
      000C37 7D 00            [12] 2609 	mov	r5,#0x00
      000C39 C0 07            [24] 2610 	push	ar7
      000C3B C0 06            [24] 2611 	push	ar6
      000C3D C0 03            [24] 2612 	push	ar3
      000C3F C0 05            [24] 2613 	push	ar5
      000C41 74r6F            [12] 2614 	mov	a,#___str_38
      000C43 C0 E0            [24] 2615 	push	acc
      000C45 74s03            [12] 2616 	mov	a,#(___str_38 >> 8)
      000C47 C0 E0            [24] 2617 	push	acc
      000C49 74 80            [12] 2618 	mov	a,#0x80
      000C4B C0 E0            [24] 2619 	push	acc
      000C4D 12r00r00         [24] 2620 	lcall	_printf
      000C50 E5 81            [12] 2621 	mov	a,sp
      000C52 24 FB            [12] 2622 	add	a,#0xfb
      000C54 F5 81            [12] 2623 	mov	sp,a
      000C56 D0 06            [24] 2624 	pop	ar6
      000C58 D0 07            [24] 2625 	pop	ar7
                                   2626 ;	main.c:228: for (i=0; i<count2; i++)     //display all characters when ? is entered present in buffer_0
      000C5A 90r0FrA0         [24] 2627 	mov	dptr,#_i
      000C5D E0               [24] 2628 	movx	a,@dptr
      000C5E 24 01            [12] 2629 	add	a,#0x01
      000C60 F0               [24] 2630 	movx	@dptr,a
      000C61 A3               [24] 2631 	inc	dptr
      000C62 E0               [24] 2632 	movx	a,@dptr
      000C63 34 00            [12] 2633 	addc	a,#0x00
      000C65 F0               [24] 2634 	movx	@dptr,a
      000C66 02r0BrE9         [24] 2635 	ljmp	00157$
      000C69                       2636 00133$:
                                   2637 ;	main.c:236: printf_tiny("\n\r");
      000C69 74rFF            [12] 2638 	mov	a,#___str_9
      000C6B C0 E0            [24] 2639 	push	acc
      000C6D 74s00            [12] 2640 	mov	a,#(___str_9 >> 8)
      000C6F C0 E0            [24] 2641 	push	acc
      000C71 12r00r00         [24] 2642 	lcall	_printf_tiny
      000C74 15 81            [12] 2643 	dec	sp
      000C76 15 81            [12] 2644 	dec	sp
                                   2645 ;	main.c:237: for (i=0; i<=count2; i++)      //   empty buffer_0 by making it zero
      000C78 90r0FrA0         [24] 2646 	mov	dptr,#_i
      000C7B E4               [12] 2647 	clr	a
      000C7C F0               [24] 2648 	movx	@dptr,a
      000C7D A3               [24] 2649 	inc	dptr
      000C7E F0               [24] 2650 	movx	@dptr,a
      000C7F 90r12rA1         [24] 2651 	mov	dptr,#_function_count2_65536_48
      000C82 E0               [24] 2652 	movx	a,@dptr
      000C83 FE               [12] 2653 	mov	r6,a
      000C84 A3               [24] 2654 	inc	dptr
      000C85 E0               [24] 2655 	movx	a,@dptr
      000C86 FF               [12] 2656 	mov	r7,a
      000C87                       2657 00159$:
                                   2658 ;	main.c:239: char *temp = buffer[0];
      000C87 90r10rD5         [24] 2659 	mov	dptr,#_buffer
      000C8A E0               [24] 2660 	movx	a,@dptr
      000C8B FB               [12] 2661 	mov	r3,a
      000C8C A3               [24] 2662 	inc	dptr
      000C8D E0               [24] 2663 	movx	a,@dptr
      000C8E FC               [12] 2664 	mov	r4,a
      000C8F A3               [24] 2665 	inc	dptr
      000C90 E0               [24] 2666 	movx	a,@dptr
      000C91 FD               [12] 2667 	mov	r5,a
                                   2668 ;	main.c:240: temp[i]=0;
      000C92 90r0FrA0         [24] 2669 	mov	dptr,#_i
      000C95 E0               [24] 2670 	movx	a,@dptr
      000C96 F9               [12] 2671 	mov	r1,a
      000C97 A3               [24] 2672 	inc	dptr
      000C98 E0               [24] 2673 	movx	a,@dptr
      000C99 FA               [12] 2674 	mov	r2,a
      000C9A E9               [12] 2675 	mov	a,r1
      000C9B 2B               [12] 2676 	add	a,r3
      000C9C FB               [12] 2677 	mov	r3,a
      000C9D EA               [12] 2678 	mov	a,r2
      000C9E 3C               [12] 2679 	addc	a,r4
      000C9F FC               [12] 2680 	mov	r4,a
      000CA0 8B 82            [24] 2681 	mov	dpl,r3
      000CA2 8C 83            [24] 2682 	mov	dph,r4
      000CA4 8D F0            [24] 2683 	mov	b,r5
      000CA6 E4               [12] 2684 	clr	a
      000CA7 12r00r00         [24] 2685 	lcall	__gptrput
                                   2686 ;	main.c:237: for (i=0; i<=count2; i++)      //   empty buffer_0 by making it zero
      000CAA 90r0FrA0         [24] 2687 	mov	dptr,#_i
      000CAD E0               [24] 2688 	movx	a,@dptr
      000CAE 24 01            [12] 2689 	add	a,#0x01
      000CB0 F0               [24] 2690 	movx	@dptr,a
      000CB1 A3               [24] 2691 	inc	dptr
      000CB2 E0               [24] 2692 	movx	a,@dptr
      000CB3 34 00            [12] 2693 	addc	a,#0x00
      000CB5 F0               [24] 2694 	movx	@dptr,a
      000CB6 90r0FrA0         [24] 2695 	mov	dptr,#_i
      000CB9 E0               [24] 2696 	movx	a,@dptr
      000CBA FC               [12] 2697 	mov	r4,a
      000CBB A3               [24] 2698 	inc	dptr
      000CBC E0               [24] 2699 	movx	a,@dptr
      000CBD FD               [12] 2700 	mov	r5,a
      000CBE C3               [12] 2701 	clr	c
      000CBF EE               [12] 2702 	mov	a,r6
      000CC0 9C               [12] 2703 	subb	a,r4
      000CC1 EF               [12] 2704 	mov	a,r7
      000CC2 9D               [12] 2705 	subb	a,r5
      000CC3 50 C2            [24] 2706 	jnc	00159$
                                   2707 ;	main.c:242: count1=0;
      000CC5 90r12r9F         [24] 2708 	mov	dptr,#_function_count1_65536_48
      000CC8 E4               [12] 2709 	clr	a
      000CC9 F0               [24] 2710 	movx	@dptr,a
      000CCA A3               [24] 2711 	inc	dptr
      000CCB F0               [24] 2712 	movx	@dptr,a
                                   2713 ;	main.c:243: count2=0;
      000CCC 90r12rA1         [24] 2714 	mov	dptr,#_function_count2_65536_48
      000CCF F0               [24] 2715 	movx	@dptr,a
      000CD0 A3               [24] 2716 	inc	dptr
      000CD1 F0               [24] 2717 	movx	@dptr,a
                                   2718 ;	main.c:244: break;
      000CD2 02r02r02         [24] 2719 	ljmp	00147$
                                   2720 ;	main.c:247: default:                               //go te next line
      000CD5                       2721 00135$:
                                   2722 ;	main.c:249: printf_tiny("\n\r");
      000CD5 74rFF            [12] 2723 	mov	a,#___str_9
      000CD7 C0 E0            [24] 2724 	push	acc
      000CD9 74s00            [12] 2725 	mov	a,#(___str_9 >> 8)
      000CDB C0 E0            [24] 2726 	push	acc
      000CDD 12r00r00         [24] 2727 	lcall	_printf_tiny
      000CE0 15 81            [12] 2728 	dec	sp
      000CE2 15 81            [12] 2729 	dec	sp
                                   2730 ;	main.c:253: }
                                   2731 ;	main.c:258: }
      000CE4 02r02r02         [24] 2732 	ljmp	00147$
                                   2733 ;------------------------------------------------------------
                                   2734 ;Allocation info for local variables in function 'getnumber'
                                   2735 ;------------------------------------------------------------
                                   2736 ;number                    Allocated with name '_getnumber_number_65536_80'
                                   2737 ;z                         Allocated with name '_getnumber_z_65536_80'
                                   2738 ;------------------------------------------------------------
                                   2739 ;	main.c:260: int getnumber()                                     //function to convert string into integer
                                   2740 ;	-----------------------------------------
                                   2741 ;	 function getnumber
                                   2742 ;	-----------------------------------------
      000CE7                       2743 _getnumber:
                                   2744 ;	main.c:264: gets(number);
      000CE7 90r12rA3         [24] 2745 	mov	dptr,#_getnumber_number_65536_80
      000CEA 75 F0 00         [24] 2746 	mov	b,#0x00
      000CED 12r00r00         [24] 2747 	lcall	_gets
                                   2748 ;	main.c:265: z = atoi(number);                               //take string input through gets and convert into integer through atio
      000CF0 90r12rA3         [24] 2749 	mov	dptr,#_getnumber_number_65536_80
      000CF3 75 F0 00         [24] 2750 	mov	b,#0x00
      000CF6 12r00r00         [24] 2751 	lcall	_atoi
      000CF9 AE 82            [24] 2752 	mov	r6,dpl
      000CFB AF 83            [24] 2753 	mov	r7,dph
                                   2754 ;	main.c:266: printf ("The value entered is %d.\n\r",z);
      000CFD C0 07            [24] 2755 	push	ar7
      000CFF C0 06            [24] 2756 	push	ar6
      000D01 C0 06            [24] 2757 	push	ar6
      000D03 C0 07            [24] 2758 	push	ar7
      000D05 74r74            [12] 2759 	mov	a,#___str_39
      000D07 C0 E0            [24] 2760 	push	acc
      000D09 74s03            [12] 2761 	mov	a,#(___str_39 >> 8)
      000D0B C0 E0            [24] 2762 	push	acc
      000D0D 74 80            [12] 2763 	mov	a,#0x80
      000D0F C0 E0            [24] 2764 	push	acc
      000D11 12r00r00         [24] 2765 	lcall	_printf
      000D14 E5 81            [12] 2766 	mov	a,sp
      000D16 24 FB            [12] 2767 	add	a,#0xfb
      000D18 F5 81            [12] 2768 	mov	sp,a
      000D1A D0 06            [24] 2769 	pop	ar6
      000D1C D0 07            [24] 2770 	pop	ar7
                                   2771 ;	main.c:267: return (z);
      000D1E 8E 82            [24] 2772 	mov	dpl,r6
      000D20 8F 83            [24] 2773 	mov	dph,r7
                                   2774 ;	main.c:268: }
      000D22 22               [24] 2775 	ret
                                   2776 ;------------------------------------------------------------
                                   2777 ;Allocation info for local variables in function 'putchar'
                                   2778 ;------------------------------------------------------------
                                   2779 ;c                         Allocated with name '_putchar_c_65536_81'
                                   2780 ;------------------------------------------------------------
                                   2781 ;	main.c:269: int putchar (int c)
                                   2782 ;	-----------------------------------------
                                   2783 ;	 function putchar
                                   2784 ;	-----------------------------------------
      000D23                       2785 _putchar:
      000D23 AF 83            [24] 2786 	mov	r7,dph
      000D25 E5 82            [12] 2787 	mov	a,dpl
      000D27 90r13r6B         [24] 2788 	mov	dptr,#_putchar_c_65536_81
      000D2A F0               [24] 2789 	movx	@dptr,a
      000D2B EF               [12] 2790 	mov	a,r7
      000D2C A3               [24] 2791 	inc	dptr
      000D2D F0               [24] 2792 	movx	@dptr,a
                                   2793 ;	main.c:271: while (!TI);				// compare asm code generated for these three lines
      000D2E                       2794 00101$:
      000D2E 30 99 FD         [24] 2795 	jnb	_TI,00101$
                                   2796 ;	main.c:273: SBUF = c;  	// load serial port with transmit value
      000D31 90r13r6B         [24] 2797 	mov	dptr,#_putchar_c_65536_81
      000D34 E0               [24] 2798 	movx	a,@dptr
      000D35 FE               [12] 2799 	mov	r6,a
      000D36 A3               [24] 2800 	inc	dptr
      000D37 E0               [24] 2801 	movx	a,@dptr
      000D38 8E 99            [24] 2802 	mov	_SBUF,r6
                                   2803 ;	main.c:274: TI = 0;  	// clear TI flag
                                   2804 ;	assignBit
      000D3A C2 99            [12] 2805 	clr	_TI
                                   2806 ;	main.c:275: return 0;
      000D3C 90 00 00         [24] 2807 	mov	dptr,#0x0000
                                   2808 ;	main.c:276: }
      000D3F 22               [24] 2809 	ret
                                   2810 ;------------------------------------------------------------
                                   2811 ;Allocation info for local variables in function 'getchar'
                                   2812 ;------------------------------------------------------------
                                   2813 ;	main.c:278: int getchar ()
                                   2814 ;	-----------------------------------------
                                   2815 ;	 function getchar
                                   2816 ;	-----------------------------------------
      000D40                       2817 _getchar:
                                   2818 ;	main.c:280: while (!RI);                // compare asm code generated for these three lines
      000D40                       2819 00101$:
                                   2820 ;	main.c:282: RI = 0;			// clear RI flag
                                   2821 ;	assignBit
      000D40 10 98 02         [24] 2822 	jbc	_RI,00114$
      000D43 80 FB            [24] 2823 	sjmp	00101$
      000D45                       2824 00114$:
                                   2825 ;	main.c:283: return SBUF;  	// return character from SBUF
      000D45 AE 99            [24] 2826 	mov	r6,_SBUF
      000D47 7F 00            [12] 2827 	mov	r7,#0x00
      000D49 8E 82            [24] 2828 	mov	dpl,r6
      000D4B 8F 83            [24] 2829 	mov	dph,r7
                                   2830 ;	main.c:284: }
      000D4D 22               [24] 2831 	ret
                                   2832 	.area CSEG    (CODE)
                                   2833 	.area CONST   (CODE)
      000000                       2834 ___sdcc_heap_size:
      000000 A0 0F                 2835 	.byte #0xa0, #0x0f	; 4000
                                   2836 	.area CONST   (CODE)
      000002                       2837 ___str_0:
      000002 53 70 65 63 69 66 79  2838 	.ascii "Specify the buffer size"
             20 74 68 65 20 62 75
             66 66 65 72 20 73 69
             7A 65
      000019 0A                    2839 	.db 0x0a
      00001A 0D                    2840 	.db 0x0d
      00001B 00                    2841 	.db 0x00
                                   2842 	.area CSEG    (CODE)
                                   2843 	.area CONST   (CODE)
      00001C                       2844 ___str_1:
      00001C 49 6E 76 61 6C 69 64  2845 	.ascii "Invalid buffer size"
             20 62 75 66 66 65 72
             20 73 69 7A 65
      00002F 0A                    2846 	.db 0x0a
      000030 0D                    2847 	.db 0x0d
      000031 00                    2848 	.db 0x00
                                   2849 	.area CSEG    (CODE)
                                   2850 	.area CONST   (CODE)
      000032                       2851 ___str_2:
      000032 45 6E 74 65 72 20 61  2852 	.ascii "Enter a new buffer size"
             20 6E 65 77 20 62 75
             66 66 65 72 20 73 69
             7A 65
      000049 0A                    2853 	.db 0x0a
      00004A 0D                    2854 	.db 0x0d
      00004B 00                    2855 	.db 0x00
                                   2856 	.area CSEG    (CODE)
                                   2857 	.area CONST   (CODE)
      00004C                       2858 ___str_3:
      00004C 41 64 64 72 65 73 73  2859 	.ascii "Address of buffer_0=%p"
             20 6F 66 20 62 75 66
             66 65 72 5F 30 3D 25
             70
      000062 0A                    2860 	.db 0x0a
      000063 0D                    2861 	.db 0x0d
      000064 00                    2862 	.db 0x00
                                   2863 	.area CSEG    (CODE)
                                   2864 	.area CONST   (CODE)
      000065                       2865 ___str_4:
      000065 41 64 64 72 65 73 73  2866 	.ascii "Address of buffer_1=%p"
             20 6F 66 20 62 75 66
             66 65 72 5F 31 3D 25
             70
      00007B 0A                    2867 	.db 0x0a
      00007C 0D                    2868 	.db 0x0d
      00007D 00                    2869 	.db 0x00
                                   2870 	.area CSEG    (CODE)
                                   2871 	.area CONST   (CODE)
      00007E                       2872 ___str_5:
      00007E 45 72 72 6F 72 2E 20  2873 	.ascii "Error. Not enough space available for both buffers"
             4E 6F 74 20 65 6E 6F
             75 67 68 20 73 70 61
             63 65 20 61 76 61 69
             6C 61 62 6C 65 20 66
             6F 72 20 62 6F 74 68
             20 62 75 66 66 65 72
             73
      0000B0 0A                    2874 	.db 0x0a
      0000B1 0D                    2875 	.db 0x0d
      0000B2 00                    2876 	.db 0x00
                                   2877 	.area CSEG    (CODE)
                                   2878 	.area CONST   (CODE)
      0000B3                       2879 ___str_6:
      0000B3 46 72 65 65 20 62 6F  2880 	.ascii "Free both buffers"
             74 68 20 62 75 66 66
             65 72 73
      0000C4 0A                    2881 	.db 0x0a
      0000C5 0D                    2882 	.db 0x0d
      0000C6 00                    2883 	.db 0x00
                                   2884 	.area CSEG    (CODE)
                                   2885 	.area CONST   (CODE)
      0000C7                       2886 ___str_7:
      0000C7 50 72 69 6E 74 20 61  2887 	.ascii "Print a smaller buffer size"
             20 73 6D 61 6C 6C 65
             72 20 62 75 66 66 65
             72 20 73 69 7A 65
      0000E2 0A                    2888 	.db 0x0a
      0000E3 0D                    2889 	.db 0x0d
      0000E4 00                    2890 	.db 0x00
                                   2891 	.area CSEG    (CODE)
                                   2892 	.area CONST   (CODE)
      0000E5                       2893 ___str_8:
      0000E5 0A                    2894 	.db 0x0a
      0000E6 0A                    2895 	.db 0x0a
      0000E7 0D                    2896 	.db 0x0d
      0000E8 65 6E 74 65 72 20 74  2897 	.ascii "enter the characters"
             68 65 20 63 68 61 72
             61 63 74 65 72 73
      0000FC 0A                    2898 	.db 0x0a
      0000FD 0D                    2899 	.db 0x0d
      0000FE 00                    2900 	.db 0x00
                                   2901 	.area CSEG    (CODE)
                                   2902 	.area CONST   (CODE)
      0000FF                       2903 ___str_9:
      0000FF 0A                    2904 	.db 0x0a
      000100 0D                    2905 	.db 0x0d
      000101 00                    2906 	.db 0x00
                                   2907 	.area CSEG    (CODE)
                                   2908 	.area CONST   (CODE)
      000102                       2909 ___str_10:
      000102 0A                    2910 	.db 0x0a
      000103 0D                    2911 	.db 0x0d
      000104 61 73 63 69 69 20 76  2912 	.ascii "ascii value=%d"
             61 6C 75 65 3D 25 64
      000112 0A                    2913 	.db 0x0a
      000113 0D                    2914 	.db 0x0d
      000114 00                    2915 	.db 0x00
                                   2916 	.area CSEG    (CODE)
                                   2917 	.area CONST   (CODE)
      000115                       2918 ___str_11:
      000115 42 75 66 66 65 72 20  2919 	.ascii "Buffer is full"
             69 73 20 66 75 6C 6C
      000123 0A                    2920 	.db 0x0a
      000124 0D                    2921 	.db 0x0d
      000125 00                    2922 	.db 0x00
                                   2923 	.area CSEG    (CODE)
                                   2924 	.area CONST   (CODE)
      000126                       2925 ___str_12:
      000126 61 64 64 20 62 75 66  2926 	.ascii "add buffer_%d"
             66 65 72 5F 25 64
      000133 00                    2927 	.db 0x00
                                   2928 	.area CSEG    (CODE)
                                   2929 	.area CONST   (CODE)
      000134                       2930 ___str_13:
      000134 0A                    2931 	.db 0x0a
      000135 0D                    2932 	.db 0x0d
      000136 62 75 66 66 65 72 5F  2933 	.ascii "buffer_size="
             73 69 7A 65 3D
      000142 00                    2934 	.db 0x00
                                   2935 	.area CSEG    (CODE)
                                   2936 	.area CONST   (CODE)
      000143                       2937 ___str_14:
      000143 0A                    2938 	.db 0x0a
      000144 0D                    2939 	.db 0x0d
      000145 69 6E 76 61 6C 69 64  2940 	.ascii "invalid size"
             20 73 69 7A 65
      000151 00                    2941 	.db 0x00
                                   2942 	.area CSEG    (CODE)
                                   2943 	.area CONST   (CODE)
      000152                       2944 ___str_15:
      000152 0A                    2945 	.db 0x0a
      000153 0D                    2946 	.db 0x0d
      000154 76 61 6C 69 64 20 62  2947 	.ascii "valid buffer_size="
             75 66 66 65 72 5F 73
             69 7A 65 3D
      000166 00                    2948 	.db 0x00
                                   2949 	.area CSEG    (CODE)
                                   2950 	.area CONST   (CODE)
      000167                       2951 ___str_16:
      000167 0A                    2952 	.db 0x0a
      000168 0D                    2953 	.db 0x0d
      000169 61 64 64 72 65 73 73  2954 	.ascii "address of new buffer is=%p"
             20 6F 66 20 6E 65 77
             20 62 75 66 66 65 72
             20 69 73 3D 25 70
      000184 0A                    2955 	.db 0x0a
      000185 0D                    2956 	.db 0x0d
      000186 00                    2957 	.db 0x00
                                   2958 	.area CSEG    (CODE)
                                   2959 	.area CONST   (CODE)
      000187                       2960 ___str_17:
      000187 0A                    2961 	.db 0x0a
      000188 0D                    2962 	.db 0x0d
      000189 4E 6F 20 73 70 61 63  2963 	.ascii "No space for addition of more buffers to the heap"
             65 20 66 6F 72 20 61
             64 64 69 74 69 6F 6E
             20 6F 66 20 6D 6F 72
             65 20 62 75 66 66 65
             72 73 20 74 6F 20 74
             68 65 20 68 65 61 70
      0001BA 0A                    2964 	.db 0x0a
      0001BB 0D                    2965 	.db 0x0d
      0001BC 00                    2966 	.db 0x00
                                   2967 	.area CSEG    (CODE)
                                   2968 	.area CONST   (CODE)
      0001BD                       2969 ___str_18:
      0001BD 0A                    2970 	.db 0x0a
      0001BE 0D                    2971 	.db 0x0d
      0001BF 73 65 6C 65 63 74 20  2972 	.ascii "select a valid buffer= "
             61 20 76 61 6C 69 64
             20 62 75 66 66 65 72
             3D 20
      0001D6 00                    2973 	.db 0x00
                                   2974 	.area CSEG    (CODE)
                                   2975 	.area CONST   (CODE)
      0001D7                       2976 ___str_19:
      0001D7 0A                    2977 	.db 0x0a
      0001D8 0D                    2978 	.db 0x0d
      0001D9 42 75 66 66 65 72 20  2979 	.ascii "Buffer does not exist"
             64 6F 65 73 20 6E 6F
             74 20 65 78 69 73 74
      0001EE 0A                    2980 	.db 0x0a
      0001EF 0D                    2981 	.db 0x0d
      0001F0 00                    2982 	.db 0x00
                                   2983 	.area CSEG    (CODE)
                                   2984 	.area CONST   (CODE)
      0001F1                       2985 ___str_20:
      0001F1 0A                    2986 	.db 0x0a
      0001F2 0D                    2987 	.db 0x0d
      0001F3 62 75 66 66 65 72 25  2988 	.ascii "buffer%d freed"
             64 20 66 72 65 65 64
      000201 0A                    2989 	.db 0x0a
      000202 0D                    2990 	.db 0x0d
      000203 00                    2991 	.db 0x00
                                   2992 	.area CSEG    (CODE)
                                   2993 	.area CONST   (CODE)
      000204                       2994 ___str_21:
      000204 42 75 66 66 65 72 5F  2995 	.ascii "Buffer_0 cannot be deleted"
             30 20 63 61 6E 6E 6F
             74 20 62 65 20 64 65
             6C 65 74 65 64
      00021E 00                    2996 	.db 0x00
                                   2997 	.area CSEG    (CODE)
                                   2998 	.area CONST   (CODE)
      00021F                       2999 ___str_22:
      00021F 25 70                 3000 	.ascii "%p"
      000221 00                    3001 	.db 0x00
                                   3002 	.area CSEG    (CODE)
                                   3003 	.area CONST   (CODE)
      000222                       3004 ___str_23:
      000222 20 25 78              3005 	.ascii " %x"
      000225 00                    3006 	.db 0x00
                                   3007 	.area CSEG    (CODE)
                                   3008 	.area CONST   (CODE)
      000226                       3009 ___str_24:
      000226 0A                    3010 	.db 0x0a
      000227 0D                    3011 	.db 0x0d
      000228 66 72 65 65 20 61 6C  3012 	.ascii "free all buffers and allocate new buffer size "
             6C 20 62 75 66 66 65
             72 73 20 61 6E 64 20
             61 6C 6C 6F 63 61 74
             65 20 6E 65 77 20 62
             75 66 66 65 72 20 73
             69 7A 65 20
      000256 00                    3013 	.db 0x00
                                   3014 	.area CSEG    (CODE)
                                   3015 	.area CONST   (CODE)
      000257                       3016 ___str_25:
      000257 0A                    3017 	.db 0x0a
      000258 0D                    3018 	.db 0x0d
      000259 74 61 6B 65 20 6E 65  3019 	.ascii "take new buffer size"
             77 20 62 75 66 66 65
             72 20 73 69 7A 65
      00026D 0A                    3020 	.db 0x0a
      00026E 0D                    3021 	.db 0x0d
      00026F 00                    3022 	.db 0x00
                                   3023 	.area CSEG    (CODE)
                                   3024 	.area CONST   (CODE)
      000270                       3025 ___str_26:
      000270 61 64 64 72 65 73 73  3026 	.ascii "address of buffer_0=%p"
             20 6F 66 20 62 75 66
             66 65 72 5F 30 3D 25
             70
      000286 0A                    3027 	.db 0x0a
      000287 0D                    3028 	.db 0x0d
      000288 00                    3029 	.db 0x00
                                   3030 	.area CSEG    (CODE)
                                   3031 	.area CONST   (CODE)
      000289                       3032 ___str_27:
      000289 61 64 64 72 65 73 73  3033 	.ascii "address of buffer_1=%p"
             20 6F 66 20 62 75 66
             66 65 72 5F 31 3D 25
             70
      00029F 0A                    3034 	.db 0x0a
      0002A0 0D                    3035 	.db 0x0d
      0002A1 00                    3036 	.db 0x00
                                   3037 	.area CSEG    (CODE)
                                   3038 	.area CONST   (CODE)
      0002A2                       3039 ___str_28:
      0002A2 0A                    3040 	.db 0x0a
      0002A3 0D                    3041 	.db 0x0d
      0002A4 62 75 66 66 65 72 5F  3042 	.ascii "buffer_%d"
             25 64
      0002AD 00                    3043 	.db 0x00
                                   3044 	.area CSEG    (CODE)
                                   3045 	.area CONST   (CODE)
      0002AE                       3046 ___str_29:
      0002AE 0A                    3047 	.db 0x0a
      0002AF 0D                    3048 	.db 0x0d
      0002B0 62 75 66 66 65 72 5F  3049 	.ascii "buffer_number=%d"
             6E 75 6D 62 65 72 3D
             25 64
      0002C0 00                    3050 	.db 0x00
                                   3051 	.area CSEG    (CODE)
                                   3052 	.area CONST   (CODE)
      0002C1                       3053 ___str_30:
      0002C1 0A                    3054 	.db 0x0a
      0002C2 0D                    3055 	.db 0x0d
      0002C3 62 75 66 66 65 72 5F  3056 	.ascii "buffer_allocated_size=%d"
             61 6C 6C 6F 63 61 74
             65 64 5F 73 69 7A 65
             3D 25 64
      0002DB 00                    3057 	.db 0x00
                                   3058 	.area CSEG    (CODE)
                                   3059 	.area CONST   (CODE)
      0002DC                       3060 ___str_31:
      0002DC 0A                    3061 	.db 0x0a
      0002DD 0D                    3062 	.db 0x0d
      0002DE 62 75 66 66 65 72 5F  3063 	.ascii "buffer_space_filled=%d"
             73 70 61 63 65 5F 66
             69 6C 6C 65 64 3D 25
             64
      0002F4 00                    3064 	.db 0x00
                                   3065 	.area CSEG    (CODE)
                                   3066 	.area CONST   (CODE)
      0002F5                       3067 ___str_32:
      0002F5 0A                    3068 	.db 0x0a
      0002F6 0D                    3069 	.db 0x0d
      0002F7 62 75 66 66 65 72 5F  3070 	.ascii "buffer_start_add=%p"
             73 74 61 72 74 5F 61
             64 64 3D 25 70
      00030A 00                    3071 	.db 0x00
                                   3072 	.area CSEG    (CODE)
                                   3073 	.area CONST   (CODE)
      00030B                       3074 ___str_33:
      00030B 0A                    3075 	.db 0x0a
      00030C 0D                    3076 	.db 0x0d
      00030D 62 75 66 66 65 72 5F  3077 	.ascii "buffer_end_add=%p"
             65 6E 64 5F 61 64 64
             3D 25 70
      00031E 00                    3078 	.db 0x00
                                   3079 	.area CSEG    (CODE)
                                   3080 	.area CONST   (CODE)
      00031F                       3081 ___str_34:
      00031F 0A                    3082 	.db 0x0a
      000320 0D                    3083 	.db 0x0d
      000321 62 75 66 66 65 72 5F  3084 	.ascii "buffer_free_Space=%d"
             66 72 65 65 5F 53 70
             61 63 65 3D 25 64
      000335 00                    3085 	.db 0x00
                                   3086 	.area CSEG    (CODE)
                                   3087 	.area CONST   (CODE)
      000336                       3088 ___str_35:
      000336 0A                    3089 	.db 0x0a
      000337 0D                    3090 	.db 0x0d
      000338 6E 6F 5F 6F 66 5F 63  3091 	.ascii "no_of_characters=%d"
             68 61 72 61 63 74 65
             72 73 3D 25 64
      00034B 0A                    3092 	.db 0x0a
      00034C 0D                    3093 	.db 0x0d
      00034D 00                    3094 	.db 0x00
                                   3095 	.area CSEG    (CODE)
                                   3096 	.area CONST   (CODE)
      00034E                       3097 ___str_36:
      00034E 0A                    3098 	.db 0x0a
      00034F 0A                    3099 	.db 0x0a
      000350 0D                    3100 	.db 0x0d
      000351 62 75 66 66 65 72 5F  3101 	.ascii "buffer_%d"
             25 64
      00035A 00                    3102 	.db 0x00
                                   3103 	.area CSEG    (CODE)
                                   3104 	.area CONST   (CODE)
      00035B                       3105 ___str_37:
      00035B 0A                    3106 	.db 0x0a
      00035C 0A                    3107 	.db 0x0a
      00035D 0D                    3108 	.db 0x0d
      00035E 62 75 66 66 65 72 5F  3109 	.ascii "buffer_number=%d"
             6E 75 6D 62 65 72 3D
             25 64
      00036E 00                    3110 	.db 0x00
                                   3111 	.area CSEG    (CODE)
                                   3112 	.area CONST   (CODE)
      00036F                       3113 ___str_38:
      00036F 25 63 20 20           3114 	.ascii "%c  "
      000373 00                    3115 	.db 0x00
                                   3116 	.area CSEG    (CODE)
                                   3117 	.area CONST   (CODE)
      000374                       3118 ___str_39:
      000374 54 68 65 20 76 61 6C  3119 	.ascii "The value entered is %d."
             75 65 20 65 6E 74 65
             72 65 64 20 69 73 20
             25 64 2E
      00038C 0A                    3120 	.db 0x0a
      00038D 0D                    3121 	.db 0x0d
      00038E 00                    3122 	.db 0x00
                                   3123 	.area CSEG    (CODE)
                                   3124 	.area XINIT   (CODE)
      000000                       3125 __xinit__buffer0:
      000000 00 00                 3126 	.byte #0x00, #0x00	; 0
      000002                       3127 __xinit__buffer1:
      000002 01 00                 3128 	.byte #0x01, #0x00	; 1
                                   3129 	.area CABS    (ABS,CODE)
