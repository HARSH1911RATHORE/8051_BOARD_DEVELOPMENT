                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _reset
                                     13 	.globl _Sequence_read
                                     14 	.globl _EEPROM_RdByte
                                     15 	.globl _PAGE_Write
                                     16 	.globl _EEPROM_WrByte
                                     17 	.globl _Delay
                                     18 	.globl _strtol
                                     19 	.globl _printf_tiny
                                     20 	.globl _printf
                                     21 	.globl _CY
                                     22 	.globl _AC
                                     23 	.globl _F0
                                     24 	.globl _RS1
                                     25 	.globl _RS0
                                     26 	.globl _OV
                                     27 	.globl _F1
                                     28 	.globl _P
                                     29 	.globl _PS
                                     30 	.globl _PT1
                                     31 	.globl _PX1
                                     32 	.globl _PT0
                                     33 	.globl _PX0
                                     34 	.globl _RD
                                     35 	.globl _WR
                                     36 	.globl _T1
                                     37 	.globl _T0
                                     38 	.globl _INT1
                                     39 	.globl _INT0
                                     40 	.globl _TXD
                                     41 	.globl _RXD
                                     42 	.globl _P3_7
                                     43 	.globl _P3_6
                                     44 	.globl _P3_5
                                     45 	.globl _P3_4
                                     46 	.globl _P3_3
                                     47 	.globl _P3_2
                                     48 	.globl _P3_1
                                     49 	.globl _P3_0
                                     50 	.globl _EA
                                     51 	.globl _ES
                                     52 	.globl _ET1
                                     53 	.globl _EX1
                                     54 	.globl _ET0
                                     55 	.globl _EX0
                                     56 	.globl _P2_7
                                     57 	.globl _P2_6
                                     58 	.globl _P2_5
                                     59 	.globl _P2_4
                                     60 	.globl _P2_3
                                     61 	.globl _P2_2
                                     62 	.globl _P2_1
                                     63 	.globl _P2_0
                                     64 	.globl _SM0
                                     65 	.globl _SM1
                                     66 	.globl _SM2
                                     67 	.globl _REN
                                     68 	.globl _TB8
                                     69 	.globl _RB8
                                     70 	.globl _TI
                                     71 	.globl _RI
                                     72 	.globl _P1_7
                                     73 	.globl _P1_6
                                     74 	.globl _P1_5
                                     75 	.globl _P1_4
                                     76 	.globl _P1_3
                                     77 	.globl _P1_2
                                     78 	.globl _P1_1
                                     79 	.globl _P1_0
                                     80 	.globl _TF1
                                     81 	.globl _TR1
                                     82 	.globl _TF0
                                     83 	.globl _TR0
                                     84 	.globl _IE1
                                     85 	.globl _IT1
                                     86 	.globl _IE0
                                     87 	.globl _IT0
                                     88 	.globl _P0_7
                                     89 	.globl _P0_6
                                     90 	.globl _P0_5
                                     91 	.globl _P0_4
                                     92 	.globl _P0_3
                                     93 	.globl _P0_2
                                     94 	.globl _P0_1
                                     95 	.globl _P0_0
                                     96 	.globl _P5_7
                                     97 	.globl _P5_6
                                     98 	.globl _P5_5
                                     99 	.globl _P5_4
                                    100 	.globl _P5_3
                                    101 	.globl _P5_2
                                    102 	.globl _P5_1
                                    103 	.globl _P5_0
                                    104 	.globl _P4_7
                                    105 	.globl _P4_6
                                    106 	.globl _P4_5
                                    107 	.globl _P4_4
                                    108 	.globl _P4_3
                                    109 	.globl _P4_2
                                    110 	.globl _P4_1
                                    111 	.globl _P4_0
                                    112 	.globl _PX0L
                                    113 	.globl _PT0L
                                    114 	.globl _PX1L
                                    115 	.globl _PT1L
                                    116 	.globl _PSL
                                    117 	.globl _PT2L
                                    118 	.globl _PPCL
                                    119 	.globl _EC
                                    120 	.globl _CCF0
                                    121 	.globl _CCF1
                                    122 	.globl _CCF2
                                    123 	.globl _CCF3
                                    124 	.globl _CCF4
                                    125 	.globl _CR
                                    126 	.globl _CF
                                    127 	.globl _TF2
                                    128 	.globl _EXF2
                                    129 	.globl _RCLK
                                    130 	.globl _TCLK
                                    131 	.globl _EXEN2
                                    132 	.globl _TR2
                                    133 	.globl _C_T2
                                    134 	.globl _CP_RL2
                                    135 	.globl _T2CON_7
                                    136 	.globl _T2CON_6
                                    137 	.globl _T2CON_5
                                    138 	.globl _T2CON_4
                                    139 	.globl _T2CON_3
                                    140 	.globl _T2CON_2
                                    141 	.globl _T2CON_1
                                    142 	.globl _T2CON_0
                                    143 	.globl _PT2
                                    144 	.globl _ET2
                                    145 	.globl _B
                                    146 	.globl _ACC
                                    147 	.globl _PSW
                                    148 	.globl _IP
                                    149 	.globl _P3
                                    150 	.globl _IE
                                    151 	.globl _P2
                                    152 	.globl _SBUF
                                    153 	.globl _SCON
                                    154 	.globl _P1
                                    155 	.globl _TH1
                                    156 	.globl _TH0
                                    157 	.globl _TL1
                                    158 	.globl _TL0
                                    159 	.globl _TMOD
                                    160 	.globl _TCON
                                    161 	.globl _PCON
                                    162 	.globl _DPH
                                    163 	.globl _DPL
                                    164 	.globl _SP
                                    165 	.globl _P0
                                    166 	.globl _EECON
                                    167 	.globl _KBF
                                    168 	.globl _KBE
                                    169 	.globl _KBLS
                                    170 	.globl _BRL
                                    171 	.globl _BDRCON
                                    172 	.globl _T2MOD
                                    173 	.globl _SPDAT
                                    174 	.globl _SPSTA
                                    175 	.globl _SPCON
                                    176 	.globl _SADEN
                                    177 	.globl _SADDR
                                    178 	.globl _WDTPRG
                                    179 	.globl _WDTRST
                                    180 	.globl _P5
                                    181 	.globl _P4
                                    182 	.globl _IPH1
                                    183 	.globl _IPL1
                                    184 	.globl _IPH0
                                    185 	.globl _IPL0
                                    186 	.globl _IEN1
                                    187 	.globl _IEN0
                                    188 	.globl _CMOD
                                    189 	.globl _CL
                                    190 	.globl _CH
                                    191 	.globl _CCON
                                    192 	.globl _CCAPM4
                                    193 	.globl _CCAPM3
                                    194 	.globl _CCAPM2
                                    195 	.globl _CCAPM1
                                    196 	.globl _CCAPM0
                                    197 	.globl _CCAP4L
                                    198 	.globl _CCAP3L
                                    199 	.globl _CCAP2L
                                    200 	.globl _CCAP1L
                                    201 	.globl _CCAP0L
                                    202 	.globl _CCAP4H
                                    203 	.globl _CCAP3H
                                    204 	.globl _CCAP2H
                                    205 	.globl _CCAP1H
                                    206 	.globl _CCAP0H
                                    207 	.globl _CKCON1
                                    208 	.globl _CKCON0
                                    209 	.globl _CKRL
                                    210 	.globl _AUXR1
                                    211 	.globl _AUXR
                                    212 	.globl _TH2
                                    213 	.globl _TL2
                                    214 	.globl _RCAP2H
                                    215 	.globl _RCAP2L
                                    216 	.globl _T2CON
                                    217 	.globl _page_block3
                                    218 	.globl _page_block2
                                    219 	.globl _page_block1
                                    220 	.globl _word_address3
                                    221 	.globl _word_address2
                                    222 	.globl _word_address1
                                    223 	.globl _word_address
                                    224 	.globl _EEPROM_CMD_PAGE
                                    225 	.globl _EEPROM_CMD
                                    226 	.globl _getdata
                                    227 	.globl _getnumber
                                    228 	.globl _putchar
                                    229 	.globl _getchar
                                    230 ;--------------------------------------------------------
                                    231 ; special function registers
                                    232 ;--------------------------------------------------------
                                    233 	.area RSEG    (ABS,DATA)
      000000                        234 	.org 0x0000
                           0000C8   235 _T2CON	=	0x00c8
                           0000CA   236 _RCAP2L	=	0x00ca
                           0000CB   237 _RCAP2H	=	0x00cb
                           0000CC   238 _TL2	=	0x00cc
                           0000CD   239 _TH2	=	0x00cd
                           00008E   240 _AUXR	=	0x008e
                           0000A2   241 _AUXR1	=	0x00a2
                           000097   242 _CKRL	=	0x0097
                           00008F   243 _CKCON0	=	0x008f
                           0000AF   244 _CKCON1	=	0x00af
                           0000FA   245 _CCAP0H	=	0x00fa
                           0000FB   246 _CCAP1H	=	0x00fb
                           0000FC   247 _CCAP2H	=	0x00fc
                           0000FD   248 _CCAP3H	=	0x00fd
                           0000FE   249 _CCAP4H	=	0x00fe
                           0000EA   250 _CCAP0L	=	0x00ea
                           0000EB   251 _CCAP1L	=	0x00eb
                           0000EC   252 _CCAP2L	=	0x00ec
                           0000ED   253 _CCAP3L	=	0x00ed
                           0000EE   254 _CCAP4L	=	0x00ee
                           0000DA   255 _CCAPM0	=	0x00da
                           0000DB   256 _CCAPM1	=	0x00db
                           0000DC   257 _CCAPM2	=	0x00dc
                           0000DD   258 _CCAPM3	=	0x00dd
                           0000DE   259 _CCAPM4	=	0x00de
                           0000D8   260 _CCON	=	0x00d8
                           0000F9   261 _CH	=	0x00f9
                           0000E9   262 _CL	=	0x00e9
                           0000D9   263 _CMOD	=	0x00d9
                           0000A8   264 _IEN0	=	0x00a8
                           0000B1   265 _IEN1	=	0x00b1
                           0000B8   266 _IPL0	=	0x00b8
                           0000B7   267 _IPH0	=	0x00b7
                           0000B2   268 _IPL1	=	0x00b2
                           0000B3   269 _IPH1	=	0x00b3
                           0000C0   270 _P4	=	0x00c0
                           0000E8   271 _P5	=	0x00e8
                           0000A6   272 _WDTRST	=	0x00a6
                           0000A7   273 _WDTPRG	=	0x00a7
                           0000A9   274 _SADDR	=	0x00a9
                           0000B9   275 _SADEN	=	0x00b9
                           0000C3   276 _SPCON	=	0x00c3
                           0000C4   277 _SPSTA	=	0x00c4
                           0000C5   278 _SPDAT	=	0x00c5
                           0000C9   279 _T2MOD	=	0x00c9
                           00009B   280 _BDRCON	=	0x009b
                           00009A   281 _BRL	=	0x009a
                           00009C   282 _KBLS	=	0x009c
                           00009D   283 _KBE	=	0x009d
                           00009E   284 _KBF	=	0x009e
                           0000D2   285 _EECON	=	0x00d2
                           000080   286 _P0	=	0x0080
                           000081   287 _SP	=	0x0081
                           000082   288 _DPL	=	0x0082
                           000083   289 _DPH	=	0x0083
                           000087   290 _PCON	=	0x0087
                           000088   291 _TCON	=	0x0088
                           000089   292 _TMOD	=	0x0089
                           00008A   293 _TL0	=	0x008a
                           00008B   294 _TL1	=	0x008b
                           00008C   295 _TH0	=	0x008c
                           00008D   296 _TH1	=	0x008d
                           000090   297 _P1	=	0x0090
                           000098   298 _SCON	=	0x0098
                           000099   299 _SBUF	=	0x0099
                           0000A0   300 _P2	=	0x00a0
                           0000A8   301 _IE	=	0x00a8
                           0000B0   302 _P3	=	0x00b0
                           0000B8   303 _IP	=	0x00b8
                           0000D0   304 _PSW	=	0x00d0
                           0000E0   305 _ACC	=	0x00e0
                           0000F0   306 _B	=	0x00f0
                                    307 ;--------------------------------------------------------
                                    308 ; special function bits
                                    309 ;--------------------------------------------------------
                                    310 	.area RSEG    (ABS,DATA)
      000000                        311 	.org 0x0000
                           0000AD   312 _ET2	=	0x00ad
                           0000BD   313 _PT2	=	0x00bd
                           0000C8   314 _T2CON_0	=	0x00c8
                           0000C9   315 _T2CON_1	=	0x00c9
                           0000CA   316 _T2CON_2	=	0x00ca
                           0000CB   317 _T2CON_3	=	0x00cb
                           0000CC   318 _T2CON_4	=	0x00cc
                           0000CD   319 _T2CON_5	=	0x00cd
                           0000CE   320 _T2CON_6	=	0x00ce
                           0000CF   321 _T2CON_7	=	0x00cf
                           0000C8   322 _CP_RL2	=	0x00c8
                           0000C9   323 _C_T2	=	0x00c9
                           0000CA   324 _TR2	=	0x00ca
                           0000CB   325 _EXEN2	=	0x00cb
                           0000CC   326 _TCLK	=	0x00cc
                           0000CD   327 _RCLK	=	0x00cd
                           0000CE   328 _EXF2	=	0x00ce
                           0000CF   329 _TF2	=	0x00cf
                           0000DF   330 _CF	=	0x00df
                           0000DE   331 _CR	=	0x00de
                           0000DC   332 _CCF4	=	0x00dc
                           0000DB   333 _CCF3	=	0x00db
                           0000DA   334 _CCF2	=	0x00da
                           0000D9   335 _CCF1	=	0x00d9
                           0000D8   336 _CCF0	=	0x00d8
                           0000AE   337 _EC	=	0x00ae
                           0000BE   338 _PPCL	=	0x00be
                           0000BD   339 _PT2L	=	0x00bd
                           0000BC   340 _PSL	=	0x00bc
                           0000BB   341 _PT1L	=	0x00bb
                           0000BA   342 _PX1L	=	0x00ba
                           0000B9   343 _PT0L	=	0x00b9
                           0000B8   344 _PX0L	=	0x00b8
                           0000C0   345 _P4_0	=	0x00c0
                           0000C1   346 _P4_1	=	0x00c1
                           0000C2   347 _P4_2	=	0x00c2
                           0000C3   348 _P4_3	=	0x00c3
                           0000C4   349 _P4_4	=	0x00c4
                           0000C5   350 _P4_5	=	0x00c5
                           0000C6   351 _P4_6	=	0x00c6
                           0000C7   352 _P4_7	=	0x00c7
                           0000E8   353 _P5_0	=	0x00e8
                           0000E9   354 _P5_1	=	0x00e9
                           0000EA   355 _P5_2	=	0x00ea
                           0000EB   356 _P5_3	=	0x00eb
                           0000EC   357 _P5_4	=	0x00ec
                           0000ED   358 _P5_5	=	0x00ed
                           0000EE   359 _P5_6	=	0x00ee
                           0000EF   360 _P5_7	=	0x00ef
                           000080   361 _P0_0	=	0x0080
                           000081   362 _P0_1	=	0x0081
                           000082   363 _P0_2	=	0x0082
                           000083   364 _P0_3	=	0x0083
                           000084   365 _P0_4	=	0x0084
                           000085   366 _P0_5	=	0x0085
                           000086   367 _P0_6	=	0x0086
                           000087   368 _P0_7	=	0x0087
                           000088   369 _IT0	=	0x0088
                           000089   370 _IE0	=	0x0089
                           00008A   371 _IT1	=	0x008a
                           00008B   372 _IE1	=	0x008b
                           00008C   373 _TR0	=	0x008c
                           00008D   374 _TF0	=	0x008d
                           00008E   375 _TR1	=	0x008e
                           00008F   376 _TF1	=	0x008f
                           000090   377 _P1_0	=	0x0090
                           000091   378 _P1_1	=	0x0091
                           000092   379 _P1_2	=	0x0092
                           000093   380 _P1_3	=	0x0093
                           000094   381 _P1_4	=	0x0094
                           000095   382 _P1_5	=	0x0095
                           000096   383 _P1_6	=	0x0096
                           000097   384 _P1_7	=	0x0097
                           000098   385 _RI	=	0x0098
                           000099   386 _TI	=	0x0099
                           00009A   387 _RB8	=	0x009a
                           00009B   388 _TB8	=	0x009b
                           00009C   389 _REN	=	0x009c
                           00009D   390 _SM2	=	0x009d
                           00009E   391 _SM1	=	0x009e
                           00009F   392 _SM0	=	0x009f
                           0000A0   393 _P2_0	=	0x00a0
                           0000A1   394 _P2_1	=	0x00a1
                           0000A2   395 _P2_2	=	0x00a2
                           0000A3   396 _P2_3	=	0x00a3
                           0000A4   397 _P2_4	=	0x00a4
                           0000A5   398 _P2_5	=	0x00a5
                           0000A6   399 _P2_6	=	0x00a6
                           0000A7   400 _P2_7	=	0x00a7
                           0000A8   401 _EX0	=	0x00a8
                           0000A9   402 _ET0	=	0x00a9
                           0000AA   403 _EX1	=	0x00aa
                           0000AB   404 _ET1	=	0x00ab
                           0000AC   405 _ES	=	0x00ac
                           0000AF   406 _EA	=	0x00af
                           0000B0   407 _P3_0	=	0x00b0
                           0000B1   408 _P3_1	=	0x00b1
                           0000B2   409 _P3_2	=	0x00b2
                           0000B3   410 _P3_3	=	0x00b3
                           0000B4   411 _P3_4	=	0x00b4
                           0000B5   412 _P3_5	=	0x00b5
                           0000B6   413 _P3_6	=	0x00b6
                           0000B7   414 _P3_7	=	0x00b7
                           0000B0   415 _RXD	=	0x00b0
                           0000B1   416 _TXD	=	0x00b1
                           0000B2   417 _INT0	=	0x00b2
                           0000B3   418 _INT1	=	0x00b3
                           0000B4   419 _T0	=	0x00b4
                           0000B5   420 _T1	=	0x00b5
                           0000B6   421 _WR	=	0x00b6
                           0000B7   422 _RD	=	0x00b7
                           0000B8   423 _PX0	=	0x00b8
                           0000B9   424 _PT0	=	0x00b9
                           0000BA   425 _PX1	=	0x00ba
                           0000BB   426 _PT1	=	0x00bb
                           0000BC   427 _PS	=	0x00bc
                           0000D0   428 _P	=	0x00d0
                           0000D1   429 _F1	=	0x00d1
                           0000D2   430 _OV	=	0x00d2
                           0000D3   431 _RS0	=	0x00d3
                           0000D4   432 _RS1	=	0x00d4
                           0000D5   433 _F0	=	0x00d5
                           0000D6   434 _AC	=	0x00d6
                           0000D7   435 _CY	=	0x00d7
                                    436 ;--------------------------------------------------------
                                    437 ; overlayable register banks
                                    438 ;--------------------------------------------------------
                                    439 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        440 	.ds 8
                                    441 ;--------------------------------------------------------
                                    442 ; internal ram data
                                    443 ;--------------------------------------------------------
                                    444 	.area DSEG    (DATA)
                                    445 ;--------------------------------------------------------
                                    446 ; overlayable items in internal ram 
                                    447 ;--------------------------------------------------------
                                    448 ;--------------------------------------------------------
                                    449 ; Stack segment in internal ram 
                                    450 ;--------------------------------------------------------
                                    451 	.area	SSEG
      000000                        452 __start__stack:
      000000                        453 	.ds	1
                                    454 
                                    455 ;--------------------------------------------------------
                                    456 ; indirectly addressable internal ram data
                                    457 ;--------------------------------------------------------
                                    458 	.area ISEG    (DATA)
                                    459 ;--------------------------------------------------------
                                    460 ; absolute internal ram data
                                    461 ;--------------------------------------------------------
                                    462 	.area IABS    (ABS,DATA)
                                    463 	.area IABS    (ABS,DATA)
                                    464 ;--------------------------------------------------------
                                    465 ; bit data
                                    466 ;--------------------------------------------------------
                                    467 	.area BSEG    (BIT)
                                    468 ;--------------------------------------------------------
                                    469 ; paged external ram data
                                    470 ;--------------------------------------------------------
                                    471 	.area PSEG    (PAG,XDATA)
                                    472 ;--------------------------------------------------------
                                    473 ; external ram data
                                    474 ;--------------------------------------------------------
                                    475 	.area XSEG    (XDATA)
      000000                        476 _getdata_a_65536_57:
      000000                        477 	.ds 3
      000003                        478 _getnumber_a_65536_65:
      000003                        479 	.ds 4
      000007                        480 _main_write_address_327682_83:
      000007                        481 	.ds 2
      000009                        482 _main_data_write_327684_87:
      000009                        483 	.ds 2
      00000B                        484 _main_read_address_327682_102:
      00000B                        485 	.ds 2
      00000D                        486 _main_hex_start_address_327682_108:
      00000D                        487 	.ds 2
      00000F                        488 _main_hex_end_address_327683_111:
      00000F                        489 	.ds 2
      000011                        490 _main_page_address_327682_116:
      000011                        491 	.ds 2
      000013                        492 _main_data_to_write_327684_120:
      000013                        493 	.ds 2
      000015                        494 _putchar_c_65536_125:
      000015                        495 	.ds 2
                                    496 ;--------------------------------------------------------
                                    497 ; absolute external ram data
                                    498 ;--------------------------------------------------------
                                    499 	.area XABS    (ABS,XDATA)
                                    500 ;--------------------------------------------------------
                                    501 ; external initialized ram data
                                    502 ;--------------------------------------------------------
                                    503 	.area XISEG   (XDATA)
      000000                        504 _EEPROM_CMD::
      000000                        505 	.ds 2
      000002                        506 _EEPROM_CMD_PAGE::
      000002                        507 	.ds 2
      000004                        508 _word_address::
      000004                        509 	.ds 2
      000006                        510 _word_address1::
      000006                        511 	.ds 2
      000008                        512 _word_address2::
      000008                        513 	.ds 2
      00000A                        514 _word_address3::
      00000A                        515 	.ds 2
      00000C                        516 _page_block1::
      00000C                        517 	.ds 2
      00000E                        518 _page_block2::
      00000E                        519 	.ds 2
      000010                        520 _page_block3::
      000010                        521 	.ds 2
                                    522 	.area HOME    (CODE)
                                    523 	.area GSINIT0 (CODE)
                                    524 	.area GSINIT1 (CODE)
                                    525 	.area GSINIT2 (CODE)
                                    526 	.area GSINIT3 (CODE)
                                    527 	.area GSINIT4 (CODE)
                                    528 	.area GSINIT5 (CODE)
                                    529 	.area GSINIT  (CODE)
                                    530 	.area GSFINAL (CODE)
                                    531 	.area CSEG    (CODE)
                                    532 ;--------------------------------------------------------
                                    533 ; interrupt vector 
                                    534 ;--------------------------------------------------------
                                    535 	.area HOME    (CODE)
      000000                        536 __interrupt_vect:
      000000 02r00r00         [24]  537 	ljmp	__sdcc_gsinit_startup
                                    538 ;--------------------------------------------------------
                                    539 ; global & static initialisations
                                    540 ;--------------------------------------------------------
                                    541 	.area HOME    (CODE)
                                    542 	.area GSINIT  (CODE)
                                    543 	.area GSFINAL (CODE)
                                    544 	.area GSINIT  (CODE)
                                    545 	.globl __sdcc_gsinit_startup
                                    546 	.globl __sdcc_program_startup
                                    547 	.globl __start__stack
                                    548 	.globl __mcs51_genXINIT
                                    549 	.globl __mcs51_genXRAMCLEAR
                                    550 	.globl __mcs51_genRAMCLEAR
                                    551 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  552 	ljmp	__sdcc_program_startup
                                    553 ;--------------------------------------------------------
                                    554 ; Home
                                    555 ;--------------------------------------------------------
                                    556 	.area HOME    (CODE)
                                    557 	.area HOME    (CODE)
      000003                        558 __sdcc_program_startup:
      000003 02r05r0B         [24]  559 	ljmp	_main
                                    560 ;	return from main will return to caller
                                    561 ;--------------------------------------------------------
                                    562 ; code
                                    563 ;--------------------------------------------------------
                                    564 	.area CSEG    (CODE)
                                    565 ;------------------------------------------------------------
                                    566 ;Allocation info for local variables in function 'getdata'
                                    567 ;------------------------------------------------------------
                                    568 ;a                         Allocated with name '_getdata_a_65536_57'
                                    569 ;z                         Allocated with name '_getdata_z_65536_57'
                                    570 ;c                         Allocated with name '_getdata_c_65536_57'
                                    571 ;b                         Allocated with name '_getdata_b_131073_59'
                                    572 ;b                         Allocated with name '_getdata_b_131073_62'
                                    573 ;------------------------------------------------------------
                                    574 ;	main.c:14: int getdata()
                                    575 ;	-----------------------------------------
                                    576 ;	 function getdata
                                    577 ;	-----------------------------------------
      000000                        578 _getdata:
                           000007   579 	ar7 = 0x07
                           000006   580 	ar6 = 0x06
                           000005   581 	ar5 = 0x05
                           000004   582 	ar4 = 0x04
                           000003   583 	ar3 = 0x03
                           000002   584 	ar2 = 0x02
                           000001   585 	ar1 = 0x01
                           000000   586 	ar0 = 0x00
                                    587 ;	main.c:19: while(1)
      000000                        588 00105$:
                                    589 ;	main.c:21: c=getchar();        //TAKE THE CHARACTER IN VARIABLE C
      000000 12r10r05         [24]  590 	lcall	_getchar
      000003 AE 82            [24]  591 	mov	r6,dpl
                                    592 ;	main.c:22: int b=(int)c;
      000005 8E 05            [24]  593 	mov	ar5,r6
      000007 7F 00            [12]  594 	mov	r7,#0x00
                                    595 ;	main.c:23: if (b==13)          //IF ENTER IS PUT CONTINUE
      000009 BD 0D 05         [24]  596 	cjne	r5,#0x0d,00345$
      00000C BF 00 02         [24]  597 	cjne	r7,#0x00,00345$
      00000F 80 EF            [24]  598 	sjmp	00105$
      000011                        599 00345$:
                                    600 ;	main.c:30: a[0]=c;                 //TAKE THE CHARACTER IN ARRAY A[0]
      000011 90r00r00         [24]  601 	mov	dptr,#_getdata_a_65536_57
      000014 EE               [12]  602 	mov	a,r6
      000015 F0               [24]  603 	movx	@dptr,a
                                    604 ;	main.c:31: putchar(a[0]);
      000016 8D 82            [24]  605 	mov	dpl,r5
      000018 8F 83            [24]  606 	mov	dph,r7
      00001A 12r0FrE8         [24]  607 	lcall	_putchar
                                    608 ;	main.c:33: while(1)
      00001D                        609 00111$:
                                    610 ;	main.c:35: c=getchar();        //TAKE THE CHARACTER IN VARIABLE
      00001D 12r10r05         [24]  611 	lcall	_getchar
      000020 AE 82            [24]  612 	mov	r6,dpl
                                    613 ;	main.c:36: int b=(int)c;
      000022 8E 05            [24]  614 	mov	ar5,r6
      000024 7F 00            [12]  615 	mov	r7,#0x00
                                    616 ;	main.c:37: if (b==13)
      000026 BD 0D 05         [24]  617 	cjne	r5,#0x0d,00346$
      000029 BF 00 02         [24]  618 	cjne	r7,#0x00,00346$
      00002C 80 EF            [24]  619 	sjmp	00111$
      00002E                        620 00346$:
                                    621 ;	main.c:44: a[1]=c;                 //TAKE THE CHARACTER IN ARRAY A[1]
      00002E 90r00r01         [24]  622 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      000031 EE               [12]  623 	mov	a,r6
      000032 F0               [24]  624 	movx	@dptr,a
                                    625 ;	main.c:45: putchar(a[1]);
      000033 8D 82            [24]  626 	mov	dpl,r5
      000035 8F 83            [24]  627 	mov	dph,r7
      000037 12r0FrE8         [24]  628 	lcall	_putchar
                                    629 ;	main.c:47: if ((a[0]=='0'||a[0]=='1'||a[0]=='2'||a[0]=='3'||a[0]=='4'||a[0]=='5'||
      00003A 90r00r00         [24]  630 	mov	dptr,#_getdata_a_65536_57
      00003D E0               [24]  631 	movx	a,@dptr
      00003E FF               [12]  632 	mov	r7,a
      00003F BF 30 03         [24]  633 	cjne	r7,#0x30,00347$
      000042 02r01r23         [24]  634 	ljmp	00158$
      000045                        635 00347$:
      000045 90r00r00         [24]  636 	mov	dptr,#_getdata_a_65536_57
      000048 E0               [24]  637 	movx	a,@dptr
      000049 FF               [12]  638 	mov	r7,a
      00004A BF 31 03         [24]  639 	cjne	r7,#0x31,00348$
      00004D 02r01r23         [24]  640 	ljmp	00158$
      000050                        641 00348$:
      000050 90r00r00         [24]  642 	mov	dptr,#_getdata_a_65536_57
      000053 E0               [24]  643 	movx	a,@dptr
      000054 FF               [12]  644 	mov	r7,a
      000055 BF 32 03         [24]  645 	cjne	r7,#0x32,00349$
      000058 02r01r23         [24]  646 	ljmp	00158$
      00005B                        647 00349$:
      00005B 90r00r00         [24]  648 	mov	dptr,#_getdata_a_65536_57
      00005E E0               [24]  649 	movx	a,@dptr
      00005F FF               [12]  650 	mov	r7,a
      000060 BF 33 03         [24]  651 	cjne	r7,#0x33,00350$
      000063 02r01r23         [24]  652 	ljmp	00158$
      000066                        653 00350$:
      000066 90r00r00         [24]  654 	mov	dptr,#_getdata_a_65536_57
      000069 E0               [24]  655 	movx	a,@dptr
      00006A FF               [12]  656 	mov	r7,a
      00006B BF 34 03         [24]  657 	cjne	r7,#0x34,00351$
      00006E 02r01r23         [24]  658 	ljmp	00158$
      000071                        659 00351$:
      000071 90r00r00         [24]  660 	mov	dptr,#_getdata_a_65536_57
      000074 E0               [24]  661 	movx	a,@dptr
      000075 FF               [12]  662 	mov	r7,a
      000076 BF 35 03         [24]  663 	cjne	r7,#0x35,00352$
      000079 02r01r23         [24]  664 	ljmp	00158$
      00007C                        665 00352$:
                                    666 ;	main.c:48: a[0]=='6'||a[0]=='7'||a[0]=='8'||a[0]=='9'||a[0]=='a'||a[0]=='b'||a[0]=='c'||
      00007C 90r00r00         [24]  667 	mov	dptr,#_getdata_a_65536_57
      00007F E0               [24]  668 	movx	a,@dptr
      000080 FF               [12]  669 	mov	r7,a
      000081 BF 36 03         [24]  670 	cjne	r7,#0x36,00353$
      000084 02r01r23         [24]  671 	ljmp	00158$
      000087                        672 00353$:
      000087 90r00r00         [24]  673 	mov	dptr,#_getdata_a_65536_57
      00008A E0               [24]  674 	movx	a,@dptr
      00008B FF               [12]  675 	mov	r7,a
      00008C BF 37 03         [24]  676 	cjne	r7,#0x37,00354$
      00008F 02r01r23         [24]  677 	ljmp	00158$
      000092                        678 00354$:
      000092 90r00r00         [24]  679 	mov	dptr,#_getdata_a_65536_57
      000095 E0               [24]  680 	movx	a,@dptr
      000096 FF               [12]  681 	mov	r7,a
      000097 BF 38 03         [24]  682 	cjne	r7,#0x38,00355$
      00009A 02r01r23         [24]  683 	ljmp	00158$
      00009D                        684 00355$:
      00009D 90r00r00         [24]  685 	mov	dptr,#_getdata_a_65536_57
      0000A0 E0               [24]  686 	movx	a,@dptr
      0000A1 FF               [12]  687 	mov	r7,a
      0000A2 BF 39 03         [24]  688 	cjne	r7,#0x39,00356$
      0000A5 02r01r23         [24]  689 	ljmp	00158$
      0000A8                        690 00356$:
      0000A8 90r00r00         [24]  691 	mov	dptr,#_getdata_a_65536_57
      0000AB E0               [24]  692 	movx	a,@dptr
      0000AC FF               [12]  693 	mov	r7,a
      0000AD BF 61 02         [24]  694 	cjne	r7,#0x61,00357$
      0000B0 80 71            [24]  695 	sjmp	00158$
      0000B2                        696 00357$:
      0000B2 90r00r00         [24]  697 	mov	dptr,#_getdata_a_65536_57
      0000B5 E0               [24]  698 	movx	a,@dptr
      0000B6 FF               [12]  699 	mov	r7,a
      0000B7 BF 62 02         [24]  700 	cjne	r7,#0x62,00358$
      0000BA 80 67            [24]  701 	sjmp	00158$
      0000BC                        702 00358$:
      0000BC 90r00r00         [24]  703 	mov	dptr,#_getdata_a_65536_57
      0000BF E0               [24]  704 	movx	a,@dptr
      0000C0 FF               [12]  705 	mov	r7,a
      0000C1 BF 63 02         [24]  706 	cjne	r7,#0x63,00359$
      0000C4 80 5D            [24]  707 	sjmp	00158$
      0000C6                        708 00359$:
                                    709 ;	main.c:49: a[0]=='d'||a[0]=='e'||a[0]=='f'||a[0]=='A'||a[0]=='B'||a[0]=='C'||a[0]=='D'||
      0000C6 90r00r00         [24]  710 	mov	dptr,#_getdata_a_65536_57
      0000C9 E0               [24]  711 	movx	a,@dptr
      0000CA FF               [12]  712 	mov	r7,a
      0000CB BF 64 02         [24]  713 	cjne	r7,#0x64,00360$
      0000CE 80 53            [24]  714 	sjmp	00158$
      0000D0                        715 00360$:
      0000D0 90r00r00         [24]  716 	mov	dptr,#_getdata_a_65536_57
      0000D3 E0               [24]  717 	movx	a,@dptr
      0000D4 FF               [12]  718 	mov	r7,a
      0000D5 BF 65 02         [24]  719 	cjne	r7,#0x65,00361$
      0000D8 80 49            [24]  720 	sjmp	00158$
      0000DA                        721 00361$:
      0000DA 90r00r00         [24]  722 	mov	dptr,#_getdata_a_65536_57
      0000DD E0               [24]  723 	movx	a,@dptr
      0000DE FF               [12]  724 	mov	r7,a
      0000DF BF 66 02         [24]  725 	cjne	r7,#0x66,00362$
      0000E2 80 3F            [24]  726 	sjmp	00158$
      0000E4                        727 00362$:
      0000E4 90r00r00         [24]  728 	mov	dptr,#_getdata_a_65536_57
      0000E7 E0               [24]  729 	movx	a,@dptr
      0000E8 FF               [12]  730 	mov	r7,a
      0000E9 BF 41 02         [24]  731 	cjne	r7,#0x41,00363$
      0000EC 80 35            [24]  732 	sjmp	00158$
      0000EE                        733 00363$:
      0000EE 90r00r00         [24]  734 	mov	dptr,#_getdata_a_65536_57
      0000F1 E0               [24]  735 	movx	a,@dptr
      0000F2 FF               [12]  736 	mov	r7,a
      0000F3 BF 42 02         [24]  737 	cjne	r7,#0x42,00364$
      0000F6 80 2B            [24]  738 	sjmp	00158$
      0000F8                        739 00364$:
      0000F8 90r00r00         [24]  740 	mov	dptr,#_getdata_a_65536_57
      0000FB E0               [24]  741 	movx	a,@dptr
      0000FC FF               [12]  742 	mov	r7,a
      0000FD BF 43 02         [24]  743 	cjne	r7,#0x43,00365$
      000100 80 21            [24]  744 	sjmp	00158$
      000102                        745 00365$:
      000102 90r00r00         [24]  746 	mov	dptr,#_getdata_a_65536_57
      000105 E0               [24]  747 	movx	a,@dptr
      000106 FF               [12]  748 	mov	r7,a
      000107 BF 44 02         [24]  749 	cjne	r7,#0x44,00366$
      00010A 80 17            [24]  750 	sjmp	00158$
      00010C                        751 00366$:
                                    752 ;	main.c:50: a[0]=='E'||a[0]=='F')&&(a[1]=='0'||a[1]=='1'||a[1]=='2'||a[1]=='3'||a[1]=='4'||
      00010C 90r00r00         [24]  753 	mov	dptr,#_getdata_a_65536_57
      00010F E0               [24]  754 	movx	a,@dptr
      000110 FF               [12]  755 	mov	r7,a
      000111 BF 45 02         [24]  756 	cjne	r7,#0x45,00367$
      000114 80 0D            [24]  757 	sjmp	00158$
      000116                        758 00367$:
      000116 90r00r00         [24]  759 	mov	dptr,#_getdata_a_65536_57
      000119 E0               [24]  760 	movx	a,@dptr
      00011A FF               [12]  761 	mov	r7,a
      00011B BF 46 02         [24]  762 	cjne	r7,#0x46,00368$
      00011E 80 03            [24]  763 	sjmp	00369$
      000120                        764 00368$:
      000120 02r02r22         [24]  765 	ljmp	00114$
      000123                        766 00369$:
      000123                        767 00158$:
      000123 90r00r01         [24]  768 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      000126 E0               [24]  769 	movx	a,@dptr
      000127 FF               [12]  770 	mov	r7,a
      000128 BF 30 03         [24]  771 	cjne	r7,#0x30,00370$
      00012B 02r02r07         [24]  772 	ljmp	00113$
      00012E                        773 00370$:
      00012E 90r00r01         [24]  774 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      000131 E0               [24]  775 	movx	a,@dptr
      000132 FF               [12]  776 	mov	r7,a
      000133 BF 31 03         [24]  777 	cjne	r7,#0x31,00371$
      000136 02r02r07         [24]  778 	ljmp	00113$
      000139                        779 00371$:
      000139 90r00r01         [24]  780 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      00013C E0               [24]  781 	movx	a,@dptr
      00013D FF               [12]  782 	mov	r7,a
      00013E BF 32 03         [24]  783 	cjne	r7,#0x32,00372$
      000141 02r02r07         [24]  784 	ljmp	00113$
      000144                        785 00372$:
      000144 90r00r01         [24]  786 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      000147 E0               [24]  787 	movx	a,@dptr
      000148 FF               [12]  788 	mov	r7,a
      000149 BF 33 03         [24]  789 	cjne	r7,#0x33,00373$
      00014C 02r02r07         [24]  790 	ljmp	00113$
      00014F                        791 00373$:
      00014F 90r00r01         [24]  792 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      000152 E0               [24]  793 	movx	a,@dptr
      000153 FF               [12]  794 	mov	r7,a
      000154 BF 34 03         [24]  795 	cjne	r7,#0x34,00374$
      000157 02r02r07         [24]  796 	ljmp	00113$
      00015A                        797 00374$:
                                    798 ;	main.c:51: a[1]=='5'||a[1]=='6'||a[1]=='7'||a[1]=='8'||a[1]=='9'||
      00015A 90r00r01         [24]  799 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      00015D E0               [24]  800 	movx	a,@dptr
      00015E FF               [12]  801 	mov	r7,a
      00015F BF 35 03         [24]  802 	cjne	r7,#0x35,00375$
      000162 02r02r07         [24]  803 	ljmp	00113$
      000165                        804 00375$:
      000165 90r00r01         [24]  805 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      000168 E0               [24]  806 	movx	a,@dptr
      000169 FF               [12]  807 	mov	r7,a
      00016A BF 36 03         [24]  808 	cjne	r7,#0x36,00376$
      00016D 02r02r07         [24]  809 	ljmp	00113$
      000170                        810 00376$:
      000170 90r00r01         [24]  811 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      000173 E0               [24]  812 	movx	a,@dptr
      000174 FF               [12]  813 	mov	r7,a
      000175 BF 37 03         [24]  814 	cjne	r7,#0x37,00377$
      000178 02r02r07         [24]  815 	ljmp	00113$
      00017B                        816 00377$:
      00017B 90r00r01         [24]  817 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      00017E E0               [24]  818 	movx	a,@dptr
      00017F FF               [12]  819 	mov	r7,a
      000180 BF 38 03         [24]  820 	cjne	r7,#0x38,00378$
      000183 02r02r07         [24]  821 	ljmp	00113$
      000186                        822 00378$:
      000186 90r00r01         [24]  823 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      000189 E0               [24]  824 	movx	a,@dptr
      00018A FF               [12]  825 	mov	r7,a
      00018B BF 39 03         [24]  826 	cjne	r7,#0x39,00379$
      00018E 02r02r07         [24]  827 	ljmp	00113$
      000191                        828 00379$:
                                    829 ;	main.c:52: a[1]=='a'||a[1]=='b'||a[1]=='c'||a[1]=='d'||a[1]=='e'||
      000191 90r00r01         [24]  830 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      000194 E0               [24]  831 	movx	a,@dptr
      000195 FF               [12]  832 	mov	r7,a
      000196 BF 61 02         [24]  833 	cjne	r7,#0x61,00380$
      000199 80 6C            [24]  834 	sjmp	00113$
      00019B                        835 00380$:
      00019B 90r00r01         [24]  836 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      00019E E0               [24]  837 	movx	a,@dptr
      00019F FF               [12]  838 	mov	r7,a
      0001A0 BF 62 02         [24]  839 	cjne	r7,#0x62,00381$
      0001A3 80 62            [24]  840 	sjmp	00113$
      0001A5                        841 00381$:
      0001A5 90r00r01         [24]  842 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      0001A8 E0               [24]  843 	movx	a,@dptr
      0001A9 FF               [12]  844 	mov	r7,a
      0001AA BF 63 02         [24]  845 	cjne	r7,#0x63,00382$
      0001AD 80 58            [24]  846 	sjmp	00113$
      0001AF                        847 00382$:
      0001AF 90r00r01         [24]  848 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      0001B2 E0               [24]  849 	movx	a,@dptr
      0001B3 FF               [12]  850 	mov	r7,a
      0001B4 BF 64 02         [24]  851 	cjne	r7,#0x64,00383$
      0001B7 80 4E            [24]  852 	sjmp	00113$
      0001B9                        853 00383$:
      0001B9 90r00r01         [24]  854 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      0001BC E0               [24]  855 	movx	a,@dptr
      0001BD FF               [12]  856 	mov	r7,a
      0001BE BF 65 02         [24]  857 	cjne	r7,#0x65,00384$
      0001C1 80 44            [24]  858 	sjmp	00113$
      0001C3                        859 00384$:
                                    860 ;	main.c:53: a[1]=='f'||a[1]=='A'||a[1]=='B'||a[1]=='C'||a[1]=='D'||a[1]=='E'||a[1]=='F'))
      0001C3 90r00r01         [24]  861 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      0001C6 E0               [24]  862 	movx	a,@dptr
      0001C7 FF               [12]  863 	mov	r7,a
      0001C8 BF 66 02         [24]  864 	cjne	r7,#0x66,00385$
      0001CB 80 3A            [24]  865 	sjmp	00113$
      0001CD                        866 00385$:
      0001CD 90r00r01         [24]  867 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      0001D0 E0               [24]  868 	movx	a,@dptr
      0001D1 FF               [12]  869 	mov	r7,a
      0001D2 BF 41 02         [24]  870 	cjne	r7,#0x41,00386$
      0001D5 80 30            [24]  871 	sjmp	00113$
      0001D7                        872 00386$:
      0001D7 90r00r01         [24]  873 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      0001DA E0               [24]  874 	movx	a,@dptr
      0001DB FF               [12]  875 	mov	r7,a
      0001DC BF 42 02         [24]  876 	cjne	r7,#0x42,00387$
      0001DF 80 26            [24]  877 	sjmp	00113$
      0001E1                        878 00387$:
      0001E1 90r00r01         [24]  879 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      0001E4 E0               [24]  880 	movx	a,@dptr
      0001E5 FF               [12]  881 	mov	r7,a
      0001E6 BF 43 02         [24]  882 	cjne	r7,#0x43,00388$
      0001E9 80 1C            [24]  883 	sjmp	00113$
      0001EB                        884 00388$:
      0001EB 90r00r01         [24]  885 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      0001EE E0               [24]  886 	movx	a,@dptr
      0001EF FF               [12]  887 	mov	r7,a
      0001F0 BF 44 02         [24]  888 	cjne	r7,#0x44,00389$
      0001F3 80 12            [24]  889 	sjmp	00113$
      0001F5                        890 00389$:
      0001F5 90r00r01         [24]  891 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      0001F8 E0               [24]  892 	movx	a,@dptr
      0001F9 FF               [12]  893 	mov	r7,a
      0001FA BF 45 02         [24]  894 	cjne	r7,#0x45,00390$
      0001FD 80 08            [24]  895 	sjmp	00113$
      0001FF                        896 00390$:
      0001FF 90r00r01         [24]  897 	mov	dptr,#(_getdata_a_65536_57 + 0x0001)
      000202 E0               [24]  898 	movx	a,@dptr
      000203 FF               [12]  899 	mov	r7,a
      000204 BF 46 1B         [24]  900 	cjne	r7,#0x46,00114$
      000207                        901 00113$:
                                    902 ;	main.c:55: z=(int)strtol(a,NULL,16);   //FUNCTION TO CONVERT CHARACTER HEX STRING TO DECIMAL/HEX EQUIVALENT
      000207 90r00r00         [24]  903 	mov	dptr,#_strtol_PARM_2
      00020A E4               [12]  904 	clr	a
      00020B F0               [24]  905 	movx	@dptr,a
      00020C A3               [24]  906 	inc	dptr
      00020D F0               [24]  907 	movx	@dptr,a
      00020E A3               [24]  908 	inc	dptr
      00020F F0               [24]  909 	movx	@dptr,a
      000210 90r00r00         [24]  910 	mov	dptr,#_strtol_PARM_3
      000213 74 10            [12]  911 	mov	a,#0x10
      000215 F0               [24]  912 	movx	@dptr,a
      000216 E4               [12]  913 	clr	a
      000217 A3               [24]  914 	inc	dptr
      000218 F0               [24]  915 	movx	@dptr,a
      000219 90r00r00         [24]  916 	mov	dptr,#_getdata_a_65536_57
      00021C 75 F0 00         [24]  917 	mov	b,#0x00
                                    918 ;	main.c:56: return (z);
      00021F 02r00r00         [24]  919 	ljmp	_strtol
      000222                        920 00114$:
                                    921 ;	main.c:59: return(-1);                 //IF VALUES NOT VALID RETURN -1
      000222 90 FF FF         [24]  922 	mov	dptr,#0xffff
                                    923 ;	main.c:60: }
      000225 22               [24]  924 	ret
                                    925 ;------------------------------------------------------------
                                    926 ;Allocation info for local variables in function 'getnumber'
                                    927 ;------------------------------------------------------------
                                    928 ;a                         Allocated with name '_getnumber_a_65536_65'
                                    929 ;z                         Allocated with name '_getnumber_z_65536_65'
                                    930 ;c                         Allocated with name '_getnumber_c_65536_65'
                                    931 ;b                         Allocated with name '_getnumber_b_131073_67'
                                    932 ;b                         Allocated with name '_getnumber_b_131073_70'
                                    933 ;b                         Allocated with name '_getnumber_b_131073_73'
                                    934 ;------------------------------------------------------------
                                    935 ;	main.c:62: int getnumber()         //FUNCTION TO INPUT VALUES FROM THE USER IN THE FORM OF A CHARACTER AND CONVERTING INTO DECIMAL EQUIVALENT
                                    936 ;	-----------------------------------------
                                    937 ;	 function getnumber
                                    938 ;	-----------------------------------------
      000226                        939 _getnumber:
                                    940 ;	main.c:68: while(1)
      000226                        941 00105$:
                                    942 ;	main.c:70: c=getchar();     //TAKE THE CHARACTER IN VARIABLE C
      000226 12r10r05         [24]  943 	lcall	_getchar
      000229 AE 82            [24]  944 	mov	r6,dpl
                                    945 ;	main.c:71: int b=(int)c;
      00022B 8E 05            [24]  946 	mov	ar5,r6
      00022D 7F 00            [12]  947 	mov	r7,#0x00
                                    948 ;	main.c:72: if (b==13)
      00022F BD 0D 05         [24]  949 	cjne	r5,#0x0d,00415$
      000232 BF 00 02         [24]  950 	cjne	r7,#0x00,00415$
      000235 80 EF            [24]  951 	sjmp	00105$
      000237                        952 00415$:
                                    953 ;	main.c:79: a[0]=c;
      000237 90r00r03         [24]  954 	mov	dptr,#_getnumber_a_65536_65
      00023A EE               [12]  955 	mov	a,r6
      00023B F0               [24]  956 	movx	@dptr,a
                                    957 ;	main.c:80: putchar(a[0]);
      00023C 8D 82            [24]  958 	mov	dpl,r5
      00023E 8F 83            [24]  959 	mov	dph,r7
      000240 12r0FrE8         [24]  960 	lcall	_putchar
                                    961 ;	main.c:82: while(1)
      000243                        962 00111$:
                                    963 ;	main.c:84: c=getchar();        //TAKE THE CHARACTER IN VARIABLE C
      000243 12r10r05         [24]  964 	lcall	_getchar
      000246 AE 82            [24]  965 	mov	r6,dpl
                                    966 ;	main.c:85: int b=(int)c;
      000248 8E 05            [24]  967 	mov	ar5,r6
      00024A 7F 00            [12]  968 	mov	r7,#0x00
                                    969 ;	main.c:86: if (b==13)
      00024C BD 0D 05         [24]  970 	cjne	r5,#0x0d,00416$
      00024F BF 00 02         [24]  971 	cjne	r7,#0x00,00416$
      000252 80 EF            [24]  972 	sjmp	00111$
      000254                        973 00416$:
                                    974 ;	main.c:94: a[1]=c;
      000254 90r00r04         [24]  975 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      000257 EE               [12]  976 	mov	a,r6
      000258 F0               [24]  977 	movx	@dptr,a
                                    978 ;	main.c:95: putchar(a[1]);
      000259 8D 82            [24]  979 	mov	dpl,r5
      00025B 8F 83            [24]  980 	mov	dph,r7
      00025D 12r0FrE8         [24]  981 	lcall	_putchar
                                    982 ;	main.c:98: while(1)
      000260                        983 00117$:
                                    984 ;	main.c:100: c=getchar();        //TAKE THE CHARACTER IN VARIABLE C
      000260 12r10r05         [24]  985 	lcall	_getchar
      000263 AE 82            [24]  986 	mov	r6,dpl
                                    987 ;	main.c:103: int b=(int)c;
      000265 8E 05            [24]  988 	mov	ar5,r6
      000267 7F 00            [12]  989 	mov	r7,#0x00
                                    990 ;	main.c:104: if (b==13)
      000269 BD 0D 05         [24]  991 	cjne	r5,#0x0d,00417$
      00026C BF 00 02         [24]  992 	cjne	r7,#0x00,00417$
      00026F 80 EF            [24]  993 	sjmp	00117$
      000271                        994 00417$:
                                    995 ;	main.c:111: a[2]=c;
      000271 90r00r05         [24]  996 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      000274 EE               [12]  997 	mov	a,r6
      000275 F0               [24]  998 	movx	@dptr,a
                                    999 ;	main.c:112: putchar(a[2]);
      000276 8D 82            [24] 1000 	mov	dpl,r5
      000278 8F 83            [24] 1001 	mov	dph,r7
      00027A 12r0FrE8         [24] 1002 	lcall	_putchar
                                   1003 ;	main.c:115: if ((a[0]=='0'||a[0]=='1'||a[0]=='2'||a[0]=='3'||a[0]=='4'||a[0]=='5'||a[0]=='6'||
      00027D 90r00r03         [24] 1004 	mov	dptr,#_getnumber_a_65536_65
      000280 E0               [24] 1005 	movx	a,@dptr
      000281 FF               [12] 1006 	mov	r7,a
      000282 BF 30 02         [24] 1007 	cjne	r7,#0x30,00418$
      000285 80 49            [24] 1008 	sjmp	00158$
      000287                       1009 00418$:
      000287 90r00r03         [24] 1010 	mov	dptr,#_getnumber_a_65536_65
      00028A E0               [24] 1011 	movx	a,@dptr
      00028B FF               [12] 1012 	mov	r7,a
      00028C BF 31 02         [24] 1013 	cjne	r7,#0x31,00419$
      00028F 80 3F            [24] 1014 	sjmp	00158$
      000291                       1015 00419$:
      000291 90r00r03         [24] 1016 	mov	dptr,#_getnumber_a_65536_65
      000294 E0               [24] 1017 	movx	a,@dptr
      000295 FF               [12] 1018 	mov	r7,a
      000296 BF 32 02         [24] 1019 	cjne	r7,#0x32,00420$
      000299 80 35            [24] 1020 	sjmp	00158$
      00029B                       1021 00420$:
      00029B 90r00r03         [24] 1022 	mov	dptr,#_getnumber_a_65536_65
      00029E E0               [24] 1023 	movx	a,@dptr
      00029F FF               [12] 1024 	mov	r7,a
      0002A0 BF 33 02         [24] 1025 	cjne	r7,#0x33,00421$
      0002A3 80 2B            [24] 1026 	sjmp	00158$
      0002A5                       1027 00421$:
      0002A5 90r00r03         [24] 1028 	mov	dptr,#_getnumber_a_65536_65
      0002A8 E0               [24] 1029 	movx	a,@dptr
      0002A9 FF               [12] 1030 	mov	r7,a
      0002AA BF 34 02         [24] 1031 	cjne	r7,#0x34,00422$
      0002AD 80 21            [24] 1032 	sjmp	00158$
      0002AF                       1033 00422$:
      0002AF 90r00r03         [24] 1034 	mov	dptr,#_getnumber_a_65536_65
      0002B2 E0               [24] 1035 	movx	a,@dptr
      0002B3 FF               [12] 1036 	mov	r7,a
      0002B4 BF 35 02         [24] 1037 	cjne	r7,#0x35,00423$
      0002B7 80 17            [24] 1038 	sjmp	00158$
      0002B9                       1039 00423$:
      0002B9 90r00r03         [24] 1040 	mov	dptr,#_getnumber_a_65536_65
      0002BC E0               [24] 1041 	movx	a,@dptr
      0002BD FF               [12] 1042 	mov	r7,a
      0002BE BF 36 02         [24] 1043 	cjne	r7,#0x36,00424$
      0002C1 80 0D            [24] 1044 	sjmp	00158$
      0002C3                       1045 00424$:
                                   1046 ;	main.c:116: a[0]=='7')&&(a[1]=='0'||a[1]=='1'||a[1]=='2'||a[1]=='3'||a[1]=='4'||a[1]=='5'||
      0002C3 90r00r03         [24] 1047 	mov	dptr,#_getnumber_a_65536_65
      0002C6 E0               [24] 1048 	movx	a,@dptr
      0002C7 FF               [12] 1049 	mov	r7,a
      0002C8 BF 37 02         [24] 1050 	cjne	r7,#0x37,00425$
      0002CB 80 03            [24] 1051 	sjmp	00426$
      0002CD                       1052 00425$:
      0002CD 02r04rB8         [24] 1053 	ljmp	00128$
      0002D0                       1054 00426$:
      0002D0                       1055 00158$:
      0002D0 90r00r04         [24] 1056 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      0002D3 E0               [24] 1057 	movx	a,@dptr
      0002D4 FF               [12] 1058 	mov	r7,a
      0002D5 BF 30 03         [24] 1059 	cjne	r7,#0x30,00427$
      0002D8 02r03rB9         [24] 1060 	ljmp	00180$
      0002DB                       1061 00427$:
      0002DB 90r00r04         [24] 1062 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      0002DE E0               [24] 1063 	movx	a,@dptr
      0002DF FF               [12] 1064 	mov	r7,a
      0002E0 BF 31 03         [24] 1065 	cjne	r7,#0x31,00428$
      0002E3 02r03rB9         [24] 1066 	ljmp	00180$
      0002E6                       1067 00428$:
      0002E6 90r00r04         [24] 1068 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      0002E9 E0               [24] 1069 	movx	a,@dptr
      0002EA FF               [12] 1070 	mov	r7,a
      0002EB BF 32 03         [24] 1071 	cjne	r7,#0x32,00429$
      0002EE 02r03rB9         [24] 1072 	ljmp	00180$
      0002F1                       1073 00429$:
      0002F1 90r00r04         [24] 1074 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      0002F4 E0               [24] 1075 	movx	a,@dptr
      0002F5 FF               [12] 1076 	mov	r7,a
      0002F6 BF 33 03         [24] 1077 	cjne	r7,#0x33,00430$
      0002F9 02r03rB9         [24] 1078 	ljmp	00180$
      0002FC                       1079 00430$:
      0002FC 90r00r04         [24] 1080 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      0002FF E0               [24] 1081 	movx	a,@dptr
      000300 FF               [12] 1082 	mov	r7,a
      000301 BF 34 03         [24] 1083 	cjne	r7,#0x34,00431$
      000304 02r03rB9         [24] 1084 	ljmp	00180$
      000307                       1085 00431$:
      000307 90r00r04         [24] 1086 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      00030A E0               [24] 1087 	movx	a,@dptr
      00030B FF               [12] 1088 	mov	r7,a
      00030C BF 35 03         [24] 1089 	cjne	r7,#0x35,00432$
      00030F 02r03rB9         [24] 1090 	ljmp	00180$
      000312                       1091 00432$:
                                   1092 ;	main.c:117: a[1]=='6'||a[1]=='7'||a[1]=='8'||a[1]=='9'||a[1]=='a'||a[1]=='b'||
      000312 90r00r04         [24] 1093 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      000315 E0               [24] 1094 	movx	a,@dptr
      000316 FF               [12] 1095 	mov	r7,a
      000317 BF 36 03         [24] 1096 	cjne	r7,#0x36,00433$
      00031A 02r03rB9         [24] 1097 	ljmp	00180$
      00031D                       1098 00433$:
      00031D 90r00r04         [24] 1099 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      000320 E0               [24] 1100 	movx	a,@dptr
      000321 FF               [12] 1101 	mov	r7,a
      000322 BF 37 03         [24] 1102 	cjne	r7,#0x37,00434$
      000325 02r03rB9         [24] 1103 	ljmp	00180$
      000328                       1104 00434$:
      000328 90r00r04         [24] 1105 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      00032B E0               [24] 1106 	movx	a,@dptr
      00032C FF               [12] 1107 	mov	r7,a
      00032D BF 38 03         [24] 1108 	cjne	r7,#0x38,00435$
      000330 02r03rB9         [24] 1109 	ljmp	00180$
      000333                       1110 00435$:
      000333 90r00r04         [24] 1111 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      000336 E0               [24] 1112 	movx	a,@dptr
      000337 FF               [12] 1113 	mov	r7,a
      000338 BF 39 03         [24] 1114 	cjne	r7,#0x39,00436$
      00033B 02r03rB9         [24] 1115 	ljmp	00180$
      00033E                       1116 00436$:
      00033E 90r00r04         [24] 1117 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      000341 E0               [24] 1118 	movx	a,@dptr
      000342 FF               [12] 1119 	mov	r7,a
      000343 BF 61 02         [24] 1120 	cjne	r7,#0x61,00437$
      000346 80 71            [24] 1121 	sjmp	00180$
      000348                       1122 00437$:
      000348 90r00r04         [24] 1123 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      00034B E0               [24] 1124 	movx	a,@dptr
      00034C FF               [12] 1125 	mov	r7,a
      00034D BF 62 02         [24] 1126 	cjne	r7,#0x62,00438$
      000350 80 67            [24] 1127 	sjmp	00180$
      000352                       1128 00438$:
                                   1129 ;	main.c:118: a[1]=='c'||a[1]=='d'||a[1]=='e'||a[1]=='f'||a[1]=='A'||a[1]=='B'||
      000352 90r00r04         [24] 1130 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      000355 E0               [24] 1131 	movx	a,@dptr
      000356 FF               [12] 1132 	mov	r7,a
      000357 BF 63 02         [24] 1133 	cjne	r7,#0x63,00439$
      00035A 80 5D            [24] 1134 	sjmp	00180$
      00035C                       1135 00439$:
      00035C 90r00r04         [24] 1136 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      00035F E0               [24] 1137 	movx	a,@dptr
      000360 FF               [12] 1138 	mov	r7,a
      000361 BF 64 02         [24] 1139 	cjne	r7,#0x64,00440$
      000364 80 53            [24] 1140 	sjmp	00180$
      000366                       1141 00440$:
      000366 90r00r04         [24] 1142 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      000369 E0               [24] 1143 	movx	a,@dptr
      00036A FF               [12] 1144 	mov	r7,a
      00036B BF 65 02         [24] 1145 	cjne	r7,#0x65,00441$
      00036E 80 49            [24] 1146 	sjmp	00180$
      000370                       1147 00441$:
      000370 90r00r04         [24] 1148 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      000373 E0               [24] 1149 	movx	a,@dptr
      000374 FF               [12] 1150 	mov	r7,a
      000375 BF 66 02         [24] 1151 	cjne	r7,#0x66,00442$
      000378 80 3F            [24] 1152 	sjmp	00180$
      00037A                       1153 00442$:
      00037A 90r00r04         [24] 1154 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      00037D E0               [24] 1155 	movx	a,@dptr
      00037E FF               [12] 1156 	mov	r7,a
      00037F BF 41 02         [24] 1157 	cjne	r7,#0x41,00443$
      000382 80 35            [24] 1158 	sjmp	00180$
      000384                       1159 00443$:
      000384 90r00r04         [24] 1160 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      000387 E0               [24] 1161 	movx	a,@dptr
      000388 FF               [12] 1162 	mov	r7,a
      000389 BF 42 02         [24] 1163 	cjne	r7,#0x42,00444$
      00038C 80 2B            [24] 1164 	sjmp	00180$
      00038E                       1165 00444$:
                                   1166 ;	main.c:119: a[1]=='C'||a[1]=='D'||a[1]=='E'||a[1]=='F')&&(a[2]=='0'||a[2]=='1'||
      00038E 90r00r04         [24] 1167 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      000391 E0               [24] 1168 	movx	a,@dptr
      000392 FF               [12] 1169 	mov	r7,a
      000393 BF 43 02         [24] 1170 	cjne	r7,#0x43,00445$
      000396 80 21            [24] 1171 	sjmp	00180$
      000398                       1172 00445$:
      000398 90r00r04         [24] 1173 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      00039B E0               [24] 1174 	movx	a,@dptr
      00039C FF               [12] 1175 	mov	r7,a
      00039D BF 44 02         [24] 1176 	cjne	r7,#0x44,00446$
      0003A0 80 17            [24] 1177 	sjmp	00180$
      0003A2                       1178 00446$:
      0003A2 90r00r04         [24] 1179 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      0003A5 E0               [24] 1180 	movx	a,@dptr
      0003A6 FF               [12] 1181 	mov	r7,a
      0003A7 BF 45 02         [24] 1182 	cjne	r7,#0x45,00447$
      0003AA 80 0D            [24] 1183 	sjmp	00180$
      0003AC                       1184 00447$:
      0003AC 90r00r04         [24] 1185 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      0003AF E0               [24] 1186 	movx	a,@dptr
      0003B0 FF               [12] 1187 	mov	r7,a
      0003B1 BF 46 02         [24] 1188 	cjne	r7,#0x46,00448$
      0003B4 80 03            [24] 1189 	sjmp	00449$
      0003B6                       1190 00448$:
      0003B6 02r04rB8         [24] 1191 	ljmp	00128$
      0003B9                       1192 00449$:
      0003B9                       1193 00180$:
      0003B9 90r00r05         [24] 1194 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      0003BC E0               [24] 1195 	movx	a,@dptr
      0003BD FF               [12] 1196 	mov	r7,a
      0003BE BF 30 03         [24] 1197 	cjne	r7,#0x30,00450$
      0003C1 02r04r9D         [24] 1198 	ljmp	00127$
      0003C4                       1199 00450$:
      0003C4 90r00r05         [24] 1200 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      0003C7 E0               [24] 1201 	movx	a,@dptr
      0003C8 FF               [12] 1202 	mov	r7,a
      0003C9 BF 31 03         [24] 1203 	cjne	r7,#0x31,00451$
      0003CC 02r04r9D         [24] 1204 	ljmp	00127$
      0003CF                       1205 00451$:
                                   1206 ;	main.c:120: a[2]=='2'||a[2]=='3'||a[2]=='4'||a[2]=='5'||a[2]=='6'||a[2]=='7'||
      0003CF 90r00r05         [24] 1207 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      0003D2 E0               [24] 1208 	movx	a,@dptr
      0003D3 FF               [12] 1209 	mov	r7,a
      0003D4 BF 32 03         [24] 1210 	cjne	r7,#0x32,00452$
      0003D7 02r04r9D         [24] 1211 	ljmp	00127$
      0003DA                       1212 00452$:
      0003DA 90r00r05         [24] 1213 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      0003DD E0               [24] 1214 	movx	a,@dptr
      0003DE FF               [12] 1215 	mov	r7,a
      0003DF BF 33 03         [24] 1216 	cjne	r7,#0x33,00453$
      0003E2 02r04r9D         [24] 1217 	ljmp	00127$
      0003E5                       1218 00453$:
      0003E5 90r00r05         [24] 1219 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      0003E8 E0               [24] 1220 	movx	a,@dptr
      0003E9 FF               [12] 1221 	mov	r7,a
      0003EA BF 34 03         [24] 1222 	cjne	r7,#0x34,00454$
      0003ED 02r04r9D         [24] 1223 	ljmp	00127$
      0003F0                       1224 00454$:
      0003F0 90r00r05         [24] 1225 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      0003F3 E0               [24] 1226 	movx	a,@dptr
      0003F4 FF               [12] 1227 	mov	r7,a
      0003F5 BF 35 03         [24] 1228 	cjne	r7,#0x35,00455$
      0003F8 02r04r9D         [24] 1229 	ljmp	00127$
      0003FB                       1230 00455$:
      0003FB 90r00r05         [24] 1231 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      0003FE E0               [24] 1232 	movx	a,@dptr
      0003FF FF               [12] 1233 	mov	r7,a
      000400 BF 36 03         [24] 1234 	cjne	r7,#0x36,00456$
      000403 02r04r9D         [24] 1235 	ljmp	00127$
      000406                       1236 00456$:
      000406 90r00r05         [24] 1237 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      000409 E0               [24] 1238 	movx	a,@dptr
      00040A FF               [12] 1239 	mov	r7,a
      00040B BF 37 03         [24] 1240 	cjne	r7,#0x37,00457$
      00040E 02r04r9D         [24] 1241 	ljmp	00127$
      000411                       1242 00457$:
                                   1243 ;	main.c:121: a[2]=='8'||a[2]=='9'||a[2]=='A'||a[2]=='B'||a[2]=='C'||a[2]=='D'||
      000411 90r00r05         [24] 1244 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      000414 E0               [24] 1245 	movx	a,@dptr
      000415 FF               [12] 1246 	mov	r7,a
      000416 BF 38 03         [24] 1247 	cjne	r7,#0x38,00458$
      000419 02r04r9D         [24] 1248 	ljmp	00127$
      00041C                       1249 00458$:
      00041C 90r00r05         [24] 1250 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      00041F E0               [24] 1251 	movx	a,@dptr
      000420 FF               [12] 1252 	mov	r7,a
      000421 BF 39 03         [24] 1253 	cjne	r7,#0x39,00459$
      000424 02r04r9D         [24] 1254 	ljmp	00127$
      000427                       1255 00459$:
      000427 90r00r05         [24] 1256 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      00042A E0               [24] 1257 	movx	a,@dptr
      00042B FF               [12] 1258 	mov	r7,a
      00042C BF 41 02         [24] 1259 	cjne	r7,#0x41,00460$
      00042F 80 6C            [24] 1260 	sjmp	00127$
      000431                       1261 00460$:
      000431 90r00r05         [24] 1262 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      000434 E0               [24] 1263 	movx	a,@dptr
      000435 FF               [12] 1264 	mov	r7,a
      000436 BF 42 02         [24] 1265 	cjne	r7,#0x42,00461$
      000439 80 62            [24] 1266 	sjmp	00127$
      00043B                       1267 00461$:
      00043B 90r00r05         [24] 1268 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      00043E E0               [24] 1269 	movx	a,@dptr
      00043F FF               [12] 1270 	mov	r7,a
      000440 BF 43 02         [24] 1271 	cjne	r7,#0x43,00462$
      000443 80 58            [24] 1272 	sjmp	00127$
      000445                       1273 00462$:
      000445 90r00r05         [24] 1274 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      000448 E0               [24] 1275 	movx	a,@dptr
      000449 FF               [12] 1276 	mov	r7,a
      00044A BF 44 02         [24] 1277 	cjne	r7,#0x44,00463$
      00044D 80 4E            [24] 1278 	sjmp	00127$
      00044F                       1279 00463$:
                                   1280 ;	main.c:122: a[2]=='E'||a[2]=='F'||a[2]=='a'||a[2]=='b'||a[2]=='c'||a[2]=='d'||a[2]=='e'||a[2]=='f'))
      00044F 90r00r05         [24] 1281 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      000452 E0               [24] 1282 	movx	a,@dptr
      000453 FF               [12] 1283 	mov	r7,a
      000454 BF 45 02         [24] 1284 	cjne	r7,#0x45,00464$
      000457 80 44            [24] 1285 	sjmp	00127$
      000459                       1286 00464$:
      000459 90r00r05         [24] 1287 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      00045C E0               [24] 1288 	movx	a,@dptr
      00045D FF               [12] 1289 	mov	r7,a
      00045E BF 46 02         [24] 1290 	cjne	r7,#0x46,00465$
      000461 80 3A            [24] 1291 	sjmp	00127$
      000463                       1292 00465$:
      000463 90r00r05         [24] 1293 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      000466 E0               [24] 1294 	movx	a,@dptr
      000467 FF               [12] 1295 	mov	r7,a
      000468 BF 61 02         [24] 1296 	cjne	r7,#0x61,00466$
      00046B 80 30            [24] 1297 	sjmp	00127$
      00046D                       1298 00466$:
      00046D 90r00r05         [24] 1299 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      000470 E0               [24] 1300 	movx	a,@dptr
      000471 FF               [12] 1301 	mov	r7,a
      000472 BF 62 02         [24] 1302 	cjne	r7,#0x62,00467$
      000475 80 26            [24] 1303 	sjmp	00127$
      000477                       1304 00467$:
      000477 90r00r05         [24] 1305 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      00047A E0               [24] 1306 	movx	a,@dptr
      00047B FF               [12] 1307 	mov	r7,a
      00047C BF 63 02         [24] 1308 	cjne	r7,#0x63,00468$
      00047F 80 1C            [24] 1309 	sjmp	00127$
      000481                       1310 00468$:
      000481 90r00r05         [24] 1311 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      000484 E0               [24] 1312 	movx	a,@dptr
      000485 FF               [12] 1313 	mov	r7,a
      000486 BF 64 02         [24] 1314 	cjne	r7,#0x64,00469$
      000489 80 12            [24] 1315 	sjmp	00127$
      00048B                       1316 00469$:
      00048B 90r00r05         [24] 1317 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      00048E E0               [24] 1318 	movx	a,@dptr
      00048F FF               [12] 1319 	mov	r7,a
      000490 BF 65 02         [24] 1320 	cjne	r7,#0x65,00470$
      000493 80 08            [24] 1321 	sjmp	00127$
      000495                       1322 00470$:
      000495 90r00r05         [24] 1323 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      000498 E0               [24] 1324 	movx	a,@dptr
      000499 FF               [12] 1325 	mov	r7,a
      00049A BF 66 1B         [24] 1326 	cjne	r7,#0x66,00128$
      00049D                       1327 00127$:
                                   1328 ;	main.c:124: z=(int)strtol(a,NULL,16);   //FUNCTION TO CONVERT CHARACTER HEX STRING TO DECIMAL/HEX EQUIVALENT
      00049D 90r00r00         [24] 1329 	mov	dptr,#_strtol_PARM_2
      0004A0 E4               [12] 1330 	clr	a
      0004A1 F0               [24] 1331 	movx	@dptr,a
      0004A2 A3               [24] 1332 	inc	dptr
      0004A3 F0               [24] 1333 	movx	@dptr,a
      0004A4 A3               [24] 1334 	inc	dptr
      0004A5 F0               [24] 1335 	movx	@dptr,a
      0004A6 90r00r00         [24] 1336 	mov	dptr,#_strtol_PARM_3
      0004A9 74 10            [12] 1337 	mov	a,#0x10
      0004AB F0               [24] 1338 	movx	@dptr,a
      0004AC E4               [12] 1339 	clr	a
      0004AD A3               [24] 1340 	inc	dptr
      0004AE F0               [24] 1341 	movx	@dptr,a
      0004AF 90r00r03         [24] 1342 	mov	dptr,#_getnumber_a_65536_65
      0004B2 75 F0 00         [24] 1343 	mov	b,#0x00
                                   1344 ;	main.c:125: return (z);
      0004B5 02r00r00         [24] 1345 	ljmp	_strtol
      0004B8                       1346 00128$:
                                   1347 ;	main.c:127: else if ((a[0]=='\n'&&a[0]=='\r')||(a[1]=='\n'&&a[1]=='\r')||(a[2]=='\n'&&a[2]=='\r'))
      0004B8 90r00r03         [24] 1348 	mov	dptr,#_getnumber_a_65536_65
      0004BB E0               [24] 1349 	movx	a,@dptr
      0004BC FF               [12] 1350 	mov	r7,a
      0004BD BF 0A 0A         [24] 1351 	cjne	r7,#0x0a,00124$
      0004C0 90r00r03         [24] 1352 	mov	dptr,#_getnumber_a_65536_65
      0004C3 E0               [24] 1353 	movx	a,@dptr
      0004C4 FF               [12] 1354 	mov	r7,a
      0004C5 BF 0D 02         [24] 1355 	cjne	r7,#0x0d,00475$
      0004C8 80 22            [24] 1356 	sjmp	00119$
      0004CA                       1357 00475$:
      0004CA                       1358 00124$:
      0004CA 90r00r04         [24] 1359 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      0004CD E0               [24] 1360 	movx	a,@dptr
      0004CE FF               [12] 1361 	mov	r7,a
      0004CF BF 0A 0A         [24] 1362 	cjne	r7,#0x0a,00126$
      0004D2 90r00r04         [24] 1363 	mov	dptr,#(_getnumber_a_65536_65 + 0x0001)
      0004D5 E0               [24] 1364 	movx	a,@dptr
      0004D6 FF               [12] 1365 	mov	r7,a
      0004D7 BF 0D 02         [24] 1366 	cjne	r7,#0x0d,00478$
      0004DA 80 10            [24] 1367 	sjmp	00119$
      0004DC                       1368 00478$:
      0004DC                       1369 00126$:
      0004DC 90r00r05         [24] 1370 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      0004DF E0               [24] 1371 	movx	a,@dptr
      0004E0 FF               [12] 1372 	mov	r7,a
      0004E1 BF 0A 23         [24] 1373 	cjne	r7,#0x0a,00120$
      0004E4 90r00r05         [24] 1374 	mov	dptr,#(_getnumber_a_65536_65 + 0x0002)
      0004E7 E0               [24] 1375 	movx	a,@dptr
      0004E8 FF               [12] 1376 	mov	r7,a
      0004E9 BF 0D 1B         [24] 1377 	cjne	r7,#0x0d,00120$
      0004EC                       1378 00119$:
                                   1379 ;	main.c:129: z=(int)strtol(a,NULL,16);   //FUNCTION TO CONVERT CHARACTER HEX STRING TO DECIMAL/HEX EQUIVALENT
      0004EC 90r00r00         [24] 1380 	mov	dptr,#_strtol_PARM_2
      0004EF E4               [12] 1381 	clr	a
      0004F0 F0               [24] 1382 	movx	@dptr,a
      0004F1 A3               [24] 1383 	inc	dptr
      0004F2 F0               [24] 1384 	movx	@dptr,a
      0004F3 A3               [24] 1385 	inc	dptr
      0004F4 F0               [24] 1386 	movx	@dptr,a
      0004F5 90r00r00         [24] 1387 	mov	dptr,#_strtol_PARM_3
      0004F8 74 10            [12] 1388 	mov	a,#0x10
      0004FA F0               [24] 1389 	movx	@dptr,a
      0004FB E4               [12] 1390 	clr	a
      0004FC A3               [24] 1391 	inc	dptr
      0004FD F0               [24] 1392 	movx	@dptr,a
      0004FE 90r00r03         [24] 1393 	mov	dptr,#_getnumber_a_65536_65
      000501 75 F0 00         [24] 1394 	mov	b,#0x00
                                   1395 ;	main.c:130: return (z);
      000504 02r00r00         [24] 1396 	ljmp	_strtol
      000507                       1397 00120$:
                                   1398 ;	main.c:133: return(-1);
      000507 90 FF FF         [24] 1399 	mov	dptr,#0xffff
                                   1400 ;	main.c:134: }
      00050A 22               [24] 1401 	ret
                                   1402 ;------------------------------------------------------------
                                   1403 ;Allocation info for local variables in function 'main'
                                   1404 ;------------------------------------------------------------
                                   1405 ;input                     Allocated with name '_main_input_131073_79'
                                   1406 ;write_address             Allocated with name '_main_write_address_327682_83'
                                   1407 ;internal_address          Allocated with name '_main_internal_address_327683_86'
                                   1408 ;page_selection_bits       Allocated with name '_main_page_selection_bits_327683_86'
                                   1409 ;page_block                Allocated with name '_main_page_block_327683_86'
                                   1410 ;data_write                Allocated with name '_main_data_write_327684_87'
                                   1411 ;i                         Allocated with name '_main_i_327685_90'
                                   1412 ;read_address              Allocated with name '_main_read_address_327682_102'
                                   1413 ;internal_address          Allocated with name '_main_internal_address_327683_105'
                                   1414 ;page_selection_bits       Allocated with name '_main_page_selection_bits_327683_105'
                                   1415 ;page_block                Allocated with name '_main_page_block_327683_105'
                                   1416 ;x1                        Allocated with name '_main_x1_327684_106'
                                   1417 ;hex_start_address         Allocated with name '_main_hex_start_address_327682_108'
                                   1418 ;hex_end_address           Allocated with name '_main_hex_end_address_327683_111'
                                   1419 ;page_address              Allocated with name '_main_page_address_327682_116'
                                   1420 ;internal_address3         Allocated with name '_main_internal_address3_327683_119'
                                   1421 ;page_selection_bits3      Allocated with name '_main_page_selection_bits3_327683_119'
                                   1422 ;data_to_write             Allocated with name '_main_data_to_write_327684_120'
                                   1423 ;------------------------------------------------------------
                                   1424 ;	main.c:138: void main()
                                   1425 ;	-----------------------------------------
                                   1426 ;	 function main
                                   1427 ;	-----------------------------------------
      00050B                       1428 _main:
                                   1429 ;	main.c:140: printf_tiny("\n\r~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n\r");    //PRINT STATEMENTS FOR THE USER INTERFACE
      00050B 74r00            [12] 1430 	mov	a,#___str_0
      00050D C0 E0            [24] 1431 	push	acc
      00050F 74s00            [12] 1432 	mov	a,#(___str_0 >> 8)
      000511 C0 E0            [24] 1433 	push	acc
      000513 12r00r00         [24] 1434 	lcall	_printf_tiny
      000516 15 81            [12] 1435 	dec	sp
      000518 15 81            [12] 1436 	dec	sp
                                   1437 ;	main.c:141: printf_tiny("\n\r~~~~~~~~~~~~~~~~~I2C~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n\r");
      00051A 74r35            [12] 1438 	mov	a,#___str_1
      00051C C0 E0            [24] 1439 	push	acc
      00051E 74s00            [12] 1440 	mov	a,#(___str_1 >> 8)
      000520 C0 E0            [24] 1441 	push	acc
      000522 12r00r00         [24] 1442 	lcall	_printf_tiny
      000525 15 81            [12] 1443 	dec	sp
      000527 15 81            [12] 1444 	dec	sp
                                   1445 ;	main.c:142: printf_tiny("\n\r~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n\r");
      000529 74r00            [12] 1446 	mov	a,#___str_0
      00052B C0 E0            [24] 1447 	push	acc
      00052D 74s00            [12] 1448 	mov	a,#(___str_0 >> 8)
      00052F C0 E0            [24] 1449 	push	acc
      000531 12r00r00         [24] 1450 	lcall	_printf_tiny
      000534 15 81            [12] 1451 	dec	sp
      000536 15 81            [12] 1452 	dec	sp
                                   1453 ;	main.c:143: printf_tiny("\n\rThe following commands will be performed \n\r");
      000538 74r6A            [12] 1454 	mov	a,#___str_2
      00053A C0 E0            [24] 1455 	push	acc
      00053C 74s00            [12] 1456 	mov	a,#(___str_2 >> 8)
      00053E C0 E0            [24] 1457 	push	acc
      000540 12r00r00         [24] 1458 	lcall	_printf_tiny
      000543 15 81            [12] 1459 	dec	sp
      000545 15 81            [12] 1460 	dec	sp
                                   1461 ;	main.c:144: printf_tiny("\n\rW-Write Byte \n\r");
      000547 74r98            [12] 1462 	mov	a,#___str_3
      000549 C0 E0            [24] 1463 	push	acc
      00054B 74s00            [12] 1464 	mov	a,#(___str_3 >> 8)
      00054D C0 E0            [24] 1465 	push	acc
      00054F 12r00r00         [24] 1466 	lcall	_printf_tiny
      000552 15 81            [12] 1467 	dec	sp
      000554 15 81            [12] 1468 	dec	sp
                                   1469 ;	main.c:145: printf_tiny("\n\rR-Read Byte \n\r");
      000556 74rAA            [12] 1470 	mov	a,#___str_4
      000558 C0 E0            [24] 1471 	push	acc
      00055A 74s00            [12] 1472 	mov	a,#(___str_4 >> 8)
      00055C C0 E0            [24] 1473 	push	acc
      00055E 12r00r00         [24] 1474 	lcall	_printf_tiny
      000561 15 81            [12] 1475 	dec	sp
      000563 15 81            [12] 1476 	dec	sp
                                   1477 ;	main.c:146: printf_tiny("\n\rH-Hex Dump \n\r");
      000565 74rBB            [12] 1478 	mov	a,#___str_5
      000567 C0 E0            [24] 1479 	push	acc
      000569 74s00            [12] 1480 	mov	a,#(___str_5 >> 8)
      00056B C0 E0            [24] 1481 	push	acc
      00056D 12r00r00         [24] 1482 	lcall	_printf_tiny
      000570 15 81            [12] 1483 	dec	sp
      000572 15 81            [12] 1484 	dec	sp
                                   1485 ;	main.c:147: printf_tiny("\n\rP-Page Write \n\r");
      000574 74rCB            [12] 1486 	mov	a,#___str_6
      000576 C0 E0            [24] 1487 	push	acc
      000578 74s00            [12] 1488 	mov	a,#(___str_6 >> 8)
      00057A C0 E0            [24] 1489 	push	acc
      00057C 12r00r00         [24] 1490 	lcall	_printf_tiny
      00057F 15 81            [12] 1491 	dec	sp
      000581 15 81            [12] 1492 	dec	sp
                                   1493 ;	main.c:148: printf_tiny("\n\rE-Reset Eeprom \n\r");
      000583 74rDD            [12] 1494 	mov	a,#___str_7
      000585 C0 E0            [24] 1495 	push	acc
      000587 74s00            [12] 1496 	mov	a,#(___str_7 >> 8)
      000589 C0 E0            [24] 1497 	push	acc
      00058B 12r00r00         [24] 1498 	lcall	_printf_tiny
      00058E 15 81            [12] 1499 	dec	sp
      000590 15 81            [12] 1500 	dec	sp
                                   1501 ;	main.c:150: while(1)
      000592                       1502 00189$:
                                   1503 ;	main.c:152: printf_tiny("\n\r~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n\r"); //PRINT STATEMENTS FOR THE SELECTING THE KEY
      000592 74r00            [12] 1504 	mov	a,#___str_0
      000594 C0 E0            [24] 1505 	push	acc
      000596 74s00            [12] 1506 	mov	a,#(___str_0 >> 8)
      000598 C0 E0            [24] 1507 	push	acc
      00059A 12r00r00         [24] 1508 	lcall	_printf_tiny
      00059D 15 81            [12] 1509 	dec	sp
      00059F 15 81            [12] 1510 	dec	sp
                                   1511 ;	main.c:153: printf_tiny("\n\rEnter The Key\n\r ");
      0005A1 74rF1            [12] 1512 	mov	a,#___str_8
      0005A3 C0 E0            [24] 1513 	push	acc
      0005A5 74s00            [12] 1514 	mov	a,#(___str_8 >> 8)
      0005A7 C0 E0            [24] 1515 	push	acc
      0005A9 12r00r00         [24] 1516 	lcall	_printf_tiny
      0005AC 15 81            [12] 1517 	dec	sp
      0005AE 15 81            [12] 1518 	dec	sp
                                   1519 ;	main.c:154: printf_tiny("\n\r~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n\r");
      0005B0 74r00            [12] 1520 	mov	a,#___str_0
      0005B2 C0 E0            [24] 1521 	push	acc
      0005B4 74s00            [12] 1522 	mov	a,#(___str_0 >> 8)
      0005B6 C0 E0            [24] 1523 	push	acc
      0005B8 12r00r00         [24] 1524 	lcall	_printf_tiny
      0005BB 15 81            [12] 1525 	dec	sp
      0005BD 15 81            [12] 1526 	dec	sp
                                   1527 ;	main.c:156: input=getchar();                          //TAKE INPUT IN FORM A CHARACTER FORM USER
      0005BF 12r10r05         [24] 1528 	lcall	_getchar
      0005C2 AE 82            [24] 1529 	mov	r6,dpl
                                   1530 ;	main.c:157: putchar(input);
      0005C4 8E 05            [24] 1531 	mov	ar5,r6
      0005C6 7F 00            [12] 1532 	mov	r7,#0x00
      0005C8 8D 82            [24] 1533 	mov	dpl,r5
      0005CA 8F 83            [24] 1534 	mov	dph,r7
      0005CC C0 06            [24] 1535 	push	ar6
      0005CE 12r0FrE8         [24] 1536 	lcall	_putchar
      0005D1 D0 06            [24] 1537 	pop	ar6
                                   1538 ;	main.c:159: if(input!='\n' && input!='\r')
      0005D3 BE 0A 02         [24] 1539 	cjne	r6,#0x0a,00457$
      0005D6 80 BA            [24] 1540 	sjmp	00189$
      0005D8                       1541 00457$:
      0005D8 BE 0D 02         [24] 1542 	cjne	r6,#0x0d,00458$
      0005DB 80 B5            [24] 1543 	sjmp	00189$
      0005DD                       1544 00458$:
                                   1545 ;	main.c:161: switch(input)
      0005DD BE 45 03         [24] 1546 	cjne	r6,#0x45,00459$
      0005E0 02r0Fr9D         [24] 1547 	ljmp	00182$
      0005E3                       1548 00459$:
      0005E3 BE 48 03         [24] 1549 	cjne	r6,#0x48,00460$
      0005E6 02r0Ar96         [24] 1550 	ljmp	00138$
      0005E9                       1551 00460$:
      0005E9 BE 50 03         [24] 1552 	cjne	r6,#0x50,00461$
      0005EC 02r0Dr2B         [24] 1553 	ljmp	00161$
      0005EF                       1554 00461$:
      0005EF BE 52 03         [24] 1555 	cjne	r6,#0x52,00462$
      0005F2 02r09r0A         [24] 1556 	ljmp	00127$
      0005F5                       1557 00462$:
      0005F5 BE 57 02         [24] 1558 	cjne	r6,#0x57,00463$
      0005F8 80 03            [24] 1559 	sjmp	00464$
      0005FA                       1560 00463$:
      0005FA 02r0FrD0         [24] 1561 	ljmp	00183$
      0005FD                       1562 00464$:
                                   1563 ;	main.c:165: printf_tiny("\n\r********************************************* \n\r");
      0005FD 74r04            [12] 1564 	mov	a,#___str_9
      0005FF C0 E0            [24] 1565 	push	acc
      000601 74s01            [12] 1566 	mov	a,#(___str_9 >> 8)
      000603 C0 E0            [24] 1567 	push	acc
      000605 12r00r00         [24] 1568 	lcall	_printf_tiny
      000608 15 81            [12] 1569 	dec	sp
      00060A 15 81            [12] 1570 	dec	sp
                                   1571 ;	main.c:166: printf_tiny("\n\r\t\tWRITE BYTE\n\r ");
      00060C 74r37            [12] 1572 	mov	a,#___str_10
      00060E C0 E0            [24] 1573 	push	acc
      000610 74s01            [12] 1574 	mov	a,#(___str_10 >> 8)
      000612 C0 E0            [24] 1575 	push	acc
      000614 12r00r00         [24] 1576 	lcall	_printf_tiny
      000617 15 81            [12] 1577 	dec	sp
      000619 15 81            [12] 1578 	dec	sp
                                   1579 ;	main.c:167: printf_tiny("\n\r********************************************* \n\r");
      00061B 74r04            [12] 1580 	mov	a,#___str_9
      00061D C0 E0            [24] 1581 	push	acc
      00061F 74s01            [12] 1582 	mov	a,#(___str_9 >> 8)
      000621 C0 E0            [24] 1583 	push	acc
      000623 12r00r00         [24] 1584 	lcall	_printf_tiny
      000626 15 81            [12] 1585 	dec	sp
      000628 15 81            [12] 1586 	dec	sp
                                   1587 ;	main.c:168: printf_tiny("\n\rEnter the 3 Digit Write Address\n\r");
      00062A 74r49            [12] 1588 	mov	a,#___str_11
      00062C C0 E0            [24] 1589 	push	acc
      00062E 74s01            [12] 1590 	mov	a,#(___str_11 >> 8)
      000630 C0 E0            [24] 1591 	push	acc
      000632 12r00r00         [24] 1592 	lcall	_printf_tiny
      000635 15 81            [12] 1593 	dec	sp
      000637 15 81            [12] 1594 	dec	sp
                                   1595 ;	main.c:169: int write_address=getnumber();                                  //ACCEPTING THE WRITE ADDRESS
      000639 12r02r26         [24] 1596 	lcall	_getnumber
      00063C E5 82            [12] 1597 	mov	a,dpl
      00063E 85 83 F0         [24] 1598 	mov	b,dph
      000641 90r00r07         [24] 1599 	mov	dptr,#_main_write_address_327682_83
      000644 F0               [24] 1600 	movx	@dptr,a
      000645 E5 F0            [12] 1601 	mov	a,b
      000647 A3               [24] 1602 	inc	dptr
      000648 F0               [24] 1603 	movx	@dptr,a
                                   1604 ;	main.c:170: while (write_address==-1)                                       //PRINT WRITE ADDRESS IS INVALID FOR INVALID CHARACTERS ENTERED
      000649                       1605 00102$:
      000649 90r00r07         [24] 1606 	mov	dptr,#_main_write_address_327682_83
      00064C E0               [24] 1607 	movx	a,@dptr
      00064D FE               [12] 1608 	mov	r6,a
      00064E A3               [24] 1609 	inc	dptr
      00064F E0               [24] 1610 	movx	a,@dptr
      000650 FF               [12] 1611 	mov	r7,a
      000651 BE FF 47         [24] 1612 	cjne	r6,#0xff,00109$
      000654 BF FF 44         [24] 1613 	cjne	r7,#0xff,00109$
                                   1614 ;	main.c:172: printf_tiny ("\n\rThe Write Address Entered is INVALID\n\r",write_address);
      000657 C0 07            [24] 1615 	push	ar7
      000659 C0 06            [24] 1616 	push	ar6
      00065B C0 06            [24] 1617 	push	ar6
      00065D C0 07            [24] 1618 	push	ar7
      00065F 74r6D            [12] 1619 	mov	a,#___str_12
      000661 C0 E0            [24] 1620 	push	acc
      000663 74s01            [12] 1621 	mov	a,#(___str_12 >> 8)
      000665 C0 E0            [24] 1622 	push	acc
      000667 12r00r00         [24] 1623 	lcall	_printf_tiny
      00066A E5 81            [12] 1624 	mov	a,sp
      00066C 24 FC            [12] 1625 	add	a,#0xfc
      00066E F5 81            [12] 1626 	mov	sp,a
      000670 D0 06            [24] 1627 	pop	ar6
      000672 D0 07            [24] 1628 	pop	ar7
                                   1629 ;	main.c:173: printf_tiny ("\n\rEnter a New Address\n\r",write_address);
      000674 C0 06            [24] 1630 	push	ar6
      000676 C0 07            [24] 1631 	push	ar7
      000678 74r96            [12] 1632 	mov	a,#___str_13
      00067A C0 E0            [24] 1633 	push	acc
      00067C 74s01            [12] 1634 	mov	a,#(___str_13 >> 8)
      00067E C0 E0            [24] 1635 	push	acc
      000680 12r00r00         [24] 1636 	lcall	_printf_tiny
      000683 E5 81            [12] 1637 	mov	a,sp
      000685 24 FC            [12] 1638 	add	a,#0xfc
      000687 F5 81            [12] 1639 	mov	sp,a
                                   1640 ;	main.c:174: write_address=getnumber();
      000689 12r02r26         [24] 1641 	lcall	_getnumber
      00068C E5 82            [12] 1642 	mov	a,dpl
      00068E 85 83 F0         [24] 1643 	mov	b,dph
      000691 90r00r07         [24] 1644 	mov	dptr,#_main_write_address_327682_83
      000694 F0               [24] 1645 	movx	@dptr,a
      000695 E5 F0            [12] 1646 	mov	a,b
      000697 A3               [24] 1647 	inc	dptr
      000698 F0               [24] 1648 	movx	@dptr,a
                                   1649 ;	main.c:176: while(!(write_address>=0 && write_address<=2047))              // CHECKING IF VALUE FALLS IN THE REQUIRED RANGE
      000699 80 AE            [24] 1650 	sjmp	00102$
      00069B                       1651 00109$:
      00069B 90r00r07         [24] 1652 	mov	dptr,#_main_write_address_327682_83
      00069E E0               [24] 1653 	movx	a,@dptr
      00069F FE               [12] 1654 	mov	r6,a
      0006A0 A3               [24] 1655 	inc	dptr
      0006A1 E0               [24] 1656 	movx	a,@dptr
      0006A2 FF               [12] 1657 	mov	r7,a
      0006A3 20 E7 0F         [24] 1658 	jb	acc.7,00110$
      0006A6 C3               [12] 1659 	clr	c
      0006A7 74 FF            [12] 1660 	mov	a,#0xff
      0006A9 9E               [12] 1661 	subb	a,r6
      0006AA 74 87            [12] 1662 	mov	a,#(0x07 ^ 0x80)
      0006AC 8F F0            [24] 1663 	mov	b,r7
      0006AE 63 F0 80         [24] 1664 	xrl	b,#0x80
      0006B1 95 F0            [12] 1665 	subb	a,b
      0006B3 50 6C            [24] 1666 	jnc	00111$
      0006B5                       1667 00110$:
                                   1668 ;	main.c:178: printf_tiny ("\n\rThe Write Address Entered is INVALID\n\r",write_address);
      0006B5 90r00r07         [24] 1669 	mov	dptr,#_main_write_address_327682_83
      0006B8 E0               [24] 1670 	movx	a,@dptr
      0006B9 FC               [12] 1671 	mov	r4,a
      0006BA A3               [24] 1672 	inc	dptr
      0006BB E0               [24] 1673 	movx	a,@dptr
      0006BC FD               [12] 1674 	mov	r5,a
      0006BD C0 05            [24] 1675 	push	ar5
      0006BF C0 04            [24] 1676 	push	ar4
      0006C1 C0 04            [24] 1677 	push	ar4
      0006C3 C0 05            [24] 1678 	push	ar5
      0006C5 74r6D            [12] 1679 	mov	a,#___str_12
      0006C7 C0 E0            [24] 1680 	push	acc
      0006C9 74s01            [12] 1681 	mov	a,#(___str_12 >> 8)
      0006CB C0 E0            [24] 1682 	push	acc
      0006CD 12r00r00         [24] 1683 	lcall	_printf_tiny
      0006D0 E5 81            [12] 1684 	mov	a,sp
      0006D2 24 FC            [12] 1685 	add	a,#0xfc
      0006D4 F5 81            [12] 1686 	mov	sp,a
      0006D6 D0 04            [24] 1687 	pop	ar4
      0006D8 D0 05            [24] 1688 	pop	ar5
                                   1689 ;	main.c:179: printf_tiny ("\n\rEnter a New Address\n\r",write_address);
      0006DA C0 04            [24] 1690 	push	ar4
      0006DC C0 05            [24] 1691 	push	ar5
      0006DE 74r96            [12] 1692 	mov	a,#___str_13
      0006E0 C0 E0            [24] 1693 	push	acc
      0006E2 74s01            [12] 1694 	mov	a,#(___str_13 >> 8)
      0006E4 C0 E0            [24] 1695 	push	acc
      0006E6 12r00r00         [24] 1696 	lcall	_printf_tiny
      0006E9 E5 81            [12] 1697 	mov	a,sp
      0006EB 24 FC            [12] 1698 	add	a,#0xfc
      0006ED F5 81            [12] 1699 	mov	sp,a
                                   1700 ;	main.c:180: write_address=getnumber();                                //IF NOT TAKE IT AGAIN
      0006EF 12r02r26         [24] 1701 	lcall	_getnumber
      0006F2 AC 82            [24] 1702 	mov	r4,dpl
      0006F4 AD 83            [24] 1703 	mov	r5,dph
      0006F6 90r00r07         [24] 1704 	mov	dptr,#_main_write_address_327682_83
      0006F9 EC               [12] 1705 	mov	a,r4
      0006FA F0               [24] 1706 	movx	@dptr,a
      0006FB ED               [12] 1707 	mov	a,r5
      0006FC A3               [24] 1708 	inc	dptr
      0006FD F0               [24] 1709 	movx	@dptr,a
                                   1710 ;	main.c:181: if(write_address!='\n' && write_address!='\r')
      0006FE BC 0A 05         [24] 1711 	cjne	r4,#0x0a,00469$
      000701 BD 00 02         [24] 1712 	cjne	r5,#0x00,00469$
      000704 80 95            [24] 1713 	sjmp	00109$
      000706                       1714 00469$:
      000706 BC 0D 05         [24] 1715 	cjne	r4,#0x0d,00470$
      000709 BD 00 02         [24] 1716 	cjne	r5,#0x00,00470$
      00070C 80 8D            [24] 1717 	sjmp	00109$
      00070E                       1718 00470$:
                                   1719 ;	main.c:182: write_address=getnumber();
      00070E 12r02r26         [24] 1720 	lcall	_getnumber
      000711 E5 82            [12] 1721 	mov	a,dpl
      000713 85 83 F0         [24] 1722 	mov	b,dph
      000716 90r00r07         [24] 1723 	mov	dptr,#_main_write_address_327682_83
      000719 F0               [24] 1724 	movx	@dptr,a
      00071A E5 F0            [12] 1725 	mov	a,b
      00071C A3               [24] 1726 	inc	dptr
      00071D F0               [24] 1727 	movx	@dptr,a
      00071E 02r06r9B         [24] 1728 	ljmp	00109$
      000721                       1729 00111$:
                                   1730 ;	main.c:185: printf_tiny ("\n\rThe Address for Write Operation is %x.\n\r",write_address);
      000721 C0 07            [24] 1731 	push	ar7
      000723 C0 06            [24] 1732 	push	ar6
      000725 C0 06            [24] 1733 	push	ar6
      000727 C0 07            [24] 1734 	push	ar7
      000729 74rAE            [12] 1735 	mov	a,#___str_14
      00072B C0 E0            [24] 1736 	push	acc
      00072D 74s01            [12] 1737 	mov	a,#(___str_14 >> 8)
      00072F C0 E0            [24] 1738 	push	acc
      000731 12r00r00         [24] 1739 	lcall	_printf_tiny
      000734 E5 81            [12] 1740 	mov	a,sp
      000736 24 FC            [12] 1741 	add	a,#0xfc
      000738 F5 81            [12] 1742 	mov	sp,a
      00073A D0 06            [24] 1743 	pop	ar6
      00073C D0 07            [24] 1744 	pop	ar7
                                   1745 ;	main.c:188: int page_selection_bits=write_address&0x700;            //REMOVING THE BITS DECIDING PAGE BLOCK SELECTION
      00073E 7C 00            [12] 1746 	mov	r4,#0x00
      000740 74 07            [12] 1747 	mov	a,#0x07
      000742 5F               [12] 1748 	anl	a,r7
                                   1749 ;	main.c:189: int page_block=page_selection_bits>>7;
      000743 A2 E7            [12] 1750 	mov	c,acc.7
      000745 CC               [12] 1751 	xch	a,r4
      000746 33               [12] 1752 	rlc	a
      000747 CC               [12] 1753 	xch	a,r4
      000748 33               [12] 1754 	rlc	a
      000749 CC               [12] 1755 	xch	a,r4
      00074A 54 01            [12] 1756 	anl	a,#0x01
      00074C 30 E0 02         [24] 1757 	jnb	acc.0,00471$
      00074F 44 FE            [12] 1758 	orl	a,#0xfe
      000751                       1759 00471$:
      000751 FD               [12] 1760 	mov	r5,a
                                   1761 ;	main.c:190: EEPROM_CMD=0xA0|page_block;                             //MAKING THE READ, WRITE COMMAND BY PERFORMING OR OPERATIOIN WITH THE PAGE SELECTION BITS
      000752 90r00r00         [24] 1762 	mov	dptr,#_EEPROM_CMD
      000755 74 A0            [12] 1763 	mov	a,#0xa0
      000757 4C               [12] 1764 	orl	a,r4
      000758 F0               [24] 1765 	movx	@dptr,a
      000759 ED               [12] 1766 	mov	a,r5
      00075A A3               [24] 1767 	inc	dptr
      00075B F0               [24] 1768 	movx	@dptr,a
                                   1769 ;	main.c:191: word_address=internal_address&0x0FF;                    //USING THE WORD ADDRESS FROM THE INTERNAL ADDRESS SCHEME
      00075C 90r00r04         [24] 1770 	mov	dptr,#_word_address
      00075F EE               [12] 1771 	mov	a,r6
      000760 F0               [24] 1772 	movx	@dptr,a
      000761 E4               [12] 1773 	clr	a
      000762 A3               [24] 1774 	inc	dptr
      000763 F0               [24] 1775 	movx	@dptr,a
                                   1776 ;	main.c:192: printf_tiny("\n\rEnter the 2 Digit Data value to be Written\n\r");
      000764 74rD9            [12] 1777 	mov	a,#___str_15
      000766 C0 E0            [24] 1778 	push	acc
      000768 74s01            [12] 1779 	mov	a,#(___str_15 >> 8)
      00076A C0 E0            [24] 1780 	push	acc
      00076C 12r00r00         [24] 1781 	lcall	_printf_tiny
      00076F 15 81            [12] 1782 	dec	sp
      000771 15 81            [12] 1783 	dec	sp
                                   1784 ;	main.c:193: int data_write=getdata();                               //ACCEPTING THE WRITE BYTE
      000773 12r00r00         [24] 1785 	lcall	_getdata
      000776 E5 82            [12] 1786 	mov	a,dpl
      000778 85 83 F0         [24] 1787 	mov	b,dph
      00077B 90r00r09         [24] 1788 	mov	dptr,#_main_data_write_327684_87
      00077E F0               [24] 1789 	movx	@dptr,a
      00077F E5 F0            [12] 1790 	mov	a,b
      000781 A3               [24] 1791 	inc	dptr
      000782 F0               [24] 1792 	movx	@dptr,a
                                   1793 ;	main.c:195: while (data_write==-1)                                  //PRINT WRITE DATA IS INVALID FOR INVALID CHARACTERS ENTERED
      000783                       1794 00112$:
      000783 90r00r09         [24] 1795 	mov	dptr,#_main_data_write_327684_87
      000786 E0               [24] 1796 	movx	a,@dptr
      000787 FE               [12] 1797 	mov	r6,a
      000788 A3               [24] 1798 	inc	dptr
      000789 E0               [24] 1799 	movx	a,@dptr
      00078A FF               [12] 1800 	mov	r7,a
      00078B BE FF 47         [24] 1801 	cjne	r6,#0xff,00119$
      00078E BF FF 44         [24] 1802 	cjne	r7,#0xff,00119$
                                   1803 ;	main.c:197: printf_tiny ("\n\rData Entered is INVALID\n\r",data_write);
      000791 C0 07            [24] 1804 	push	ar7
      000793 C0 06            [24] 1805 	push	ar6
      000795 C0 06            [24] 1806 	push	ar6
      000797 C0 07            [24] 1807 	push	ar7
      000799 74r08            [12] 1808 	mov	a,#___str_16
      00079B C0 E0            [24] 1809 	push	acc
      00079D 74s02            [12] 1810 	mov	a,#(___str_16 >> 8)
      00079F C0 E0            [24] 1811 	push	acc
      0007A1 12r00r00         [24] 1812 	lcall	_printf_tiny
      0007A4 E5 81            [12] 1813 	mov	a,sp
      0007A6 24 FC            [12] 1814 	add	a,#0xfc
      0007A8 F5 81            [12] 1815 	mov	sp,a
      0007AA D0 06            [24] 1816 	pop	ar6
      0007AC D0 07            [24] 1817 	pop	ar7
                                   1818 ;	main.c:198: printf_tiny ("\n\rEnter a New Data\n\r",data_write);
      0007AE C0 06            [24] 1819 	push	ar6
      0007B0 C0 07            [24] 1820 	push	ar7
      0007B2 74r24            [12] 1821 	mov	a,#___str_17
      0007B4 C0 E0            [24] 1822 	push	acc
      0007B6 74s02            [12] 1823 	mov	a,#(___str_17 >> 8)
      0007B8 C0 E0            [24] 1824 	push	acc
      0007BA 12r00r00         [24] 1825 	lcall	_printf_tiny
      0007BD E5 81            [12] 1826 	mov	a,sp
      0007BF 24 FC            [12] 1827 	add	a,#0xfc
      0007C1 F5 81            [12] 1828 	mov	sp,a
                                   1829 ;	main.c:200: data_write=getdata();
      0007C3 12r00r00         [24] 1830 	lcall	_getdata
      0007C6 E5 82            [12] 1831 	mov	a,dpl
      0007C8 85 83 F0         [24] 1832 	mov	b,dph
      0007CB 90r00r09         [24] 1833 	mov	dptr,#_main_data_write_327684_87
      0007CE F0               [24] 1834 	movx	@dptr,a
      0007CF E5 F0            [12] 1835 	mov	a,b
      0007D1 A3               [24] 1836 	inc	dptr
      0007D2 F0               [24] 1837 	movx	@dptr,a
                                   1838 ;	main.c:202: while(!(data_write>=0 && data_write<=255))               // CHECKING IF VALUE FALLS IN THE REQUIRED RANGE
      0007D3 80 AE            [24] 1839 	sjmp	00112$
      0007D5                       1840 00119$:
      0007D5 90r00r09         [24] 1841 	mov	dptr,#_main_data_write_327684_87
      0007D8 E0               [24] 1842 	movx	a,@dptr
      0007D9 FE               [12] 1843 	mov	r6,a
      0007DA A3               [24] 1844 	inc	dptr
      0007DB E0               [24] 1845 	movx	a,@dptr
      0007DC FF               [12] 1846 	mov	r7,a
      0007DD 20 E7 0F         [24] 1847 	jb	acc.7,00120$
      0007E0 C3               [12] 1848 	clr	c
      0007E1 74 FF            [12] 1849 	mov	a,#0xff
      0007E3 9E               [12] 1850 	subb	a,r6
      0007E4 74 80            [12] 1851 	mov	a,#(0x00 ^ 0x80)
      0007E6 8F F0            [24] 1852 	mov	b,r7
      0007E8 63 F0 80         [24] 1853 	xrl	b,#0x80
      0007EB 95 F0            [12] 1854 	subb	a,b
      0007ED 50 6C            [24] 1855 	jnc	00121$
      0007EF                       1856 00120$:
                                   1857 ;	main.c:204: printf_tiny ("\n\rData Entered is INVALID\n\r",data_write);
      0007EF 90r00r09         [24] 1858 	mov	dptr,#_main_data_write_327684_87
      0007F2 E0               [24] 1859 	movx	a,@dptr
      0007F3 FC               [12] 1860 	mov	r4,a
      0007F4 A3               [24] 1861 	inc	dptr
      0007F5 E0               [24] 1862 	movx	a,@dptr
      0007F6 FD               [12] 1863 	mov	r5,a
      0007F7 C0 05            [24] 1864 	push	ar5
      0007F9 C0 04            [24] 1865 	push	ar4
      0007FB C0 04            [24] 1866 	push	ar4
      0007FD C0 05            [24] 1867 	push	ar5
      0007FF 74r08            [12] 1868 	mov	a,#___str_16
      000801 C0 E0            [24] 1869 	push	acc
      000803 74s02            [12] 1870 	mov	a,#(___str_16 >> 8)
      000805 C0 E0            [24] 1871 	push	acc
      000807 12r00r00         [24] 1872 	lcall	_printf_tiny
      00080A E5 81            [12] 1873 	mov	a,sp
      00080C 24 FC            [12] 1874 	add	a,#0xfc
      00080E F5 81            [12] 1875 	mov	sp,a
      000810 D0 04            [24] 1876 	pop	ar4
      000812 D0 05            [24] 1877 	pop	ar5
                                   1878 ;	main.c:205: printf_tiny ("\n\rEnter a New Data\n\r",data_write);
      000814 C0 04            [24] 1879 	push	ar4
      000816 C0 05            [24] 1880 	push	ar5
      000818 74r24            [12] 1881 	mov	a,#___str_17
      00081A C0 E0            [24] 1882 	push	acc
      00081C 74s02            [12] 1883 	mov	a,#(___str_17 >> 8)
      00081E C0 E0            [24] 1884 	push	acc
      000820 12r00r00         [24] 1885 	lcall	_printf_tiny
      000823 E5 81            [12] 1886 	mov	a,sp
      000825 24 FC            [12] 1887 	add	a,#0xfc
      000827 F5 81            [12] 1888 	mov	sp,a
                                   1889 ;	main.c:206: data_write=getdata();
      000829 12r00r00         [24] 1890 	lcall	_getdata
      00082C AC 82            [24] 1891 	mov	r4,dpl
      00082E AD 83            [24] 1892 	mov	r5,dph
      000830 90r00r09         [24] 1893 	mov	dptr,#_main_data_write_327684_87
      000833 EC               [12] 1894 	mov	a,r4
      000834 F0               [24] 1895 	movx	@dptr,a
      000835 ED               [12] 1896 	mov	a,r5
      000836 A3               [24] 1897 	inc	dptr
      000837 F0               [24] 1898 	movx	@dptr,a
                                   1899 ;	main.c:207: if(data_write!='\n' && data_write!='\r')
      000838 BC 0A 05         [24] 1900 	cjne	r4,#0x0a,00476$
      00083B BD 00 02         [24] 1901 	cjne	r5,#0x00,00476$
      00083E 80 95            [24] 1902 	sjmp	00119$
      000840                       1903 00476$:
      000840 BC 0D 05         [24] 1904 	cjne	r4,#0x0d,00477$
      000843 BD 00 02         [24] 1905 	cjne	r5,#0x00,00477$
      000846 80 8D            [24] 1906 	sjmp	00119$
      000848                       1907 00477$:
                                   1908 ;	main.c:208: data_write=getdata();                           //IF NOT TAKE IT AGAIN
      000848 12r00r00         [24] 1909 	lcall	_getdata
      00084B E5 82            [12] 1910 	mov	a,dpl
      00084D 85 83 F0         [24] 1911 	mov	b,dph
      000850 90r00r09         [24] 1912 	mov	dptr,#_main_data_write_327684_87
      000853 F0               [24] 1913 	movx	@dptr,a
      000854 E5 F0            [12] 1914 	mov	a,b
      000856 A3               [24] 1915 	inc	dptr
      000857 F0               [24] 1916 	movx	@dptr,a
      000858 02r07rD5         [24] 1917 	ljmp	00119$
      00085B                       1918 00121$:
                                   1919 ;	main.c:210: printf ("\n\rData Value to be Written is %x.\n\r",data_write);
      00085B C0 07            [24] 1920 	push	ar7
      00085D C0 06            [24] 1921 	push	ar6
      00085F C0 06            [24] 1922 	push	ar6
      000861 C0 07            [24] 1923 	push	ar7
      000863 74r39            [12] 1924 	mov	a,#___str_18
      000865 C0 E0            [24] 1925 	push	acc
      000867 74s02            [12] 1926 	mov	a,#(___str_18 >> 8)
      000869 C0 E0            [24] 1927 	push	acc
      00086B 74 80            [12] 1928 	mov	a,#0x80
      00086D C0 E0            [24] 1929 	push	acc
      00086F 12r00r00         [24] 1930 	lcall	_printf
      000872 E5 81            [12] 1931 	mov	a,sp
      000874 24 FB            [12] 1932 	add	a,#0xfb
      000876 F5 81            [12] 1933 	mov	sp,a
      000878 D0 06            [24] 1934 	pop	ar6
      00087A D0 07            [24] 1935 	pop	ar7
                                   1936 ;	main.c:211: EEPROM_WrByte(word_address, data_write);                //CALLING THE FUNCTION TO WRITE BYTE AT A GIVEN LOCATION
      00087C 90r00r04         [24] 1937 	mov	dptr,#_word_address
      00087F E0               [24] 1938 	movx	a,@dptr
      000880 FC               [12] 1939 	mov	r4,a
      000881 A3               [24] 1940 	inc	dptr
      000882 E0               [24] 1941 	movx	a,@dptr
      000883 FD               [12] 1942 	mov	r5,a
      000884 90r00r00         [24] 1943 	mov	dptr,#_EEPROM_WrByte_PARM_2
      000887 EE               [12] 1944 	mov	a,r6
      000888 F0               [24] 1945 	movx	@dptr,a
      000889 EF               [12] 1946 	mov	a,r7
      00088A A3               [24] 1947 	inc	dptr
      00088B F0               [24] 1948 	movx	@dptr,a
      00088C 8C 82            [24] 1949 	mov	dpl,r4
      00088E 8D 83            [24] 1950 	mov	dph,r5
      000890 12r00r00         [24] 1951 	lcall	_EEPROM_WrByte
                                   1952 ;	main.c:214: for (i=0; i<100; i++)
      000893 7E 64            [12] 1953 	mov	r6,#0x64
      000895 7F 00            [12] 1954 	mov	r7,#0x00
      000897                       1955 00193$:
                                   1956 ;	main.c:216: Delay();
      000897 C0 07            [24] 1957 	push	ar7
      000899 C0 06            [24] 1958 	push	ar6
      00089B 12r00r00         [24] 1959 	lcall	_Delay
      00089E D0 06            [24] 1960 	pop	ar6
      0008A0 D0 07            [24] 1961 	pop	ar7
      0008A2 1E               [12] 1962 	dec	r6
      0008A3 BE FF 01         [24] 1963 	cjne	r6,#0xff,00478$
      0008A6 1F               [12] 1964 	dec	r7
      0008A7                       1965 00478$:
                                   1966 ;	main.c:214: for (i=0; i<100; i++)
      0008A7 EE               [12] 1967 	mov	a,r6
      0008A8 4F               [12] 1968 	orl	a,r7
                                   1969 ;	main.c:218: for (i=0; i<100; i++)
      0008A9 70 EC            [24] 1970 	jnz	00193$
      0008AB 7E 64            [12] 1971 	mov	r6,#0x64
      0008AD FF               [12] 1972 	mov	r7,a
      0008AE                       1973 00196$:
                                   1974 ;	main.c:220: Delay();
      0008AE C0 07            [24] 1975 	push	ar7
      0008B0 C0 06            [24] 1976 	push	ar6
      0008B2 12r00r00         [24] 1977 	lcall	_Delay
      0008B5 D0 06            [24] 1978 	pop	ar6
      0008B7 D0 07            [24] 1979 	pop	ar7
      0008B9 1E               [12] 1980 	dec	r6
      0008BA BE FF 01         [24] 1981 	cjne	r6,#0xff,00480$
      0008BD 1F               [12] 1982 	dec	r7
      0008BE                       1983 00480$:
                                   1984 ;	main.c:218: for (i=0; i<100; i++)
      0008BE EE               [12] 1985 	mov	a,r6
      0008BF 4F               [12] 1986 	orl	a,r7
                                   1987 ;	main.c:222: for (i=0; i<100; i++)
      0008C0 70 EC            [24] 1988 	jnz	00196$
      0008C2 7E 64            [12] 1989 	mov	r6,#0x64
      0008C4 FF               [12] 1990 	mov	r7,a
      0008C5                       1991 00199$:
                                   1992 ;	main.c:224: Delay();
      0008C5 C0 07            [24] 1993 	push	ar7
      0008C7 C0 06            [24] 1994 	push	ar6
      0008C9 12r00r00         [24] 1995 	lcall	_Delay
      0008CC D0 06            [24] 1996 	pop	ar6
      0008CE D0 07            [24] 1997 	pop	ar7
      0008D0 1E               [12] 1998 	dec	r6
      0008D1 BE FF 01         [24] 1999 	cjne	r6,#0xff,00482$
      0008D4 1F               [12] 2000 	dec	r7
      0008D5                       2001 00482$:
                                   2002 ;	main.c:222: for (i=0; i<100; i++)
      0008D5 EE               [12] 2003 	mov	a,r6
      0008D6 4F               [12] 2004 	orl	a,r7
                                   2005 ;	main.c:226: for (i=0; i<100; i++)
      0008D7 70 EC            [24] 2006 	jnz	00199$
      0008D9 7E 64            [12] 2007 	mov	r6,#0x64
      0008DB FF               [12] 2008 	mov	r7,a
      0008DC                       2009 00202$:
                                   2010 ;	main.c:228: Delay();
      0008DC C0 07            [24] 2011 	push	ar7
      0008DE C0 06            [24] 2012 	push	ar6
      0008E0 12r00r00         [24] 2013 	lcall	_Delay
      0008E3 D0 06            [24] 2014 	pop	ar6
      0008E5 D0 07            [24] 2015 	pop	ar7
      0008E7 1E               [12] 2016 	dec	r6
      0008E8 BE FF 01         [24] 2017 	cjne	r6,#0xff,00484$
      0008EB 1F               [12] 2018 	dec	r7
      0008EC                       2019 00484$:
                                   2020 ;	main.c:226: for (i=0; i<100; i++)
      0008EC EE               [12] 2021 	mov	a,r6
      0008ED 4F               [12] 2022 	orl	a,r7
                                   2023 ;	main.c:231: for (i=0; i<100; i++)
      0008EE 70 EC            [24] 2024 	jnz	00202$
      0008F0 7E 64            [12] 2025 	mov	r6,#0x64
      0008F2 FF               [12] 2026 	mov	r7,a
      0008F3                       2027 00205$:
                                   2028 ;	main.c:233: Delay();
      0008F3 C0 07            [24] 2029 	push	ar7
      0008F5 C0 06            [24] 2030 	push	ar6
      0008F7 12r00r00         [24] 2031 	lcall	_Delay
      0008FA D0 06            [24] 2032 	pop	ar6
      0008FC D0 07            [24] 2033 	pop	ar7
      0008FE 1E               [12] 2034 	dec	r6
      0008FF BE FF 01         [24] 2035 	cjne	r6,#0xff,00486$
      000902 1F               [12] 2036 	dec	r7
      000903                       2037 00486$:
                                   2038 ;	main.c:231: for (i=0; i<100; i++)
      000903 EE               [12] 2039 	mov	a,r6
      000904 4F               [12] 2040 	orl	a,r7
      000905 70 EC            [24] 2041 	jnz	00205$
                                   2042 ;	main.c:236: break;
      000907 02r05r92         [24] 2043 	ljmp	00189$
                                   2044 ;	main.c:238: case('R'):                                                                  //READ OPERATION
      00090A                       2045 00127$:
                                   2046 ;	main.c:240: printf_tiny("\n\r********************************************* \n\r");
      00090A 74r04            [12] 2047 	mov	a,#___str_9
      00090C C0 E0            [24] 2048 	push	acc
      00090E 74s01            [12] 2049 	mov	a,#(___str_9 >> 8)
      000910 C0 E0            [24] 2050 	push	acc
      000912 12r00r00         [24] 2051 	lcall	_printf_tiny
      000915 15 81            [12] 2052 	dec	sp
      000917 15 81            [12] 2053 	dec	sp
                                   2054 ;	main.c:241: printf_tiny("\n\r\t\tREAD BYTE\n\r ");
      000919 74r5D            [12] 2055 	mov	a,#___str_19
      00091B C0 E0            [24] 2056 	push	acc
      00091D 74s02            [12] 2057 	mov	a,#(___str_19 >> 8)
      00091F C0 E0            [24] 2058 	push	acc
      000921 12r00r00         [24] 2059 	lcall	_printf_tiny
      000924 15 81            [12] 2060 	dec	sp
      000926 15 81            [12] 2061 	dec	sp
                                   2062 ;	main.c:242: printf_tiny("\n\r********************************************* \n\r");
      000928 74r04            [12] 2063 	mov	a,#___str_9
      00092A C0 E0            [24] 2064 	push	acc
      00092C 74s01            [12] 2065 	mov	a,#(___str_9 >> 8)
      00092E C0 E0            [24] 2066 	push	acc
      000930 12r00r00         [24] 2067 	lcall	_printf_tiny
      000933 15 81            [12] 2068 	dec	sp
      000935 15 81            [12] 2069 	dec	sp
                                   2070 ;	main.c:243: printf_tiny("\n\rEnter the 3 Digit Read Address\n\r");
      000937 74r6E            [12] 2071 	mov	a,#___str_20
      000939 C0 E0            [24] 2072 	push	acc
      00093B 74s02            [12] 2073 	mov	a,#(___str_20 >> 8)
      00093D C0 E0            [24] 2074 	push	acc
      00093F 12r00r00         [24] 2075 	lcall	_printf_tiny
      000942 15 81            [12] 2076 	dec	sp
      000944 15 81            [12] 2077 	dec	sp
                                   2078 ;	main.c:244: int read_address=getnumber();                                           //ACCEPTING THE READ ADDRESS
      000946 12r02r26         [24] 2079 	lcall	_getnumber
      000949 E5 82            [12] 2080 	mov	a,dpl
      00094B 85 83 F0         [24] 2081 	mov	b,dph
      00094E 90r00r0B         [24] 2082 	mov	dptr,#_main_read_address_327682_102
      000951 F0               [24] 2083 	movx	@dptr,a
      000952 E5 F0            [12] 2084 	mov	a,b
      000954 A3               [24] 2085 	inc	dptr
      000955 F0               [24] 2086 	movx	@dptr,a
                                   2087 ;	main.c:245: while (read_address==-1)                                                //PRINT READ ADDRESS IS INVALID FOR INVALID CHARACTERS ENTERED
      000956                       2088 00128$:
      000956 90r00r0B         [24] 2089 	mov	dptr,#_main_read_address_327682_102
      000959 E0               [24] 2090 	movx	a,@dptr
      00095A FE               [12] 2091 	mov	r6,a
      00095B A3               [24] 2092 	inc	dptr
      00095C E0               [24] 2093 	movx	a,@dptr
      00095D FF               [12] 2094 	mov	r7,a
      00095E BE FF 47         [24] 2095 	cjne	r6,#0xff,00135$
      000961 BF FF 44         [24] 2096 	cjne	r7,#0xff,00135$
                                   2097 ;	main.c:247: printf_tiny ("\n\rRead Address entered is INVALID\n\r",read_address);
      000964 C0 07            [24] 2098 	push	ar7
      000966 C0 06            [24] 2099 	push	ar6
      000968 C0 06            [24] 2100 	push	ar6
      00096A C0 07            [24] 2101 	push	ar7
      00096C 74r91            [12] 2102 	mov	a,#___str_21
      00096E C0 E0            [24] 2103 	push	acc
      000970 74s02            [12] 2104 	mov	a,#(___str_21 >> 8)
      000972 C0 E0            [24] 2105 	push	acc
      000974 12r00r00         [24] 2106 	lcall	_printf_tiny
      000977 E5 81            [12] 2107 	mov	a,sp
      000979 24 FC            [12] 2108 	add	a,#0xfc
      00097B F5 81            [12] 2109 	mov	sp,a
      00097D D0 06            [24] 2110 	pop	ar6
      00097F D0 07            [24] 2111 	pop	ar7
                                   2112 ;	main.c:248: printf_tiny ("\n\rEnter a New Read Address\n\r",read_address);
      000981 C0 06            [24] 2113 	push	ar6
      000983 C0 07            [24] 2114 	push	ar7
      000985 74rB5            [12] 2115 	mov	a,#___str_22
      000987 C0 E0            [24] 2116 	push	acc
      000989 74s02            [12] 2117 	mov	a,#(___str_22 >> 8)
      00098B C0 E0            [24] 2118 	push	acc
      00098D 12r00r00         [24] 2119 	lcall	_printf_tiny
      000990 E5 81            [12] 2120 	mov	a,sp
      000992 24 FC            [12] 2121 	add	a,#0xfc
      000994 F5 81            [12] 2122 	mov	sp,a
                                   2123 ;	main.c:250: read_address=getnumber();
      000996 12r02r26         [24] 2124 	lcall	_getnumber
      000999 E5 82            [12] 2125 	mov	a,dpl
      00099B 85 83 F0         [24] 2126 	mov	b,dph
      00099E 90r00r0B         [24] 2127 	mov	dptr,#_main_read_address_327682_102
      0009A1 F0               [24] 2128 	movx	@dptr,a
      0009A2 E5 F0            [12] 2129 	mov	a,b
      0009A4 A3               [24] 2130 	inc	dptr
      0009A5 F0               [24] 2131 	movx	@dptr,a
                                   2132 ;	main.c:252: while(!(read_address>=0 && read_address<=2047))                         // CHECKING IF VALUE FALLS IN THE REQUIRED RANGE
      0009A6 80 AE            [24] 2133 	sjmp	00128$
      0009A8                       2134 00135$:
      0009A8 90r00r0B         [24] 2135 	mov	dptr,#_main_read_address_327682_102
      0009AB E0               [24] 2136 	movx	a,@dptr
      0009AC FE               [12] 2137 	mov	r6,a
      0009AD A3               [24] 2138 	inc	dptr
      0009AE E0               [24] 2139 	movx	a,@dptr
      0009AF FF               [12] 2140 	mov	r7,a
      0009B0 20 E7 0F         [24] 2141 	jb	acc.7,00136$
      0009B3 C3               [12] 2142 	clr	c
      0009B4 74 FF            [12] 2143 	mov	a,#0xff
      0009B6 9E               [12] 2144 	subb	a,r6
      0009B7 74 87            [12] 2145 	mov	a,#(0x07 ^ 0x80)
      0009B9 8F F0            [24] 2146 	mov	b,r7
      0009BB 63 F0 80         [24] 2147 	xrl	b,#0x80
      0009BE 95 F0            [12] 2148 	subb	a,b
      0009C0 50 6C            [24] 2149 	jnc	00137$
      0009C2                       2150 00136$:
                                   2151 ;	main.c:254: printf_tiny ("\n\rRead Address entered is INVALID\n\r",read_address);
      0009C2 90r00r0B         [24] 2152 	mov	dptr,#_main_read_address_327682_102
      0009C5 E0               [24] 2153 	movx	a,@dptr
      0009C6 FC               [12] 2154 	mov	r4,a
      0009C7 A3               [24] 2155 	inc	dptr
      0009C8 E0               [24] 2156 	movx	a,@dptr
      0009C9 FD               [12] 2157 	mov	r5,a
      0009CA C0 05            [24] 2158 	push	ar5
      0009CC C0 04            [24] 2159 	push	ar4
      0009CE C0 04            [24] 2160 	push	ar4
      0009D0 C0 05            [24] 2161 	push	ar5
      0009D2 74r91            [12] 2162 	mov	a,#___str_21
      0009D4 C0 E0            [24] 2163 	push	acc
      0009D6 74s02            [12] 2164 	mov	a,#(___str_21 >> 8)
      0009D8 C0 E0            [24] 2165 	push	acc
      0009DA 12r00r00         [24] 2166 	lcall	_printf_tiny
      0009DD E5 81            [12] 2167 	mov	a,sp
      0009DF 24 FC            [12] 2168 	add	a,#0xfc
      0009E1 F5 81            [12] 2169 	mov	sp,a
      0009E3 D0 04            [24] 2170 	pop	ar4
      0009E5 D0 05            [24] 2171 	pop	ar5
                                   2172 ;	main.c:255: printf_tiny ("\n\rEnter a New Read Address\n\r",read_address);
      0009E7 C0 04            [24] 2173 	push	ar4
      0009E9 C0 05            [24] 2174 	push	ar5
      0009EB 74rB5            [12] 2175 	mov	a,#___str_22
      0009ED C0 E0            [24] 2176 	push	acc
      0009EF 74s02            [12] 2177 	mov	a,#(___str_22 >> 8)
      0009F1 C0 E0            [24] 2178 	push	acc
      0009F3 12r00r00         [24] 2179 	lcall	_printf_tiny
      0009F6 E5 81            [12] 2180 	mov	a,sp
      0009F8 24 FC            [12] 2181 	add	a,#0xfc
      0009FA F5 81            [12] 2182 	mov	sp,a
                                   2183 ;	main.c:256: read_address=getnumber();                                           //IF NOT TAKE IT AGAIN
      0009FC 12r02r26         [24] 2184 	lcall	_getnumber
      0009FF AC 82            [24] 2185 	mov	r4,dpl
      000A01 AD 83            [24] 2186 	mov	r5,dph
      000A03 90r00r0B         [24] 2187 	mov	dptr,#_main_read_address_327682_102
      000A06 EC               [12] 2188 	mov	a,r4
      000A07 F0               [24] 2189 	movx	@dptr,a
      000A08 ED               [12] 2190 	mov	a,r5
      000A09 A3               [24] 2191 	inc	dptr
      000A0A F0               [24] 2192 	movx	@dptr,a
                                   2193 ;	main.c:257: if(read_address!='\n' && read_address!='\r')
      000A0B BC 0A 05         [24] 2194 	cjne	r4,#0x0a,00492$
      000A0E BD 00 02         [24] 2195 	cjne	r5,#0x00,00492$
      000A11 80 95            [24] 2196 	sjmp	00135$
      000A13                       2197 00492$:
      000A13 BC 0D 05         [24] 2198 	cjne	r4,#0x0d,00493$
      000A16 BD 00 02         [24] 2199 	cjne	r5,#0x00,00493$
      000A19 80 8D            [24] 2200 	sjmp	00135$
      000A1B                       2201 00493$:
                                   2202 ;	main.c:258: read_address=getnumber();
      000A1B 12r02r26         [24] 2203 	lcall	_getnumber
      000A1E E5 82            [12] 2204 	mov	a,dpl
      000A20 85 83 F0         [24] 2205 	mov	b,dph
      000A23 90r00r0B         [24] 2206 	mov	dptr,#_main_read_address_327682_102
      000A26 F0               [24] 2207 	movx	@dptr,a
      000A27 E5 F0            [12] 2208 	mov	a,b
      000A29 A3               [24] 2209 	inc	dptr
      000A2A F0               [24] 2210 	movx	@dptr,a
      000A2B 02r09rA8         [24] 2211 	ljmp	00135$
      000A2E                       2212 00137$:
                                   2213 ;	main.c:260: printf_tiny ("\n\rThe Read Byte Address is %x.\n\r",read_address);
      000A2E C0 07            [24] 2214 	push	ar7
      000A30 C0 06            [24] 2215 	push	ar6
      000A32 C0 06            [24] 2216 	push	ar6
      000A34 C0 07            [24] 2217 	push	ar7
      000A36 74rD2            [12] 2218 	mov	a,#___str_23
      000A38 C0 E0            [24] 2219 	push	acc
      000A3A 74s02            [12] 2220 	mov	a,#(___str_23 >> 8)
      000A3C C0 E0            [24] 2221 	push	acc
      000A3E 12r00r00         [24] 2222 	lcall	_printf_tiny
      000A41 E5 81            [12] 2223 	mov	a,sp
      000A43 24 FC            [12] 2224 	add	a,#0xfc
      000A45 F5 81            [12] 2225 	mov	sp,a
      000A47 D0 06            [24] 2226 	pop	ar6
      000A49 D0 07            [24] 2227 	pop	ar7
                                   2228 ;	main.c:263: int page_selection_bits=read_address&0x700;                             //REMOVING THE BITS DECIDING PAGE BLOCK SELECTION
      000A4B 7C 00            [12] 2229 	mov	r4,#0x00
      000A4D 74 07            [12] 2230 	mov	a,#0x07
      000A4F 5F               [12] 2231 	anl	a,r7
                                   2232 ;	main.c:264: int page_block=page_selection_bits>>7;
      000A50 A2 E7            [12] 2233 	mov	c,acc.7
      000A52 CC               [12] 2234 	xch	a,r4
      000A53 33               [12] 2235 	rlc	a
      000A54 CC               [12] 2236 	xch	a,r4
      000A55 33               [12] 2237 	rlc	a
      000A56 CC               [12] 2238 	xch	a,r4
      000A57 54 01            [12] 2239 	anl	a,#0x01
      000A59 30 E0 02         [24] 2240 	jnb	acc.0,00494$
      000A5C 44 FE            [12] 2241 	orl	a,#0xfe
      000A5E                       2242 00494$:
      000A5E FD               [12] 2243 	mov	r5,a
                                   2244 ;	main.c:265: EEPROM_CMD=0xA0|page_block;                       //MAKING THE READ, WRITE COMMAND BY PERFORMING OR OPERATIOIN WITH THE PAGE SELECTION BITS
      000A5F 90r00r00         [24] 2245 	mov	dptr,#_EEPROM_CMD
      000A62 74 A0            [12] 2246 	mov	a,#0xa0
      000A64 4C               [12] 2247 	orl	a,r4
      000A65 F0               [24] 2248 	movx	@dptr,a
      000A66 ED               [12] 2249 	mov	a,r5
      000A67 A3               [24] 2250 	inc	dptr
      000A68 F0               [24] 2251 	movx	@dptr,a
                                   2252 ;	main.c:266: word_address1=internal_address&0x0FF;             //USING THE WORD ADDRESS FROM THE INTERNAL ADDRESS SCHEME
      000A69 7F 00            [12] 2253 	mov	r7,#0x00
      000A6B 90r00r06         [24] 2254 	mov	dptr,#_word_address1
      000A6E EE               [12] 2255 	mov	a,r6
      000A6F F0               [24] 2256 	movx	@dptr,a
      000A70 EF               [12] 2257 	mov	a,r7
      000A71 A3               [24] 2258 	inc	dptr
      000A72 F0               [24] 2259 	movx	@dptr,a
                                   2260 ;	main.c:268: unsigned char x1 = EEPROM_RdByte(word_address1);
      000A73 8E 82            [24] 2261 	mov	dpl,r6
      000A75 8F 83            [24] 2262 	mov	dph,r7
      000A77 12r00r00         [24] 2263 	lcall	_EEPROM_RdByte
      000A7A AF 82            [24] 2264 	mov	r7,dpl
                                   2265 ;	main.c:270: printf_tiny("\n\n\n\r The Data Present at the Read Address is %x\n\r",x1);
      000A7C 7E 00            [12] 2266 	mov	r6,#0x00
      000A7E C0 07            [24] 2267 	push	ar7
      000A80 C0 06            [24] 2268 	push	ar6
      000A82 74rF3            [12] 2269 	mov	a,#___str_24
      000A84 C0 E0            [24] 2270 	push	acc
      000A86 74s02            [12] 2271 	mov	a,#(___str_24 >> 8)
      000A88 C0 E0            [24] 2272 	push	acc
      000A8A 12r00r00         [24] 2273 	lcall	_printf_tiny
      000A8D E5 81            [12] 2274 	mov	a,sp
      000A8F 24 FC            [12] 2275 	add	a,#0xfc
      000A91 F5 81            [12] 2276 	mov	sp,a
                                   2277 ;	main.c:271: break;
      000A93 02r05r92         [24] 2278 	ljmp	00189$
                                   2279 ;	main.c:273: case('H'):                                                                  //HEX DUMP OPERATION
      000A96                       2280 00138$:
                                   2281 ;	main.c:275: printf_tiny("\n\r********************************************* \n\r");
      000A96 74r04            [12] 2282 	mov	a,#___str_9
      000A98 C0 E0            [24] 2283 	push	acc
      000A9A 74s01            [12] 2284 	mov	a,#(___str_9 >> 8)
      000A9C C0 E0            [24] 2285 	push	acc
      000A9E 12r00r00         [24] 2286 	lcall	_printf_tiny
      000AA1 15 81            [12] 2287 	dec	sp
      000AA3 15 81            [12] 2288 	dec	sp
                                   2289 ;	main.c:276: printf_tiny("\n\r\t\tHEX DUMP\n\r ");
      000AA5 74r25            [12] 2290 	mov	a,#___str_25
      000AA7 C0 E0            [24] 2291 	push	acc
      000AA9 74s03            [12] 2292 	mov	a,#(___str_25 >> 8)
      000AAB C0 E0            [24] 2293 	push	acc
      000AAD 12r00r00         [24] 2294 	lcall	_printf_tiny
      000AB0 15 81            [12] 2295 	dec	sp
      000AB2 15 81            [12] 2296 	dec	sp
                                   2297 ;	main.c:277: printf_tiny("\n\r********************************************* \n\r");
      000AB4 74r04            [12] 2298 	mov	a,#___str_9
      000AB6 C0 E0            [24] 2299 	push	acc
      000AB8 74s01            [12] 2300 	mov	a,#(___str_9 >> 8)
      000ABA C0 E0            [24] 2301 	push	acc
      000ABC 12r00r00         [24] 2302 	lcall	_printf_tiny
      000ABF 15 81            [12] 2303 	dec	sp
      000AC1 15 81            [12] 2304 	dec	sp
                                   2305 ;	main.c:278: printf_tiny("\n\rEnter the 3 Digit Starting Address for Hex Dump\n\r");
      000AC3 74r35            [12] 2306 	mov	a,#___str_26
      000AC5 C0 E0            [24] 2307 	push	acc
      000AC7 74s03            [12] 2308 	mov	a,#(___str_26 >> 8)
      000AC9 C0 E0            [24] 2309 	push	acc
      000ACB 12r00r00         [24] 2310 	lcall	_printf_tiny
      000ACE 15 81            [12] 2311 	dec	sp
      000AD0 15 81            [12] 2312 	dec	sp
                                   2313 ;	main.c:279: int hex_start_address=getnumber();                                           //ACCEPTING THE HEX DUMP START ADDRESS
      000AD2 12r02r26         [24] 2314 	lcall	_getnumber
      000AD5 E5 82            [12] 2315 	mov	a,dpl
      000AD7 85 83 F0         [24] 2316 	mov	b,dph
      000ADA 90r00r0D         [24] 2317 	mov	dptr,#_main_hex_start_address_327682_108
      000ADD F0               [24] 2318 	movx	@dptr,a
      000ADE E5 F0            [12] 2319 	mov	a,b
      000AE0 A3               [24] 2320 	inc	dptr
      000AE1 F0               [24] 2321 	movx	@dptr,a
                                   2322 ;	main.c:280: while (hex_start_address==-1)                                                //PRINT ADDRESS IS INVALID FOR INVALID CHARACTERS ENTERED
      000AE2                       2323 00139$:
      000AE2 90r00r0D         [24] 2324 	mov	dptr,#_main_hex_start_address_327682_108
      000AE5 E0               [24] 2325 	movx	a,@dptr
      000AE6 FE               [12] 2326 	mov	r6,a
      000AE7 A3               [24] 2327 	inc	dptr
      000AE8 E0               [24] 2328 	movx	a,@dptr
      000AE9 FF               [12] 2329 	mov	r7,a
      000AEA BE FF 47         [24] 2330 	cjne	r6,#0xff,00146$
      000AED BF FF 44         [24] 2331 	cjne	r7,#0xff,00146$
                                   2332 ;	main.c:282: printf_tiny ("\n\rHex Dump Starting Address is INVALID\n\r",hex_start_address);
      000AF0 C0 07            [24] 2333 	push	ar7
      000AF2 C0 06            [24] 2334 	push	ar6
      000AF4 C0 06            [24] 2335 	push	ar6
      000AF6 C0 07            [24] 2336 	push	ar7
      000AF8 74r69            [12] 2337 	mov	a,#___str_27
      000AFA C0 E0            [24] 2338 	push	acc
      000AFC 74s03            [12] 2339 	mov	a,#(___str_27 >> 8)
      000AFE C0 E0            [24] 2340 	push	acc
      000B00 12r00r00         [24] 2341 	lcall	_printf_tiny
      000B03 E5 81            [12] 2342 	mov	a,sp
      000B05 24 FC            [12] 2343 	add	a,#0xfc
      000B07 F5 81            [12] 2344 	mov	sp,a
      000B09 D0 06            [24] 2345 	pop	ar6
      000B0B D0 07            [24] 2346 	pop	ar7
                                   2347 ;	main.c:283: printf_tiny ("\n\rEnter a New Hex Dump Starting Address\n\r",hex_start_address);
      000B0D C0 06            [24] 2348 	push	ar6
      000B0F C0 07            [24] 2349 	push	ar7
      000B11 74r92            [12] 2350 	mov	a,#___str_28
      000B13 C0 E0            [24] 2351 	push	acc
      000B15 74s03            [12] 2352 	mov	a,#(___str_28 >> 8)
      000B17 C0 E0            [24] 2353 	push	acc
      000B19 12r00r00         [24] 2354 	lcall	_printf_tiny
      000B1C E5 81            [12] 2355 	mov	a,sp
      000B1E 24 FC            [12] 2356 	add	a,#0xfc
      000B20 F5 81            [12] 2357 	mov	sp,a
                                   2358 ;	main.c:284: hex_start_address=getnumber();                                          //TAKING THE ADDRESS AGAIN
      000B22 12r02r26         [24] 2359 	lcall	_getnumber
      000B25 E5 82            [12] 2360 	mov	a,dpl
      000B27 85 83 F0         [24] 2361 	mov	b,dph
      000B2A 90r00r0D         [24] 2362 	mov	dptr,#_main_hex_start_address_327682_108
      000B2D F0               [24] 2363 	movx	@dptr,a
      000B2E E5 F0            [12] 2364 	mov	a,b
      000B30 A3               [24] 2365 	inc	dptr
      000B31 F0               [24] 2366 	movx	@dptr,a
                                   2367 ;	main.c:286: while(!(hex_start_address>=0 && hex_start_address<=2047))                   //CHECK IF VALUE FALLS IN RANGE
      000B32 80 AE            [24] 2368 	sjmp	00139$
      000B34                       2369 00146$:
      000B34 90r00r0D         [24] 2370 	mov	dptr,#_main_hex_start_address_327682_108
      000B37 E0               [24] 2371 	movx	a,@dptr
      000B38 FE               [12] 2372 	mov	r6,a
      000B39 A3               [24] 2373 	inc	dptr
      000B3A E0               [24] 2374 	movx	a,@dptr
      000B3B FF               [12] 2375 	mov	r7,a
      000B3C 20 E7 0F         [24] 2376 	jb	acc.7,00147$
      000B3F C3               [12] 2377 	clr	c
      000B40 74 FF            [12] 2378 	mov	a,#0xff
      000B42 9E               [12] 2379 	subb	a,r6
      000B43 74 87            [12] 2380 	mov	a,#(0x07 ^ 0x80)
      000B45 8F F0            [24] 2381 	mov	b,r7
      000B47 63 F0 80         [24] 2382 	xrl	b,#0x80
      000B4A 95 F0            [12] 2383 	subb	a,b
      000B4C 50 6C            [24] 2384 	jnc	00148$
      000B4E                       2385 00147$:
                                   2386 ;	main.c:288: printf_tiny ("\n\rHex Dump Starting Address is INVALID\n\r",hex_start_address);
      000B4E 90r00r0D         [24] 2387 	mov	dptr,#_main_hex_start_address_327682_108
      000B51 E0               [24] 2388 	movx	a,@dptr
      000B52 FC               [12] 2389 	mov	r4,a
      000B53 A3               [24] 2390 	inc	dptr
      000B54 E0               [24] 2391 	movx	a,@dptr
      000B55 FD               [12] 2392 	mov	r5,a
      000B56 C0 05            [24] 2393 	push	ar5
      000B58 C0 04            [24] 2394 	push	ar4
      000B5A C0 04            [24] 2395 	push	ar4
      000B5C C0 05            [24] 2396 	push	ar5
      000B5E 74r69            [12] 2397 	mov	a,#___str_27
      000B60 C0 E0            [24] 2398 	push	acc
      000B62 74s03            [12] 2399 	mov	a,#(___str_27 >> 8)
      000B64 C0 E0            [24] 2400 	push	acc
      000B66 12r00r00         [24] 2401 	lcall	_printf_tiny
      000B69 E5 81            [12] 2402 	mov	a,sp
      000B6B 24 FC            [12] 2403 	add	a,#0xfc
      000B6D F5 81            [12] 2404 	mov	sp,a
      000B6F D0 04            [24] 2405 	pop	ar4
      000B71 D0 05            [24] 2406 	pop	ar5
                                   2407 ;	main.c:289: printf_tiny ("\n\rEnter a New Hex Dump Starting Address\n\r",hex_start_address);
      000B73 C0 04            [24] 2408 	push	ar4
      000B75 C0 05            [24] 2409 	push	ar5
      000B77 74r92            [12] 2410 	mov	a,#___str_28
      000B79 C0 E0            [24] 2411 	push	acc
      000B7B 74s03            [12] 2412 	mov	a,#(___str_28 >> 8)
      000B7D C0 E0            [24] 2413 	push	acc
      000B7F 12r00r00         [24] 2414 	lcall	_printf_tiny
      000B82 E5 81            [12] 2415 	mov	a,sp
      000B84 24 FC            [12] 2416 	add	a,#0xfc
      000B86 F5 81            [12] 2417 	mov	sp,a
                                   2418 ;	main.c:290: hex_start_address=getnumber();                                          //IF NOT TAKE IT AGAIN
      000B88 12r02r26         [24] 2419 	lcall	_getnumber
      000B8B AC 82            [24] 2420 	mov	r4,dpl
      000B8D AD 83            [24] 2421 	mov	r5,dph
      000B8F 90r00r0D         [24] 2422 	mov	dptr,#_main_hex_start_address_327682_108
      000B92 EC               [12] 2423 	mov	a,r4
      000B93 F0               [24] 2424 	movx	@dptr,a
      000B94 ED               [12] 2425 	mov	a,r5
      000B95 A3               [24] 2426 	inc	dptr
      000B96 F0               [24] 2427 	movx	@dptr,a
                                   2428 ;	main.c:291: if(hex_start_address!='\n' && hex_start_address!='\r')
      000B97 BC 0A 05         [24] 2429 	cjne	r4,#0x0a,00499$
      000B9A BD 00 02         [24] 2430 	cjne	r5,#0x00,00499$
      000B9D 80 95            [24] 2431 	sjmp	00146$
      000B9F                       2432 00499$:
      000B9F BC 0D 05         [24] 2433 	cjne	r4,#0x0d,00500$
      000BA2 BD 00 02         [24] 2434 	cjne	r5,#0x00,00500$
      000BA5 80 8D            [24] 2435 	sjmp	00146$
      000BA7                       2436 00500$:
                                   2437 ;	main.c:292: hex_start_address=getnumber();
      000BA7 12r02r26         [24] 2438 	lcall	_getnumber
      000BAA E5 82            [12] 2439 	mov	a,dpl
      000BAC 85 83 F0         [24] 2440 	mov	b,dph
      000BAF 90r00r0D         [24] 2441 	mov	dptr,#_main_hex_start_address_327682_108
      000BB2 F0               [24] 2442 	movx	@dptr,a
      000BB3 E5 F0            [12] 2443 	mov	a,b
      000BB5 A3               [24] 2444 	inc	dptr
      000BB6 F0               [24] 2445 	movx	@dptr,a
      000BB7 02r0Br34         [24] 2446 	ljmp	00146$
      000BBA                       2447 00148$:
                                   2448 ;	main.c:294: printf_tiny ("\n\rHex Dump Starting Address entered is %x.\n\r",hex_start_address);
      000BBA C0 06            [24] 2449 	push	ar6
      000BBC C0 07            [24] 2450 	push	ar7
      000BBE 74rBC            [12] 2451 	mov	a,#___str_29
      000BC0 C0 E0            [24] 2452 	push	acc
      000BC2 74s03            [12] 2453 	mov	a,#(___str_29 >> 8)
      000BC4 C0 E0            [24] 2454 	push	acc
      000BC6 12r00r00         [24] 2455 	lcall	_printf_tiny
      000BC9 E5 81            [12] 2456 	mov	a,sp
      000BCB 24 FC            [12] 2457 	add	a,#0xfc
      000BCD F5 81            [12] 2458 	mov	sp,a
                                   2459 ;	main.c:296: printf_tiny("\n\rEnter the 3 Digit Ending Address for Hex Dump\n\r");
      000BCF 74rE9            [12] 2460 	mov	a,#___str_30
      000BD1 C0 E0            [24] 2461 	push	acc
      000BD3 74s03            [12] 2462 	mov	a,#(___str_30 >> 8)
      000BD5 C0 E0            [24] 2463 	push	acc
      000BD7 12r00r00         [24] 2464 	lcall	_printf_tiny
      000BDA 15 81            [12] 2465 	dec	sp
      000BDC 15 81            [12] 2466 	dec	sp
                                   2467 ;	main.c:298: int hex_end_address=getnumber();                                                //ACCEPTING THE HEX DUMP END ADDRESS
      000BDE 12r02r26         [24] 2468 	lcall	_getnumber
      000BE1 E5 82            [12] 2469 	mov	a,dpl
      000BE3 85 83 F0         [24] 2470 	mov	b,dph
      000BE6 90r00r0F         [24] 2471 	mov	dptr,#_main_hex_end_address_327683_111
      000BE9 F0               [24] 2472 	movx	@dptr,a
      000BEA E5 F0            [12] 2473 	mov	a,b
      000BEC A3               [24] 2474 	inc	dptr
      000BED F0               [24] 2475 	movx	@dptr,a
                                   2476 ;	main.c:299: while (hex_end_address==-1)                                                    //PRINT ADDRESS IS INVALID FOR INVALID CHARACTERS ENTERED
      000BEE                       2477 00149$:
      000BEE 90r00r0F         [24] 2478 	mov	dptr,#_main_hex_end_address_327683_111
      000BF1 E0               [24] 2479 	movx	a,@dptr
      000BF2 FE               [12] 2480 	mov	r6,a
      000BF3 A3               [24] 2481 	inc	dptr
      000BF4 E0               [24] 2482 	movx	a,@dptr
      000BF5 FF               [12] 2483 	mov	r7,a
      000BF6 BE FF 47         [24] 2484 	cjne	r6,#0xff,00156$
      000BF9 BF FF 44         [24] 2485 	cjne	r7,#0xff,00156$
                                   2486 ;	main.c:301: printf_tiny ("\n\rHex Dump Ending Address is INVALID\n\r",hex_end_address);
      000BFC C0 07            [24] 2487 	push	ar7
      000BFE C0 06            [24] 2488 	push	ar6
      000C00 C0 06            [24] 2489 	push	ar6
      000C02 C0 07            [24] 2490 	push	ar7
      000C04 74r1B            [12] 2491 	mov	a,#___str_31
      000C06 C0 E0            [24] 2492 	push	acc
      000C08 74s04            [12] 2493 	mov	a,#(___str_31 >> 8)
      000C0A C0 E0            [24] 2494 	push	acc
      000C0C 12r00r00         [24] 2495 	lcall	_printf_tiny
      000C0F E5 81            [12] 2496 	mov	a,sp
      000C11 24 FC            [12] 2497 	add	a,#0xfc
      000C13 F5 81            [12] 2498 	mov	sp,a
      000C15 D0 06            [24] 2499 	pop	ar6
      000C17 D0 07            [24] 2500 	pop	ar7
                                   2501 ;	main.c:302: printf_tiny ("\n\rEnter a New Hex Dump Ending Address\n\r",hex_end_address);
      000C19 C0 06            [24] 2502 	push	ar6
      000C1B C0 07            [24] 2503 	push	ar7
      000C1D 74r42            [12] 2504 	mov	a,#___str_32
      000C1F C0 E0            [24] 2505 	push	acc
      000C21 74s04            [12] 2506 	mov	a,#(___str_32 >> 8)
      000C23 C0 E0            [24] 2507 	push	acc
      000C25 12r00r00         [24] 2508 	lcall	_printf_tiny
      000C28 E5 81            [12] 2509 	mov	a,sp
      000C2A 24 FC            [12] 2510 	add	a,#0xfc
      000C2C F5 81            [12] 2511 	mov	sp,a
                                   2512 ;	main.c:304: hex_end_address=getnumber();                                                //TAKING THE ADDRESS AGAIN
      000C2E 12r02r26         [24] 2513 	lcall	_getnumber
      000C31 E5 82            [12] 2514 	mov	a,dpl
      000C33 85 83 F0         [24] 2515 	mov	b,dph
      000C36 90r00r0F         [24] 2516 	mov	dptr,#_main_hex_end_address_327683_111
      000C39 F0               [24] 2517 	movx	@dptr,a
      000C3A E5 F0            [12] 2518 	mov	a,b
      000C3C A3               [24] 2519 	inc	dptr
      000C3D F0               [24] 2520 	movx	@dptr,a
                                   2521 ;	main.c:306: while(!(hex_end_address>=0 && hex_end_address<=2047))                           //CHECK IF VALUE FALLS IN RANGE
      000C3E 80 AE            [24] 2522 	sjmp	00149$
      000C40                       2523 00156$:
      000C40 90r00r0F         [24] 2524 	mov	dptr,#_main_hex_end_address_327683_111
      000C43 E0               [24] 2525 	movx	a,@dptr
      000C44 FE               [12] 2526 	mov	r6,a
      000C45 A3               [24] 2527 	inc	dptr
      000C46 E0               [24] 2528 	movx	a,@dptr
      000C47 FF               [12] 2529 	mov	r7,a
      000C48 20 E7 0F         [24] 2530 	jb	acc.7,00157$
      000C4B C3               [12] 2531 	clr	c
      000C4C 74 FF            [12] 2532 	mov	a,#0xff
      000C4E 9E               [12] 2533 	subb	a,r6
      000C4F 74 87            [12] 2534 	mov	a,#(0x07 ^ 0x80)
      000C51 8F F0            [24] 2535 	mov	b,r7
      000C53 63 F0 80         [24] 2536 	xrl	b,#0x80
      000C56 95 F0            [12] 2537 	subb	a,b
      000C58 50 6C            [24] 2538 	jnc	00158$
      000C5A                       2539 00157$:
                                   2540 ;	main.c:308: printf_tiny ("\n\rHex Dump Ending Address is INVALID\n\r",hex_end_address);
      000C5A 90r00r0F         [24] 2541 	mov	dptr,#_main_hex_end_address_327683_111
      000C5D E0               [24] 2542 	movx	a,@dptr
      000C5E FC               [12] 2543 	mov	r4,a
      000C5F A3               [24] 2544 	inc	dptr
      000C60 E0               [24] 2545 	movx	a,@dptr
      000C61 FD               [12] 2546 	mov	r5,a
      000C62 C0 05            [24] 2547 	push	ar5
      000C64 C0 04            [24] 2548 	push	ar4
      000C66 C0 04            [24] 2549 	push	ar4
      000C68 C0 05            [24] 2550 	push	ar5
      000C6A 74r1B            [12] 2551 	mov	a,#___str_31
      000C6C C0 E0            [24] 2552 	push	acc
      000C6E 74s04            [12] 2553 	mov	a,#(___str_31 >> 8)
      000C70 C0 E0            [24] 2554 	push	acc
      000C72 12r00r00         [24] 2555 	lcall	_printf_tiny
      000C75 E5 81            [12] 2556 	mov	a,sp
      000C77 24 FC            [12] 2557 	add	a,#0xfc
      000C79 F5 81            [12] 2558 	mov	sp,a
      000C7B D0 04            [24] 2559 	pop	ar4
      000C7D D0 05            [24] 2560 	pop	ar5
                                   2561 ;	main.c:309: printf_tiny ("\n\rEnter a New Hex Dump Ending Address\n\r",hex_end_address);
      000C7F C0 04            [24] 2562 	push	ar4
      000C81 C0 05            [24] 2563 	push	ar5
      000C83 74r42            [12] 2564 	mov	a,#___str_32
      000C85 C0 E0            [24] 2565 	push	acc
      000C87 74s04            [12] 2566 	mov	a,#(___str_32 >> 8)
      000C89 C0 E0            [24] 2567 	push	acc
      000C8B 12r00r00         [24] 2568 	lcall	_printf_tiny
      000C8E E5 81            [12] 2569 	mov	a,sp
      000C90 24 FC            [12] 2570 	add	a,#0xfc
      000C92 F5 81            [12] 2571 	mov	sp,a
                                   2572 ;	main.c:310: hex_end_address=getnumber();
      000C94 12r02r26         [24] 2573 	lcall	_getnumber
      000C97 AC 82            [24] 2574 	mov	r4,dpl
      000C99 AD 83            [24] 2575 	mov	r5,dph
      000C9B 90r00r0F         [24] 2576 	mov	dptr,#_main_hex_end_address_327683_111
      000C9E EC               [12] 2577 	mov	a,r4
      000C9F F0               [24] 2578 	movx	@dptr,a
      000CA0 ED               [12] 2579 	mov	a,r5
      000CA1 A3               [24] 2580 	inc	dptr
      000CA2 F0               [24] 2581 	movx	@dptr,a
                                   2582 ;	main.c:311: if(hex_end_address!='\n' && hex_end_address!='\r')                          //IF NOT, TAKE IT AGAIN
      000CA3 BC 0A 05         [24] 2583 	cjne	r4,#0x0a,00505$
      000CA6 BD 00 02         [24] 2584 	cjne	r5,#0x00,00505$
      000CA9 80 95            [24] 2585 	sjmp	00156$
      000CAB                       2586 00505$:
      000CAB BC 0D 05         [24] 2587 	cjne	r4,#0x0d,00506$
      000CAE BD 00 02         [24] 2588 	cjne	r5,#0x00,00506$
      000CB1 80 8D            [24] 2589 	sjmp	00156$
      000CB3                       2590 00506$:
                                   2591 ;	main.c:312: hex_end_address=getnumber();
      000CB3 12r02r26         [24] 2592 	lcall	_getnumber
      000CB6 E5 82            [12] 2593 	mov	a,dpl
      000CB8 85 83 F0         [24] 2594 	mov	b,dph
      000CBB 90r00r0F         [24] 2595 	mov	dptr,#_main_hex_end_address_327683_111
      000CBE F0               [24] 2596 	movx	@dptr,a
      000CBF E5 F0            [12] 2597 	mov	a,b
      000CC1 A3               [24] 2598 	inc	dptr
      000CC2 F0               [24] 2599 	movx	@dptr,a
      000CC3 02r0Cr40         [24] 2600 	ljmp	00156$
      000CC6                       2601 00158$:
                                   2602 ;	main.c:314: printf_tiny ("\n\rHex Dump Ending Address entered is %x.\n\r",hex_end_address);
      000CC6 C0 07            [24] 2603 	push	ar7
      000CC8 C0 06            [24] 2604 	push	ar6
      000CCA C0 06            [24] 2605 	push	ar6
      000CCC C0 07            [24] 2606 	push	ar7
      000CCE 74r6A            [12] 2607 	mov	a,#___str_33
      000CD0 C0 E0            [24] 2608 	push	acc
      000CD2 74s04            [12] 2609 	mov	a,#(___str_33 >> 8)
      000CD4 C0 E0            [24] 2610 	push	acc
      000CD6 12r00r00         [24] 2611 	lcall	_printf_tiny
      000CD9 E5 81            [12] 2612 	mov	a,sp
      000CDB 24 FC            [12] 2613 	add	a,#0xfc
      000CDD F5 81            [12] 2614 	mov	sp,a
      000CDF D0 06            [24] 2615 	pop	ar6
      000CE1 D0 07            [24] 2616 	pop	ar7
                                   2617 ;	main.c:316: if(hex_start_address>hex_end_address)                                           //ERROR IF END ADDRESS <START ADDRESS
      000CE3 90r00r0D         [24] 2618 	mov	dptr,#_main_hex_start_address_327682_108
      000CE6 E0               [24] 2619 	movx	a,@dptr
      000CE7 FC               [12] 2620 	mov	r4,a
      000CE8 A3               [24] 2621 	inc	dptr
      000CE9 E0               [24] 2622 	movx	a,@dptr
      000CEA FD               [12] 2623 	mov	r5,a
      000CEB C3               [12] 2624 	clr	c
      000CEC EE               [12] 2625 	mov	a,r6
      000CED 9C               [12] 2626 	subb	a,r4
      000CEE EF               [12] 2627 	mov	a,r7
      000CEF 64 80            [12] 2628 	xrl	a,#0x80
      000CF1 8D F0            [24] 2629 	mov	b,r5
      000CF3 63 F0 80         [24] 2630 	xrl	b,#0x80
      000CF6 95 F0            [12] 2631 	subb	a,b
      000CF8 50 0F            [24] 2632 	jnc	00160$
                                   2633 ;	main.c:318: printf_tiny("\n\rERROR:  The value of Hex Start Address was less than the Hex End Address\n\r");
      000CFA 74r95            [12] 2634 	mov	a,#___str_34
      000CFC C0 E0            [24] 2635 	push	acc
      000CFE 74s04            [12] 2636 	mov	a,#(___str_34 >> 8)
      000D00 C0 E0            [24] 2637 	push	acc
      000D02 12r00r00         [24] 2638 	lcall	_printf_tiny
      000D05 15 81            [12] 2639 	dec	sp
      000D07 15 81            [12] 2640 	dec	sp
      000D09                       2641 00160$:
                                   2642 ;	main.c:320: Sequence_read(hex_start_address,hex_end_address);
      000D09 90r00r0D         [24] 2643 	mov	dptr,#_main_hex_start_address_327682_108
      000D0C E0               [24] 2644 	movx	a,@dptr
      000D0D FE               [12] 2645 	mov	r6,a
      000D0E A3               [24] 2646 	inc	dptr
      000D0F E0               [24] 2647 	movx	a,@dptr
      000D10 FF               [12] 2648 	mov	r7,a
      000D11 90r00r0F         [24] 2649 	mov	dptr,#_main_hex_end_address_327683_111
      000D14 E0               [24] 2650 	movx	a,@dptr
      000D15 FC               [12] 2651 	mov	r4,a
      000D16 A3               [24] 2652 	inc	dptr
      000D17 E0               [24] 2653 	movx	a,@dptr
      000D18 FD               [12] 2654 	mov	r5,a
      000D19 90r00r00         [24] 2655 	mov	dptr,#_Sequence_read_PARM_2
      000D1C EC               [12] 2656 	mov	a,r4
      000D1D F0               [24] 2657 	movx	@dptr,a
      000D1E ED               [12] 2658 	mov	a,r5
      000D1F A3               [24] 2659 	inc	dptr
      000D20 F0               [24] 2660 	movx	@dptr,a
      000D21 8E 82            [24] 2661 	mov	dpl,r6
      000D23 8F 83            [24] 2662 	mov	dph,r7
      000D25 12r00r00         [24] 2663 	lcall	_Sequence_read
                                   2664 ;	main.c:321: break;
      000D28 02r05r92         [24] 2665 	ljmp	00189$
                                   2666 ;	main.c:323: case('P'):                                                              //PAGE WRITE OPERATION
      000D2B                       2667 00161$:
                                   2668 ;	main.c:325: printf_tiny("\n\r********************************************* \n\r");
      000D2B 74r04            [12] 2669 	mov	a,#___str_9
      000D2D C0 E0            [24] 2670 	push	acc
      000D2F 74s01            [12] 2671 	mov	a,#(___str_9 >> 8)
      000D31 C0 E0            [24] 2672 	push	acc
      000D33 12r00r00         [24] 2673 	lcall	_printf_tiny
      000D36 15 81            [12] 2674 	dec	sp
      000D38 15 81            [12] 2675 	dec	sp
                                   2676 ;	main.c:326: printf_tiny("\n\r\t\tPAGE WRITE\n\r ");
      000D3A 74rE2            [12] 2677 	mov	a,#___str_35
      000D3C C0 E0            [24] 2678 	push	acc
      000D3E 74s04            [12] 2679 	mov	a,#(___str_35 >> 8)
      000D40 C0 E0            [24] 2680 	push	acc
      000D42 12r00r00         [24] 2681 	lcall	_printf_tiny
      000D45 15 81            [12] 2682 	dec	sp
      000D47 15 81            [12] 2683 	dec	sp
                                   2684 ;	main.c:327: printf_tiny("\n\r********************************************* \n\r");
      000D49 74r04            [12] 2685 	mov	a,#___str_9
      000D4B C0 E0            [24] 2686 	push	acc
      000D4D 74s01            [12] 2687 	mov	a,#(___str_9 >> 8)
      000D4F C0 E0            [24] 2688 	push	acc
      000D51 12r00r00         [24] 2689 	lcall	_printf_tiny
      000D54 15 81            [12] 2690 	dec	sp
      000D56 15 81            [12] 2691 	dec	sp
                                   2692 ;	main.c:328: printf_tiny("\n\rEnter the Page Address \n\r");
      000D58 74rF4            [12] 2693 	mov	a,#___str_36
      000D5A C0 E0            [24] 2694 	push	acc
      000D5C 74s04            [12] 2695 	mov	a,#(___str_36 >> 8)
      000D5E C0 E0            [24] 2696 	push	acc
      000D60 12r00r00         [24] 2697 	lcall	_printf_tiny
      000D63 15 81            [12] 2698 	dec	sp
      000D65 15 81            [12] 2699 	dec	sp
                                   2700 ;	main.c:329: int page_address=getnumber();
      000D67 12r02r26         [24] 2701 	lcall	_getnumber
      000D6A E5 82            [12] 2702 	mov	a,dpl
      000D6C 85 83 F0         [24] 2703 	mov	b,dph
      000D6F 90r00r11         [24] 2704 	mov	dptr,#_main_page_address_327682_116
      000D72 F0               [24] 2705 	movx	@dptr,a
      000D73 E5 F0            [12] 2706 	mov	a,b
      000D75 A3               [24] 2707 	inc	dptr
      000D76 F0               [24] 2708 	movx	@dptr,a
                                   2709 ;	main.c:331: while (page_address==-1)                                                //PRINT ADDRESS IS INVALID FOR INVALID CHARACTERS ENTERED
      000D77                       2710 00162$:
      000D77 90r00r11         [24] 2711 	mov	dptr,#_main_page_address_327682_116
      000D7A E0               [24] 2712 	movx	a,@dptr
      000D7B FE               [12] 2713 	mov	r6,a
      000D7C A3               [24] 2714 	inc	dptr
      000D7D E0               [24] 2715 	movx	a,@dptr
      000D7E FF               [12] 2716 	mov	r7,a
      000D7F BE FF 47         [24] 2717 	cjne	r6,#0xff,00169$
      000D82 BF FF 44         [24] 2718 	cjne	r7,#0xff,00169$
                                   2719 ;	main.c:333: printf_tiny ("\n\rThe value of page address entered is invalid\n\r",page_address);
      000D85 C0 07            [24] 2720 	push	ar7
      000D87 C0 06            [24] 2721 	push	ar6
      000D89 C0 06            [24] 2722 	push	ar6
      000D8B C0 07            [24] 2723 	push	ar7
      000D8D 74r10            [12] 2724 	mov	a,#___str_37
      000D8F C0 E0            [24] 2725 	push	acc
      000D91 74s05            [12] 2726 	mov	a,#(___str_37 >> 8)
      000D93 C0 E0            [24] 2727 	push	acc
      000D95 12r00r00         [24] 2728 	lcall	_printf_tiny
      000D98 E5 81            [12] 2729 	mov	a,sp
      000D9A 24 FC            [12] 2730 	add	a,#0xfc
      000D9C F5 81            [12] 2731 	mov	sp,a
      000D9E D0 06            [24] 2732 	pop	ar6
      000DA0 D0 07            [24] 2733 	pop	ar7
                                   2734 ;	main.c:334: printf_tiny ("\n\rEnter a new page starting address\n\r",page_address);
      000DA2 C0 06            [24] 2735 	push	ar6
      000DA4 C0 07            [24] 2736 	push	ar7
      000DA6 74r41            [12] 2737 	mov	a,#___str_38
      000DA8 C0 E0            [24] 2738 	push	acc
      000DAA 74s05            [12] 2739 	mov	a,#(___str_38 >> 8)
      000DAC C0 E0            [24] 2740 	push	acc
      000DAE 12r00r00         [24] 2741 	lcall	_printf_tiny
      000DB1 E5 81            [12] 2742 	mov	a,sp
      000DB3 24 FC            [12] 2743 	add	a,#0xfc
      000DB5 F5 81            [12] 2744 	mov	sp,a
                                   2745 ;	main.c:336: page_address=getnumber();                                           //TAKING THE ADDRESS AGAIN
      000DB7 12r02r26         [24] 2746 	lcall	_getnumber
      000DBA E5 82            [12] 2747 	mov	a,dpl
      000DBC 85 83 F0         [24] 2748 	mov	b,dph
      000DBF 90r00r11         [24] 2749 	mov	dptr,#_main_page_address_327682_116
      000DC2 F0               [24] 2750 	movx	@dptr,a
      000DC3 E5 F0            [12] 2751 	mov	a,b
      000DC5 A3               [24] 2752 	inc	dptr
      000DC6 F0               [24] 2753 	movx	@dptr,a
                                   2754 ;	main.c:338: while(!(page_address>=0 && page_address<=2047))                         //CHECK IF VALUE FALLS IN RANGE
      000DC7 80 AE            [24] 2755 	sjmp	00162$
      000DC9                       2756 00169$:
      000DC9 90r00r11         [24] 2757 	mov	dptr,#_main_page_address_327682_116
      000DCC E0               [24] 2758 	movx	a,@dptr
      000DCD FE               [12] 2759 	mov	r6,a
      000DCE A3               [24] 2760 	inc	dptr
      000DCF E0               [24] 2761 	movx	a,@dptr
      000DD0 FF               [12] 2762 	mov	r7,a
      000DD1 20 E7 0F         [24] 2763 	jb	acc.7,00170$
      000DD4 C3               [12] 2764 	clr	c
      000DD5 74 FF            [12] 2765 	mov	a,#0xff
      000DD7 9E               [12] 2766 	subb	a,r6
      000DD8 74 87            [12] 2767 	mov	a,#(0x07 ^ 0x80)
      000DDA 8F F0            [24] 2768 	mov	b,r7
      000DDC 63 F0 80         [24] 2769 	xrl	b,#0x80
      000DDF 95 F0            [12] 2770 	subb	a,b
      000DE1 50 6C            [24] 2771 	jnc	00171$
      000DE3                       2772 00170$:
                                   2773 ;	main.c:340: printf_tiny ("\n\rThe value of page address entered is invalid\n\r",page_address);
      000DE3 90r00r11         [24] 2774 	mov	dptr,#_main_page_address_327682_116
      000DE6 E0               [24] 2775 	movx	a,@dptr
      000DE7 FC               [12] 2776 	mov	r4,a
      000DE8 A3               [24] 2777 	inc	dptr
      000DE9 E0               [24] 2778 	movx	a,@dptr
      000DEA FD               [12] 2779 	mov	r5,a
      000DEB C0 05            [24] 2780 	push	ar5
      000DED C0 04            [24] 2781 	push	ar4
      000DEF C0 04            [24] 2782 	push	ar4
      000DF1 C0 05            [24] 2783 	push	ar5
      000DF3 74r10            [12] 2784 	mov	a,#___str_37
      000DF5 C0 E0            [24] 2785 	push	acc
      000DF7 74s05            [12] 2786 	mov	a,#(___str_37 >> 8)
      000DF9 C0 E0            [24] 2787 	push	acc
      000DFB 12r00r00         [24] 2788 	lcall	_printf_tiny
      000DFE E5 81            [12] 2789 	mov	a,sp
      000E00 24 FC            [12] 2790 	add	a,#0xfc
      000E02 F5 81            [12] 2791 	mov	sp,a
      000E04 D0 04            [24] 2792 	pop	ar4
      000E06 D0 05            [24] 2793 	pop	ar5
                                   2794 ;	main.c:341: printf_tiny ("\n\rEnter a new page address\n\r",page_address);
      000E08 C0 04            [24] 2795 	push	ar4
      000E0A C0 05            [24] 2796 	push	ar5
      000E0C 74r67            [12] 2797 	mov	a,#___str_39
      000E0E C0 E0            [24] 2798 	push	acc
      000E10 74s05            [12] 2799 	mov	a,#(___str_39 >> 8)
      000E12 C0 E0            [24] 2800 	push	acc
      000E14 12r00r00         [24] 2801 	lcall	_printf_tiny
      000E17 E5 81            [12] 2802 	mov	a,sp
      000E19 24 FC            [12] 2803 	add	a,#0xfc
      000E1B F5 81            [12] 2804 	mov	sp,a
                                   2805 ;	main.c:342: page_address=getnumber();
      000E1D 12r02r26         [24] 2806 	lcall	_getnumber
      000E20 AC 82            [24] 2807 	mov	r4,dpl
      000E22 AD 83            [24] 2808 	mov	r5,dph
      000E24 90r00r11         [24] 2809 	mov	dptr,#_main_page_address_327682_116
      000E27 EC               [12] 2810 	mov	a,r4
      000E28 F0               [24] 2811 	movx	@dptr,a
      000E29 ED               [12] 2812 	mov	a,r5
      000E2A A3               [24] 2813 	inc	dptr
      000E2B F0               [24] 2814 	movx	@dptr,a
                                   2815 ;	main.c:343: if(page_address!='\n' && page_address!='\r')
      000E2C BC 0A 05         [24] 2816 	cjne	r4,#0x0a,00512$
      000E2F BD 00 02         [24] 2817 	cjne	r5,#0x00,00512$
      000E32 80 95            [24] 2818 	sjmp	00169$
      000E34                       2819 00512$:
      000E34 BC 0D 05         [24] 2820 	cjne	r4,#0x0d,00513$
      000E37 BD 00 02         [24] 2821 	cjne	r5,#0x00,00513$
      000E3A 80 8D            [24] 2822 	sjmp	00169$
      000E3C                       2823 00513$:
                                   2824 ;	main.c:344: page_address=getnumber();
      000E3C 12r02r26         [24] 2825 	lcall	_getnumber
      000E3F E5 82            [12] 2826 	mov	a,dpl
      000E41 85 83 F0         [24] 2827 	mov	b,dph
      000E44 90r00r11         [24] 2828 	mov	dptr,#_main_page_address_327682_116
      000E47 F0               [24] 2829 	movx	@dptr,a
      000E48 E5 F0            [12] 2830 	mov	a,b
      000E4A A3               [24] 2831 	inc	dptr
      000E4B F0               [24] 2832 	movx	@dptr,a
      000E4C 02r0DrC9         [24] 2833 	ljmp	00169$
      000E4F                       2834 00171$:
                                   2835 ;	main.c:346: printf_tiny ("\n\rThe value of page address entered is %x.\n\r",page_address);
      000E4F C0 07            [24] 2836 	push	ar7
      000E51 C0 06            [24] 2837 	push	ar6
      000E53 C0 06            [24] 2838 	push	ar6
      000E55 C0 07            [24] 2839 	push	ar7
      000E57 74r84            [12] 2840 	mov	a,#___str_40
      000E59 C0 E0            [24] 2841 	push	acc
      000E5B 74s05            [12] 2842 	mov	a,#(___str_40 >> 8)
      000E5D C0 E0            [24] 2843 	push	acc
      000E5F 12r00r00         [24] 2844 	lcall	_printf_tiny
      000E62 E5 81            [12] 2845 	mov	a,sp
      000E64 24 FC            [12] 2846 	add	a,#0xfc
      000E66 F5 81            [12] 2847 	mov	sp,a
      000E68 D0 06            [24] 2848 	pop	ar6
      000E6A D0 07            [24] 2849 	pop	ar7
                                   2850 ;	main.c:349: int page_selection_bits3=page_address&0x700;
      000E6C 7C 00            [12] 2851 	mov	r4,#0x00
      000E6E 74 07            [12] 2852 	mov	a,#0x07
      000E70 5F               [12] 2853 	anl	a,r7
                                   2854 ;	main.c:350: page_block3=page_selection_bits3>>7;
      000E71 A2 E7            [12] 2855 	mov	c,acc.7
      000E73 CC               [12] 2856 	xch	a,r4
      000E74 33               [12] 2857 	rlc	a
      000E75 CC               [12] 2858 	xch	a,r4
      000E76 33               [12] 2859 	rlc	a
      000E77 CC               [12] 2860 	xch	a,r4
      000E78 54 01            [12] 2861 	anl	a,#0x01
      000E7A 30 E0 02         [24] 2862 	jnb	acc.0,00514$
      000E7D 44 FE            [12] 2863 	orl	a,#0xfe
      000E7F                       2864 00514$:
      000E7F FD               [12] 2865 	mov	r5,a
      000E80 90r00r10         [24] 2866 	mov	dptr,#_page_block3
      000E83 EC               [12] 2867 	mov	a,r4
      000E84 F0               [24] 2868 	movx	@dptr,a
      000E85 ED               [12] 2869 	mov	a,r5
      000E86 A3               [24] 2870 	inc	dptr
      000E87 F0               [24] 2871 	movx	@dptr,a
                                   2872 ;	main.c:351: EEPROM_CMD_PAGE=0xA0|page_block3;
      000E88 90r00r02         [24] 2873 	mov	dptr,#_EEPROM_CMD_PAGE
      000E8B 74 A0            [12] 2874 	mov	a,#0xa0
      000E8D 4C               [12] 2875 	orl	a,r4
      000E8E F0               [24] 2876 	movx	@dptr,a
      000E8F ED               [12] 2877 	mov	a,r5
      000E90 A3               [24] 2878 	inc	dptr
      000E91 F0               [24] 2879 	movx	@dptr,a
                                   2880 ;	main.c:352: word_address3=internal_address3&0x0FF;
      000E92 90r00r0A         [24] 2881 	mov	dptr,#_word_address3
      000E95 EE               [12] 2882 	mov	a,r6
      000E96 F0               [24] 2883 	movx	@dptr,a
      000E97 E4               [12] 2884 	clr	a
      000E98 A3               [24] 2885 	inc	dptr
      000E99 F0               [24] 2886 	movx	@dptr,a
                                   2887 ;	main.c:353: printf_tiny("\n\rEnter the data to page write \n\r");
      000E9A 74rB1            [12] 2888 	mov	a,#___str_41
      000E9C C0 E0            [24] 2889 	push	acc
      000E9E 74s05            [12] 2890 	mov	a,#(___str_41 >> 8)
      000EA0 C0 E0            [24] 2891 	push	acc
      000EA2 12r00r00         [24] 2892 	lcall	_printf_tiny
      000EA5 15 81            [12] 2893 	dec	sp
      000EA7 15 81            [12] 2894 	dec	sp
                                   2895 ;	main.c:356: data_to_write=getdata();
      000EA9 12r00r00         [24] 2896 	lcall	_getdata
      000EAC E5 82            [12] 2897 	mov	a,dpl
      000EAE 85 83 F0         [24] 2898 	mov	b,dph
      000EB1 90r00r13         [24] 2899 	mov	dptr,#_main_data_to_write_327684_120
      000EB4 F0               [24] 2900 	movx	@dptr,a
      000EB5 E5 F0            [12] 2901 	mov	a,b
      000EB7 A3               [24] 2902 	inc	dptr
      000EB8 F0               [24] 2903 	movx	@dptr,a
                                   2904 ;	main.c:357: while (data_to_write==-1)                                  //PRINT WRITE DATA IS INVALID FOR INVALID CHARACTERS ENTERED
      000EB9                       2905 00172$:
      000EB9 90r00r13         [24] 2906 	mov	dptr,#_main_data_to_write_327684_120
      000EBC E0               [24] 2907 	movx	a,@dptr
      000EBD FE               [12] 2908 	mov	r6,a
      000EBE A3               [24] 2909 	inc	dptr
      000EBF E0               [24] 2910 	movx	a,@dptr
      000EC0 FF               [12] 2911 	mov	r7,a
      000EC1 BE FF 33         [24] 2912 	cjne	r6,#0xff,00179$
      000EC4 BF FF 30         [24] 2913 	cjne	r7,#0xff,00179$
                                   2914 ;	main.c:359: printf_tiny ("\n\rData Entered is INVALID\n\r");
      000EC7 74r08            [12] 2915 	mov	a,#___str_16
      000EC9 C0 E0            [24] 2916 	push	acc
      000ECB 74s02            [12] 2917 	mov	a,#(___str_16 >> 8)
      000ECD C0 E0            [24] 2918 	push	acc
      000ECF 12r00r00         [24] 2919 	lcall	_printf_tiny
      000ED2 15 81            [12] 2920 	dec	sp
      000ED4 15 81            [12] 2921 	dec	sp
                                   2922 ;	main.c:360: printf_tiny ("\n\rEnter a New Data\n\r");
      000ED6 74r24            [12] 2923 	mov	a,#___str_17
      000ED8 C0 E0            [24] 2924 	push	acc
      000EDA 74s02            [12] 2925 	mov	a,#(___str_17 >> 8)
      000EDC C0 E0            [24] 2926 	push	acc
      000EDE 12r00r00         [24] 2927 	lcall	_printf_tiny
      000EE1 15 81            [12] 2928 	dec	sp
      000EE3 15 81            [12] 2929 	dec	sp
                                   2930 ;	main.c:361: data_to_write=getdata();
      000EE5 12r00r00         [24] 2931 	lcall	_getdata
      000EE8 E5 82            [12] 2932 	mov	a,dpl
      000EEA 85 83 F0         [24] 2933 	mov	b,dph
      000EED 90r00r13         [24] 2934 	mov	dptr,#_main_data_to_write_327684_120
      000EF0 F0               [24] 2935 	movx	@dptr,a
      000EF1 E5 F0            [12] 2936 	mov	a,b
      000EF3 A3               [24] 2937 	inc	dptr
      000EF4 F0               [24] 2938 	movx	@dptr,a
                                   2939 ;	main.c:363: while(!(data_to_write>=0 && data_to_write<=255))               // CHECKING IF VALUE FALLS IN THE REQUIRED RANGE
      000EF5 80 C2            [24] 2940 	sjmp	00172$
      000EF7                       2941 00179$:
      000EF7 90r00r13         [24] 2942 	mov	dptr,#_main_data_to_write_327684_120
      000EFA E0               [24] 2943 	movx	a,@dptr
      000EFB FE               [12] 2944 	mov	r6,a
      000EFC A3               [24] 2945 	inc	dptr
      000EFD E0               [24] 2946 	movx	a,@dptr
      000EFE FF               [12] 2947 	mov	r7,a
      000EFF 20 E7 0F         [24] 2948 	jb	acc.7,00180$
      000F02 C3               [12] 2949 	clr	c
      000F03 74 FF            [12] 2950 	mov	a,#0xff
      000F05 9E               [12] 2951 	subb	a,r6
      000F06 74 80            [12] 2952 	mov	a,#(0x00 ^ 0x80)
      000F08 8F F0            [24] 2953 	mov	b,r7
      000F0A 63 F0 80         [24] 2954 	xrl	b,#0x80
      000F0D 95 F0            [12] 2955 	subb	a,b
      000F0F 50 4F            [24] 2956 	jnc	00181$
      000F11                       2957 00180$:
                                   2958 ;	main.c:365: printf_tiny ("\n\rData Entered is INVALID\n\r");
      000F11 74r08            [12] 2959 	mov	a,#___str_16
      000F13 C0 E0            [24] 2960 	push	acc
      000F15 74s02            [12] 2961 	mov	a,#(___str_16 >> 8)
      000F17 C0 E0            [24] 2962 	push	acc
      000F19 12r00r00         [24] 2963 	lcall	_printf_tiny
      000F1C 15 81            [12] 2964 	dec	sp
      000F1E 15 81            [12] 2965 	dec	sp
                                   2966 ;	main.c:366: printf_tiny ("\n\rEnter a New Data\n\r");
      000F20 74r24            [12] 2967 	mov	a,#___str_17
      000F22 C0 E0            [24] 2968 	push	acc
      000F24 74s02            [12] 2969 	mov	a,#(___str_17 >> 8)
      000F26 C0 E0            [24] 2970 	push	acc
      000F28 12r00r00         [24] 2971 	lcall	_printf_tiny
      000F2B 15 81            [12] 2972 	dec	sp
      000F2D 15 81            [12] 2973 	dec	sp
                                   2974 ;	main.c:367: data_to_write=getdata();
      000F2F 12r00r00         [24] 2975 	lcall	_getdata
      000F32 AC 82            [24] 2976 	mov	r4,dpl
      000F34 AD 83            [24] 2977 	mov	r5,dph
      000F36 90r00r13         [24] 2978 	mov	dptr,#_main_data_to_write_327684_120
      000F39 EC               [12] 2979 	mov	a,r4
      000F3A F0               [24] 2980 	movx	@dptr,a
      000F3B ED               [12] 2981 	mov	a,r5
      000F3C A3               [24] 2982 	inc	dptr
      000F3D F0               [24] 2983 	movx	@dptr,a
                                   2984 ;	main.c:368: if(data_to_write!='\n' && data_to_write!='\r')
      000F3E BC 0A 05         [24] 2985 	cjne	r4,#0x0a,00519$
      000F41 BD 00 02         [24] 2986 	cjne	r5,#0x00,00519$
      000F44 80 B1            [24] 2987 	sjmp	00179$
      000F46                       2988 00519$:
      000F46 BC 0D 05         [24] 2989 	cjne	r4,#0x0d,00520$
      000F49 BD 00 02         [24] 2990 	cjne	r5,#0x00,00520$
      000F4C 80 A9            [24] 2991 	sjmp	00179$
      000F4E                       2992 00520$:
                                   2993 ;	main.c:369: data_to_write=getdata();                           //IF NOT TAKE IT AGAIN
      000F4E 12r00r00         [24] 2994 	lcall	_getdata
      000F51 E5 82            [12] 2995 	mov	a,dpl
      000F53 85 83 F0         [24] 2996 	mov	b,dph
      000F56 90r00r13         [24] 2997 	mov	dptr,#_main_data_to_write_327684_120
      000F59 F0               [24] 2998 	movx	@dptr,a
      000F5A E5 F0            [12] 2999 	mov	a,b
      000F5C A3               [24] 3000 	inc	dptr
      000F5D F0               [24] 3001 	movx	@dptr,a
      000F5E 80 97            [24] 3002 	sjmp	00179$
      000F60                       3003 00181$:
                                   3004 ;	main.c:371: printf ("\n\rData Value to be Written is %x.\n\r",data_to_write);
      000F60 C0 07            [24] 3005 	push	ar7
      000F62 C0 06            [24] 3006 	push	ar6
      000F64 C0 06            [24] 3007 	push	ar6
      000F66 C0 07            [24] 3008 	push	ar7
      000F68 74r39            [12] 3009 	mov	a,#___str_18
      000F6A C0 E0            [24] 3010 	push	acc
      000F6C 74s02            [12] 3011 	mov	a,#(___str_18 >> 8)
      000F6E C0 E0            [24] 3012 	push	acc
      000F70 74 80            [12] 3013 	mov	a,#0x80
      000F72 C0 E0            [24] 3014 	push	acc
      000F74 12r00r00         [24] 3015 	lcall	_printf
      000F77 E5 81            [12] 3016 	mov	a,sp
      000F79 24 FB            [12] 3017 	add	a,#0xfb
      000F7B F5 81            [12] 3018 	mov	sp,a
      000F7D D0 06            [24] 3019 	pop	ar6
      000F7F D0 07            [24] 3020 	pop	ar7
                                   3021 ;	main.c:372: SDA=HIGH;
                                   3022 ;	assignBit
      000F81 D2 95            [12] 3023 	setb	_P1_5
                                   3024 ;	main.c:373: PAGE_Write(word_address3,data_to_write);
      000F83 90r00r0A         [24] 3025 	mov	dptr,#_word_address3
      000F86 E0               [24] 3026 	movx	a,@dptr
      000F87 FC               [12] 3027 	mov	r4,a
      000F88 A3               [24] 3028 	inc	dptr
      000F89 E0               [24] 3029 	movx	a,@dptr
      000F8A FD               [12] 3030 	mov	r5,a
      000F8B 90r00r00         [24] 3031 	mov	dptr,#_PAGE_Write_PARM_2
      000F8E EE               [12] 3032 	mov	a,r6
      000F8F F0               [24] 3033 	movx	@dptr,a
      000F90 EF               [12] 3034 	mov	a,r7
      000F91 A3               [24] 3035 	inc	dptr
      000F92 F0               [24] 3036 	movx	@dptr,a
      000F93 8C 82            [24] 3037 	mov	dpl,r4
      000F95 8D 83            [24] 3038 	mov	dph,r5
      000F97 12r00r00         [24] 3039 	lcall	_PAGE_Write
                                   3040 ;	main.c:374: break;
      000F9A 02r05r92         [24] 3041 	ljmp	00189$
                                   3042 ;	main.c:376: case('E'):                                                  //RESET SIGNAL
      000F9D                       3043 00182$:
                                   3044 ;	main.c:378: printf_tiny("\n\r********************************************* \n\r");
      000F9D 74r04            [12] 3045 	mov	a,#___str_9
      000F9F C0 E0            [24] 3046 	push	acc
      000FA1 74s01            [12] 3047 	mov	a,#(___str_9 >> 8)
      000FA3 C0 E0            [24] 3048 	push	acc
      000FA5 12r00r00         [24] 3049 	lcall	_printf_tiny
      000FA8 15 81            [12] 3050 	dec	sp
      000FAA 15 81            [12] 3051 	dec	sp
                                   3052 ;	main.c:379: printf_tiny("\n\r\t\t\tRESET I2C\n\r ");
      000FAC 74rD3            [12] 3053 	mov	a,#___str_42
      000FAE C0 E0            [24] 3054 	push	acc
      000FB0 74s05            [12] 3055 	mov	a,#(___str_42 >> 8)
      000FB2 C0 E0            [24] 3056 	push	acc
      000FB4 12r00r00         [24] 3057 	lcall	_printf_tiny
      000FB7 15 81            [12] 3058 	dec	sp
      000FB9 15 81            [12] 3059 	dec	sp
                                   3060 ;	main.c:380: printf_tiny("\n\r********************************************* \n\r");
      000FBB 74r04            [12] 3061 	mov	a,#___str_9
      000FBD C0 E0            [24] 3062 	push	acc
      000FBF 74s01            [12] 3063 	mov	a,#(___str_9 >> 8)
      000FC1 C0 E0            [24] 3064 	push	acc
      000FC3 12r00r00         [24] 3065 	lcall	_printf_tiny
      000FC6 15 81            [12] 3066 	dec	sp
      000FC8 15 81            [12] 3067 	dec	sp
                                   3068 ;	main.c:381: reset();
      000FCA 12r00r00         [24] 3069 	lcall	_reset
                                   3070 ;	main.c:382: break;
      000FCD 02r05r92         [24] 3071 	ljmp	00189$
                                   3072 ;	main.c:384: default:                                                    //INVALID INPUT
      000FD0                       3073 00183$:
                                   3074 ;	main.c:386: printf("\n\rINVALID INPUT: PLS ENTER THE CORRECT KEY\n\r");
      000FD0 74rE5            [12] 3075 	mov	a,#___str_43
      000FD2 C0 E0            [24] 3076 	push	acc
      000FD4 74s05            [12] 3077 	mov	a,#(___str_43 >> 8)
      000FD6 C0 E0            [24] 3078 	push	acc
      000FD8 74 80            [12] 3079 	mov	a,#0x80
      000FDA C0 E0            [24] 3080 	push	acc
      000FDC 12r00r00         [24] 3081 	lcall	_printf
      000FDF 15 81            [12] 3082 	dec	sp
      000FE1 15 81            [12] 3083 	dec	sp
      000FE3 15 81            [12] 3084 	dec	sp
                                   3085 ;	main.c:389: }
                                   3086 ;	main.c:392: }
      000FE5 02r05r92         [24] 3087 	ljmp	00189$
                                   3088 ;------------------------------------------------------------
                                   3089 ;Allocation info for local variables in function 'putchar'
                                   3090 ;------------------------------------------------------------
                                   3091 ;c                         Allocated with name '_putchar_c_65536_125'
                                   3092 ;------------------------------------------------------------
                                   3093 ;	main.c:394: int putchar (int c)
                                   3094 ;	-----------------------------------------
                                   3095 ;	 function putchar
                                   3096 ;	-----------------------------------------
      000FE8                       3097 _putchar:
      000FE8 AF 83            [24] 3098 	mov	r7,dph
      000FEA E5 82            [12] 3099 	mov	a,dpl
      000FEC 90r00r15         [24] 3100 	mov	dptr,#_putchar_c_65536_125
      000FEF F0               [24] 3101 	movx	@dptr,a
      000FF0 EF               [12] 3102 	mov	a,r7
      000FF1 A3               [24] 3103 	inc	dptr
      000FF2 F0               [24] 3104 	movx	@dptr,a
                                   3105 ;	main.c:396: while (!TI);				// WAIT FOR TX READY
      000FF3                       3106 00101$:
      000FF3 30 99 FD         [24] 3107 	jnb	_TI,00101$
                                   3108 ;	main.c:397: SBUF = c;           	// LOAD SERIAL PORT WITH TIMEOUT VALUE
      000FF6 90r00r15         [24] 3109 	mov	dptr,#_putchar_c_65536_125
      000FF9 E0               [24] 3110 	movx	a,@dptr
      000FFA FE               [12] 3111 	mov	r6,a
      000FFB A3               [24] 3112 	inc	dptr
      000FFC E0               [24] 3113 	movx	a,@dptr
      000FFD 8E 99            [24] 3114 	mov	_SBUF,r6
                                   3115 ;	main.c:398: TI = 0;  	            // CLEAR TI FLAG
                                   3116 ;	assignBit
      000FFF C2 99            [12] 3117 	clr	_TI
                                   3118 ;	main.c:399: return 0;
      001001 90 00 00         [24] 3119 	mov	dptr,#0x0000
                                   3120 ;	main.c:400: }
      001004 22               [24] 3121 	ret
                                   3122 ;------------------------------------------------------------
                                   3123 ;Allocation info for local variables in function 'getchar'
                                   3124 ;------------------------------------------------------------
                                   3125 ;	main.c:402: int getchar ()
                                   3126 ;	-----------------------------------------
                                   3127 ;	 function getchar
                                   3128 ;	-----------------------------------------
      001005                       3129 _getchar:
                                   3130 ;	main.c:405: while (!RI);                // WAIT FOR RX READY
      001005                       3131 00101$:
                                   3132 ;	main.c:406: RI = 0;			            // CLEAR RI FLAG
                                   3133 ;	assignBit
      001005 10 98 02         [24] 3134 	jbc	_RI,00114$
      001008 80 FB            [24] 3135 	sjmp	00101$
      00100A                       3136 00114$:
                                   3137 ;	main.c:407: return SBUF;  	            // REYTRUN CHARACTER FROM SBUF
      00100A AE 99            [24] 3138 	mov	r6,_SBUF
      00100C 7F 00            [12] 3139 	mov	r7,#0x00
      00100E 8E 82            [24] 3140 	mov	dpl,r6
      001010 8F 83            [24] 3141 	mov	dph,r7
                                   3142 ;	main.c:408: }
      001012 22               [24] 3143 	ret
                                   3144 	.area CSEG    (CODE)
                                   3145 	.area CONST   (CODE)
                                   3146 	.area CONST   (CODE)
      000000                       3147 ___str_0:
      000000 0A                    3148 	.db 0x0a
      000001 0D                    3149 	.db 0x0d
      000002 7E 7E 7E 7E 7E 7E 7E  3150 	.ascii "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ "
             7E 7E 7E 7E 7E 7E 7E
             7E 7E 7E 7E 7E 7E 7E
             7E 7E 7E 7E 7E 7E 7E
             7E 7E 7E 7E 7E 7E 7E
             7E 7E 7E 7E 7E 7E 7E
             7E 7E 7E 7E 7E 20
      000032 0A                    3151 	.db 0x0a
      000033 0D                    3152 	.db 0x0d
      000034 00                    3153 	.db 0x00
                                   3154 	.area CSEG    (CODE)
                                   3155 	.area CONST   (CODE)
      000035                       3156 ___str_1:
      000035 0A                    3157 	.db 0x0a
      000036 0D                    3158 	.db 0x0d
      000037 7E 7E 7E 7E 7E 7E 7E  3159 	.ascii "~~~~~~~~~~~~~~~~~I2C~~~~~~~~~~~~~~~~~~~~~~~~~~~ "
             7E 7E 7E 7E 7E 7E 7E
             7E 7E 7E 49 32 43 7E
             7E 7E 7E 7E 7E 7E 7E
             7E 7E 7E 7E 7E 7E 7E
             7E 7E 7E 7E 7E 7E 7E
             7E 7E 7E 7E 7E 20
      000067 0A                    3160 	.db 0x0a
      000068 0D                    3161 	.db 0x0d
      000069 00                    3162 	.db 0x00
                                   3163 	.area CSEG    (CODE)
                                   3164 	.area CONST   (CODE)
      00006A                       3165 ___str_2:
      00006A 0A                    3166 	.db 0x0a
      00006B 0D                    3167 	.db 0x0d
      00006C 54 68 65 20 66 6F 6C  3168 	.ascii "The following commands will be performed "
             6C 6F 77 69 6E 67 20
             63 6F 6D 6D 61 6E 64
             73 20 77 69 6C 6C 20
             62 65 20 70 65 72 66
             6F 72 6D 65 64 20
      000095 0A                    3169 	.db 0x0a
      000096 0D                    3170 	.db 0x0d
      000097 00                    3171 	.db 0x00
                                   3172 	.area CSEG    (CODE)
                                   3173 	.area CONST   (CODE)
      000098                       3174 ___str_3:
      000098 0A                    3175 	.db 0x0a
      000099 0D                    3176 	.db 0x0d
      00009A 57 2D 57 72 69 74 65  3177 	.ascii "W-Write Byte "
             20 42 79 74 65 20
      0000A7 0A                    3178 	.db 0x0a
      0000A8 0D                    3179 	.db 0x0d
      0000A9 00                    3180 	.db 0x00
                                   3181 	.area CSEG    (CODE)
                                   3182 	.area CONST   (CODE)
      0000AA                       3183 ___str_4:
      0000AA 0A                    3184 	.db 0x0a
      0000AB 0D                    3185 	.db 0x0d
      0000AC 52 2D 52 65 61 64 20  3186 	.ascii "R-Read Byte "
             42 79 74 65 20
      0000B8 0A                    3187 	.db 0x0a
      0000B9 0D                    3188 	.db 0x0d
      0000BA 00                    3189 	.db 0x00
                                   3190 	.area CSEG    (CODE)
                                   3191 	.area CONST   (CODE)
      0000BB                       3192 ___str_5:
      0000BB 0A                    3193 	.db 0x0a
      0000BC 0D                    3194 	.db 0x0d
      0000BD 48 2D 48 65 78 20 44  3195 	.ascii "H-Hex Dump "
             75 6D 70 20
      0000C8 0A                    3196 	.db 0x0a
      0000C9 0D                    3197 	.db 0x0d
      0000CA 00                    3198 	.db 0x00
                                   3199 	.area CSEG    (CODE)
                                   3200 	.area CONST   (CODE)
      0000CB                       3201 ___str_6:
      0000CB 0A                    3202 	.db 0x0a
      0000CC 0D                    3203 	.db 0x0d
      0000CD 50 2D 50 61 67 65 20  3204 	.ascii "P-Page Write "
             57 72 69 74 65 20
      0000DA 0A                    3205 	.db 0x0a
      0000DB 0D                    3206 	.db 0x0d
      0000DC 00                    3207 	.db 0x00
                                   3208 	.area CSEG    (CODE)
                                   3209 	.area CONST   (CODE)
      0000DD                       3210 ___str_7:
      0000DD 0A                    3211 	.db 0x0a
      0000DE 0D                    3212 	.db 0x0d
      0000DF 45 2D 52 65 73 65 74  3213 	.ascii "E-Reset Eeprom "
             20 45 65 70 72 6F 6D
             20
      0000EE 0A                    3214 	.db 0x0a
      0000EF 0D                    3215 	.db 0x0d
      0000F0 00                    3216 	.db 0x00
                                   3217 	.area CSEG    (CODE)
                                   3218 	.area CONST   (CODE)
      0000F1                       3219 ___str_8:
      0000F1 0A                    3220 	.db 0x0a
      0000F2 0D                    3221 	.db 0x0d
      0000F3 45 6E 74 65 72 20 54  3222 	.ascii "Enter The Key"
             68 65 20 4B 65 79
      000100 0A                    3223 	.db 0x0a
      000101 0D                    3224 	.db 0x0d
      000102 20                    3225 	.ascii " "
      000103 00                    3226 	.db 0x00
                                   3227 	.area CSEG    (CODE)
                                   3228 	.area CONST   (CODE)
      000104                       3229 ___str_9:
      000104 0A                    3230 	.db 0x0a
      000105 0D                    3231 	.db 0x0d
      000106 2A 2A 2A 2A 2A 2A 2A  3232 	.ascii "********************************************* "
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 20
      000134 0A                    3233 	.db 0x0a
      000135 0D                    3234 	.db 0x0d
      000136 00                    3235 	.db 0x00
                                   3236 	.area CSEG    (CODE)
                                   3237 	.area CONST   (CODE)
      000137                       3238 ___str_10:
      000137 0A                    3239 	.db 0x0a
      000138 0D                    3240 	.db 0x0d
      000139 09                    3241 	.db 0x09
      00013A 09                    3242 	.db 0x09
      00013B 57 52 49 54 45 20 42  3243 	.ascii "WRITE BYTE"
             59 54 45
      000145 0A                    3244 	.db 0x0a
      000146 0D                    3245 	.db 0x0d
      000147 20                    3246 	.ascii " "
      000148 00                    3247 	.db 0x00
                                   3248 	.area CSEG    (CODE)
                                   3249 	.area CONST   (CODE)
      000149                       3250 ___str_11:
      000149 0A                    3251 	.db 0x0a
      00014A 0D                    3252 	.db 0x0d
      00014B 45 6E 74 65 72 20 74  3253 	.ascii "Enter the 3 Digit Write Address"
             68 65 20 33 20 44 69
             67 69 74 20 57 72 69
             74 65 20 41 64 64 72
             65 73 73
      00016A 0A                    3254 	.db 0x0a
      00016B 0D                    3255 	.db 0x0d
      00016C 00                    3256 	.db 0x00
                                   3257 	.area CSEG    (CODE)
                                   3258 	.area CONST   (CODE)
      00016D                       3259 ___str_12:
      00016D 0A                    3260 	.db 0x0a
      00016E 0D                    3261 	.db 0x0d
      00016F 54 68 65 20 57 72 69  3262 	.ascii "The Write Address Entered is INVALID"
             74 65 20 41 64 64 72
             65 73 73 20 45 6E 74
             65 72 65 64 20 69 73
             20 49 4E 56 41 4C 49
             44
      000193 0A                    3263 	.db 0x0a
      000194 0D                    3264 	.db 0x0d
      000195 00                    3265 	.db 0x00
                                   3266 	.area CSEG    (CODE)
                                   3267 	.area CONST   (CODE)
      000196                       3268 ___str_13:
      000196 0A                    3269 	.db 0x0a
      000197 0D                    3270 	.db 0x0d
      000198 45 6E 74 65 72 20 61  3271 	.ascii "Enter a New Address"
             20 4E 65 77 20 41 64
             64 72 65 73 73
      0001AB 0A                    3272 	.db 0x0a
      0001AC 0D                    3273 	.db 0x0d
      0001AD 00                    3274 	.db 0x00
                                   3275 	.area CSEG    (CODE)
                                   3276 	.area CONST   (CODE)
      0001AE                       3277 ___str_14:
      0001AE 0A                    3278 	.db 0x0a
      0001AF 0D                    3279 	.db 0x0d
      0001B0 54 68 65 20 41 64 64  3280 	.ascii "The Address for Write Operation is %x."
             72 65 73 73 20 66 6F
             72 20 57 72 69 74 65
             20 4F 70 65 72 61 74
             69 6F 6E 20 69 73 20
             25 78 2E
      0001D6 0A                    3281 	.db 0x0a
      0001D7 0D                    3282 	.db 0x0d
      0001D8 00                    3283 	.db 0x00
                                   3284 	.area CSEG    (CODE)
                                   3285 	.area CONST   (CODE)
      0001D9                       3286 ___str_15:
      0001D9 0A                    3287 	.db 0x0a
      0001DA 0D                    3288 	.db 0x0d
      0001DB 45 6E 74 65 72 20 74  3289 	.ascii "Enter the 2 Digit Data value to be Written"
             68 65 20 32 20 44 69
             67 69 74 20 44 61 74
             61 20 76 61 6C 75 65
             20 74 6F 20 62 65 20
             57 72 69 74 74 65 6E
      000205 0A                    3290 	.db 0x0a
      000206 0D                    3291 	.db 0x0d
      000207 00                    3292 	.db 0x00
                                   3293 	.area CSEG    (CODE)
                                   3294 	.area CONST   (CODE)
      000208                       3295 ___str_16:
      000208 0A                    3296 	.db 0x0a
      000209 0D                    3297 	.db 0x0d
      00020A 44 61 74 61 20 45 6E  3298 	.ascii "Data Entered is INVALID"
             74 65 72 65 64 20 69
             73 20 49 4E 56 41 4C
             49 44
      000221 0A                    3299 	.db 0x0a
      000222 0D                    3300 	.db 0x0d
      000223 00                    3301 	.db 0x00
                                   3302 	.area CSEG    (CODE)
                                   3303 	.area CONST   (CODE)
      000224                       3304 ___str_17:
      000224 0A                    3305 	.db 0x0a
      000225 0D                    3306 	.db 0x0d
      000226 45 6E 74 65 72 20 61  3307 	.ascii "Enter a New Data"
             20 4E 65 77 20 44 61
             74 61
      000236 0A                    3308 	.db 0x0a
      000237 0D                    3309 	.db 0x0d
      000238 00                    3310 	.db 0x00
                                   3311 	.area CSEG    (CODE)
                                   3312 	.area CONST   (CODE)
      000239                       3313 ___str_18:
      000239 0A                    3314 	.db 0x0a
      00023A 0D                    3315 	.db 0x0d
      00023B 44 61 74 61 20 56 61  3316 	.ascii "Data Value to be Written is %x."
             6C 75 65 20 74 6F 20
             62 65 20 57 72 69 74
             74 65 6E 20 69 73 20
             25 78 2E
      00025A 0A                    3317 	.db 0x0a
      00025B 0D                    3318 	.db 0x0d
      00025C 00                    3319 	.db 0x00
                                   3320 	.area CSEG    (CODE)
                                   3321 	.area CONST   (CODE)
      00025D                       3322 ___str_19:
      00025D 0A                    3323 	.db 0x0a
      00025E 0D                    3324 	.db 0x0d
      00025F 09                    3325 	.db 0x09
      000260 09                    3326 	.db 0x09
      000261 52 45 41 44 20 42 59  3327 	.ascii "READ BYTE"
             54 45
      00026A 0A                    3328 	.db 0x0a
      00026B 0D                    3329 	.db 0x0d
      00026C 20                    3330 	.ascii " "
      00026D 00                    3331 	.db 0x00
                                   3332 	.area CSEG    (CODE)
                                   3333 	.area CONST   (CODE)
      00026E                       3334 ___str_20:
      00026E 0A                    3335 	.db 0x0a
      00026F 0D                    3336 	.db 0x0d
      000270 45 6E 74 65 72 20 74  3337 	.ascii "Enter the 3 Digit Read Address"
             68 65 20 33 20 44 69
             67 69 74 20 52 65 61
             64 20 41 64 64 72 65
             73 73
      00028E 0A                    3338 	.db 0x0a
      00028F 0D                    3339 	.db 0x0d
      000290 00                    3340 	.db 0x00
                                   3341 	.area CSEG    (CODE)
                                   3342 	.area CONST   (CODE)
      000291                       3343 ___str_21:
      000291 0A                    3344 	.db 0x0a
      000292 0D                    3345 	.db 0x0d
      000293 52 65 61 64 20 41 64  3346 	.ascii "Read Address entered is INVALID"
             64 72 65 73 73 20 65
             6E 74 65 72 65 64 20
             69 73 20 49 4E 56 41
             4C 49 44
      0002B2 0A                    3347 	.db 0x0a
      0002B3 0D                    3348 	.db 0x0d
      0002B4 00                    3349 	.db 0x00
                                   3350 	.area CSEG    (CODE)
                                   3351 	.area CONST   (CODE)
      0002B5                       3352 ___str_22:
      0002B5 0A                    3353 	.db 0x0a
      0002B6 0D                    3354 	.db 0x0d
      0002B7 45 6E 74 65 72 20 61  3355 	.ascii "Enter a New Read Address"
             20 4E 65 77 20 52 65
             61 64 20 41 64 64 72
             65 73 73
      0002CF 0A                    3356 	.db 0x0a
      0002D0 0D                    3357 	.db 0x0d
      0002D1 00                    3358 	.db 0x00
                                   3359 	.area CSEG    (CODE)
                                   3360 	.area CONST   (CODE)
      0002D2                       3361 ___str_23:
      0002D2 0A                    3362 	.db 0x0a
      0002D3 0D                    3363 	.db 0x0d
      0002D4 54 68 65 20 52 65 61  3364 	.ascii "The Read Byte Address is %x."
             64 20 42 79 74 65 20
             41 64 64 72 65 73 73
             20 69 73 20 25 78 2E
      0002F0 0A                    3365 	.db 0x0a
      0002F1 0D                    3366 	.db 0x0d
      0002F2 00                    3367 	.db 0x00
                                   3368 	.area CSEG    (CODE)
                                   3369 	.area CONST   (CODE)
      0002F3                       3370 ___str_24:
      0002F3 0A                    3371 	.db 0x0a
      0002F4 0A                    3372 	.db 0x0a
      0002F5 0A                    3373 	.db 0x0a
      0002F6 0D                    3374 	.db 0x0d
      0002F7 20 54 68 65 20 44 61  3375 	.ascii " The Data Present at the Read Address is %x"
             74 61 20 50 72 65 73
             65 6E 74 20 61 74 20
             74 68 65 20 52 65 61
             64 20 41 64 64 72 65
             73 73 20 69 73 20 25
             78
      000322 0A                    3376 	.db 0x0a
      000323 0D                    3377 	.db 0x0d
      000324 00                    3378 	.db 0x00
                                   3379 	.area CSEG    (CODE)
                                   3380 	.area CONST   (CODE)
      000325                       3381 ___str_25:
      000325 0A                    3382 	.db 0x0a
      000326 0D                    3383 	.db 0x0d
      000327 09                    3384 	.db 0x09
      000328 09                    3385 	.db 0x09
      000329 48 45 58 20 44 55 4D  3386 	.ascii "HEX DUMP"
             50
      000331 0A                    3387 	.db 0x0a
      000332 0D                    3388 	.db 0x0d
      000333 20                    3389 	.ascii " "
      000334 00                    3390 	.db 0x00
                                   3391 	.area CSEG    (CODE)
                                   3392 	.area CONST   (CODE)
      000335                       3393 ___str_26:
      000335 0A                    3394 	.db 0x0a
      000336 0D                    3395 	.db 0x0d
      000337 45 6E 74 65 72 20 74  3396 	.ascii "Enter the 3 Digit Starting Address for Hex Dump"
             68 65 20 33 20 44 69
             67 69 74 20 53 74 61
             72 74 69 6E 67 20 41
             64 64 72 65 73 73 20
             66 6F 72 20 48 65 78
             20 44 75 6D 70
      000366 0A                    3397 	.db 0x0a
      000367 0D                    3398 	.db 0x0d
      000368 00                    3399 	.db 0x00
                                   3400 	.area CSEG    (CODE)
                                   3401 	.area CONST   (CODE)
      000369                       3402 ___str_27:
      000369 0A                    3403 	.db 0x0a
      00036A 0D                    3404 	.db 0x0d
      00036B 48 65 78 20 44 75 6D  3405 	.ascii "Hex Dump Starting Address is INVALID"
             70 20 53 74 61 72 74
             69 6E 67 20 41 64 64
             72 65 73 73 20 69 73
             20 49 4E 56 41 4C 49
             44
      00038F 0A                    3406 	.db 0x0a
      000390 0D                    3407 	.db 0x0d
      000391 00                    3408 	.db 0x00
                                   3409 	.area CSEG    (CODE)
                                   3410 	.area CONST   (CODE)
      000392                       3411 ___str_28:
      000392 0A                    3412 	.db 0x0a
      000393 0D                    3413 	.db 0x0d
      000394 45 6E 74 65 72 20 61  3414 	.ascii "Enter a New Hex Dump Starting Address"
             20 4E 65 77 20 48 65
             78 20 44 75 6D 70 20
             53 74 61 72 74 69 6E
             67 20 41 64 64 72 65
             73 73
      0003B9 0A                    3415 	.db 0x0a
      0003BA 0D                    3416 	.db 0x0d
      0003BB 00                    3417 	.db 0x00
                                   3418 	.area CSEG    (CODE)
                                   3419 	.area CONST   (CODE)
      0003BC                       3420 ___str_29:
      0003BC 0A                    3421 	.db 0x0a
      0003BD 0D                    3422 	.db 0x0d
      0003BE 48 65 78 20 44 75 6D  3423 	.ascii "Hex Dump Starting Address entered is %x."
             70 20 53 74 61 72 74
             69 6E 67 20 41 64 64
             72 65 73 73 20 65 6E
             74 65 72 65 64 20 69
             73 20 25 78 2E
      0003E6 0A                    3424 	.db 0x0a
      0003E7 0D                    3425 	.db 0x0d
      0003E8 00                    3426 	.db 0x00
                                   3427 	.area CSEG    (CODE)
                                   3428 	.area CONST   (CODE)
      0003E9                       3429 ___str_30:
      0003E9 0A                    3430 	.db 0x0a
      0003EA 0D                    3431 	.db 0x0d
      0003EB 45 6E 74 65 72 20 74  3432 	.ascii "Enter the 3 Digit Ending Address for Hex Dump"
             68 65 20 33 20 44 69
             67 69 74 20 45 6E 64
             69 6E 67 20 41 64 64
             72 65 73 73 20 66 6F
             72 20 48 65 78 20 44
             75 6D 70
      000418 0A                    3433 	.db 0x0a
      000419 0D                    3434 	.db 0x0d
      00041A 00                    3435 	.db 0x00
                                   3436 	.area CSEG    (CODE)
                                   3437 	.area CONST   (CODE)
      00041B                       3438 ___str_31:
      00041B 0A                    3439 	.db 0x0a
      00041C 0D                    3440 	.db 0x0d
      00041D 48 65 78 20 44 75 6D  3441 	.ascii "Hex Dump Ending Address is INVALID"
             70 20 45 6E 64 69 6E
             67 20 41 64 64 72 65
             73 73 20 69 73 20 49
             4E 56 41 4C 49 44
      00043F 0A                    3442 	.db 0x0a
      000440 0D                    3443 	.db 0x0d
      000441 00                    3444 	.db 0x00
                                   3445 	.area CSEG    (CODE)
                                   3446 	.area CONST   (CODE)
      000442                       3447 ___str_32:
      000442 0A                    3448 	.db 0x0a
      000443 0D                    3449 	.db 0x0d
      000444 45 6E 74 65 72 20 61  3450 	.ascii "Enter a New Hex Dump Ending Address"
             20 4E 65 77 20 48 65
             78 20 44 75 6D 70 20
             45 6E 64 69 6E 67 20
             41 64 64 72 65 73 73
      000467 0A                    3451 	.db 0x0a
      000468 0D                    3452 	.db 0x0d
      000469 00                    3453 	.db 0x00
                                   3454 	.area CSEG    (CODE)
                                   3455 	.area CONST   (CODE)
      00046A                       3456 ___str_33:
      00046A 0A                    3457 	.db 0x0a
      00046B 0D                    3458 	.db 0x0d
      00046C 48 65 78 20 44 75 6D  3459 	.ascii "Hex Dump Ending Address entered is %x."
             70 20 45 6E 64 69 6E
             67 20 41 64 64 72 65
             73 73 20 65 6E 74 65
             72 65 64 20 69 73 20
             25 78 2E
      000492 0A                    3460 	.db 0x0a
      000493 0D                    3461 	.db 0x0d
      000494 00                    3462 	.db 0x00
                                   3463 	.area CSEG    (CODE)
                                   3464 	.area CONST   (CODE)
      000495                       3465 ___str_34:
      000495 0A                    3466 	.db 0x0a
      000496 0D                    3467 	.db 0x0d
      000497 45 52 52 4F 52 3A 20  3468 	.ascii "ERROR:  The value of Hex Start Address was less than the Hex"
             20 54 68 65 20 76 61
             6C 75 65 20 6F 66 20
             48 65 78 20 53 74 61
             72 74 20 41 64 64 72
             65 73 73 20 77 61 73
             20 6C 65 73 73 20 74
             68 61 6E 20 74 68 65
             20 48 65 78
      0004D3 20 45 6E 64 20 41 64  3469 	.ascii " End Address"
             64 72 65 73 73
      0004DF 0A                    3470 	.db 0x0a
      0004E0 0D                    3471 	.db 0x0d
      0004E1 00                    3472 	.db 0x00
                                   3473 	.area CSEG    (CODE)
                                   3474 	.area CONST   (CODE)
      0004E2                       3475 ___str_35:
      0004E2 0A                    3476 	.db 0x0a
      0004E3 0D                    3477 	.db 0x0d
      0004E4 09                    3478 	.db 0x09
      0004E5 09                    3479 	.db 0x09
      0004E6 50 41 47 45 20 57 52  3480 	.ascii "PAGE WRITE"
             49 54 45
      0004F0 0A                    3481 	.db 0x0a
      0004F1 0D                    3482 	.db 0x0d
      0004F2 20                    3483 	.ascii " "
      0004F3 00                    3484 	.db 0x00
                                   3485 	.area CSEG    (CODE)
                                   3486 	.area CONST   (CODE)
      0004F4                       3487 ___str_36:
      0004F4 0A                    3488 	.db 0x0a
      0004F5 0D                    3489 	.db 0x0d
      0004F6 45 6E 74 65 72 20 74  3490 	.ascii "Enter the Page Address "
             68 65 20 50 61 67 65
             20 41 64 64 72 65 73
             73 20
      00050D 0A                    3491 	.db 0x0a
      00050E 0D                    3492 	.db 0x0d
      00050F 00                    3493 	.db 0x00
                                   3494 	.area CSEG    (CODE)
                                   3495 	.area CONST   (CODE)
      000510                       3496 ___str_37:
      000510 0A                    3497 	.db 0x0a
      000511 0D                    3498 	.db 0x0d
      000512 54 68 65 20 76 61 6C  3499 	.ascii "The value of page address entered is invalid"
             75 65 20 6F 66 20 70
             61 67 65 20 61 64 64
             72 65 73 73 20 65 6E
             74 65 72 65 64 20 69
             73 20 69 6E 76 61 6C
             69 64
      00053E 0A                    3500 	.db 0x0a
      00053F 0D                    3501 	.db 0x0d
      000540 00                    3502 	.db 0x00
                                   3503 	.area CSEG    (CODE)
                                   3504 	.area CONST   (CODE)
      000541                       3505 ___str_38:
      000541 0A                    3506 	.db 0x0a
      000542 0D                    3507 	.db 0x0d
      000543 45 6E 74 65 72 20 61  3508 	.ascii "Enter a new page starting address"
             20 6E 65 77 20 70 61
             67 65 20 73 74 61 72
             74 69 6E 67 20 61 64
             64 72 65 73 73
      000564 0A                    3509 	.db 0x0a
      000565 0D                    3510 	.db 0x0d
      000566 00                    3511 	.db 0x00
                                   3512 	.area CSEG    (CODE)
                                   3513 	.area CONST   (CODE)
      000567                       3514 ___str_39:
      000567 0A                    3515 	.db 0x0a
      000568 0D                    3516 	.db 0x0d
      000569 45 6E 74 65 72 20 61  3517 	.ascii "Enter a new page address"
             20 6E 65 77 20 70 61
             67 65 20 61 64 64 72
             65 73 73
      000581 0A                    3518 	.db 0x0a
      000582 0D                    3519 	.db 0x0d
      000583 00                    3520 	.db 0x00
                                   3521 	.area CSEG    (CODE)
                                   3522 	.area CONST   (CODE)
      000584                       3523 ___str_40:
      000584 0A                    3524 	.db 0x0a
      000585 0D                    3525 	.db 0x0d
      000586 54 68 65 20 76 61 6C  3526 	.ascii "The value of page address entered is %x."
             75 65 20 6F 66 20 70
             61 67 65 20 61 64 64
             72 65 73 73 20 65 6E
             74 65 72 65 64 20 69
             73 20 25 78 2E
      0005AE 0A                    3527 	.db 0x0a
      0005AF 0D                    3528 	.db 0x0d
      0005B0 00                    3529 	.db 0x00
                                   3530 	.area CSEG    (CODE)
                                   3531 	.area CONST   (CODE)
      0005B1                       3532 ___str_41:
      0005B1 0A                    3533 	.db 0x0a
      0005B2 0D                    3534 	.db 0x0d
      0005B3 45 6E 74 65 72 20 74  3535 	.ascii "Enter the data to page write "
             68 65 20 64 61 74 61
             20 74 6F 20 70 61 67
             65 20 77 72 69 74 65
             20
      0005D0 0A                    3536 	.db 0x0a
      0005D1 0D                    3537 	.db 0x0d
      0005D2 00                    3538 	.db 0x00
                                   3539 	.area CSEG    (CODE)
                                   3540 	.area CONST   (CODE)
      0005D3                       3541 ___str_42:
      0005D3 0A                    3542 	.db 0x0a
      0005D4 0D                    3543 	.db 0x0d
      0005D5 09                    3544 	.db 0x09
      0005D6 09                    3545 	.db 0x09
      0005D7 09                    3546 	.db 0x09
      0005D8 52 45 53 45 54 20 49  3547 	.ascii "RESET I2C"
             32 43
      0005E1 0A                    3548 	.db 0x0a
      0005E2 0D                    3549 	.db 0x0d
      0005E3 20                    3550 	.ascii " "
      0005E4 00                    3551 	.db 0x00
                                   3552 	.area CSEG    (CODE)
                                   3553 	.area CONST   (CODE)
      0005E5                       3554 ___str_43:
      0005E5 0A                    3555 	.db 0x0a
      0005E6 0D                    3556 	.db 0x0d
      0005E7 49 4E 56 41 4C 49 44  3557 	.ascii "INVALID INPUT: PLS ENTER THE CORRECT KEY"
             20 49 4E 50 55 54 3A
             20 50 4C 53 20 45 4E
             54 45 52 20 54 48 45
             20 43 4F 52 52 45 43
             54 20 4B 45 59
      00060F 0A                    3558 	.db 0x0a
      000610 0D                    3559 	.db 0x0d
      000611 00                    3560 	.db 0x00
                                   3561 	.area CSEG    (CODE)
                                   3562 	.area XINIT   (CODE)
      000000                       3563 __xinit__EEPROM_CMD:
      000000 00 00                 3564 	.byte #0x00, #0x00	;  0
      000002                       3565 __xinit__EEPROM_CMD_PAGE:
      000002 00 00                 3566 	.byte #0x00, #0x00	;  0
      000004                       3567 __xinit__word_address:
      000004 00 00                 3568 	.byte #0x00, #0x00	; 0
      000006                       3569 __xinit__word_address1:
      000006 00 00                 3570 	.byte #0x00, #0x00	; 0
      000008                       3571 __xinit__word_address2:
      000008 00 00                 3572 	.byte #0x00, #0x00	; 0
      00000A                       3573 __xinit__word_address3:
      00000A 00 00                 3574 	.byte #0x00, #0x00	; 0
      00000C                       3575 __xinit__page_block1:
      00000C 00 00                 3576 	.byte #0x00, #0x00	;  0
      00000E                       3577 __xinit__page_block2:
      00000E 00 00                 3578 	.byte #0x00, #0x00	;  0
      000010                       3579 __xinit__page_block3:
      000010 00 00                 3580 	.byte #0x00, #0x00	;  0
                                   3581 	.area CABS    (ABS,CODE)
